<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Knowledgebases on LightJason</title>
    <link>https://lightjason.github.io/knowledgebase/index.xml</link>
    <description>Recent content in Knowledgebases on LightJason</description>
    <generator>Hugo -- gohugo.io</generator>
    <atom:link href="https://lightjason.github.io/knowledgebase/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Basic Knowledge: Actions</title>
      <link>https://lightjason.github.io/knowledgebase/actions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lightjason.github.io/knowledgebase/actions/</guid>
      <description>&lt;p&gt;This text gives you an overview over the main build-in actions in LightJason/AgentSpeak(L++).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;All actions are organised within the &lt;a href=&#34;http://lightjason.github.io/AgentSpeak/sources/d8/da4/namespaceorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin.html&#34;&gt;action.buildin&lt;/a&gt; package.
Each packages defines a semantic structure of the actions.
For an example on how to make use of actions have a look at our &lt;a href=&#34;https://github.com/LightJason/AgentSpeak/blob/master/src/test/resources/agent/complete.asl&#34;&gt;testing agent&lt;/a&gt; or the &lt;a href=&#34;https://lightjason.github.io/tutorials&#34;&gt;tutorials&lt;/a&gt;, which uses many built-in actions provided by AgentSpeak(L++).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The action list shows all existing build-in actions and if you click on the brief description you get a detailed information with a code example.&lt;/p&gt;

&lt;h2 id=&#34;agent&#34;&gt;agent&lt;/h2&gt;&lt;dl&gt;&lt;dt id=&#34;agent/addplan&#34;&gt;&lt;a href=&#34;#agent/addplan&#34;&gt;agent/addplan&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;adds a plan to the plan-base. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The actions adds all arguments which are plans to the plan-base of the current agent, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;agent/addplan(Plan1,Plan2,[Plan3,[Plan4]]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d1/db0/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1agent_1_1CAddPlan.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;agent/belieflist&#34;&gt;&lt;a href=&#34;#agent/belieflist&#34;&gt;agent/belieflist&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns a list of all belief literals. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action creates a list of literals, the arguments are optional, the first argument is a boolean for the negation definition, the second argument is the belief functor, if no arguments are give, the full belieflist is returned &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;L=agent/belieflist(true,&#34;path/subpath/literalfunctor&#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d9/de9/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1agent_1_1CBeliefList.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;agent/clearbeliefbase&#34;&gt;&lt;a href=&#34;#agent/clearbeliefbase&#34;&gt;agent/clearbeliefbase&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;clears all elements from the beliefbase. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action clear th beliefbase, the arguments are optional and can be string paths to beliefbases &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;agent/clearbeliefbase(&#34;env&#34;,&#34;foo&#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/de/d4a/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1agent_1_1CClearBeliefbase.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;agent/cycletime&#34;&gt;&lt;a href=&#34;#agent/cycletime&#34;&gt;agent/cycletime&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to get cycle time. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action returns the time between the last cycle and the current time in nanoseconds and fails never &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;T=agent/cycletime();
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d0/d0f/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1agent_1_1CCycleTime.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;agent/getplan&#34;&gt;&lt;a href=&#34;#agent/getplan&#34;&gt;agent/getplan&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to get a plan object. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The actions returns a (set of) plan(s), the arguments are tuples of a string with the trigger and a string or literal with the plan definition, for each tuple the plan object will returned, the action fails on non-existing plan &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B]=agent/getplan(&#34;+!&#34;,&#34;myplan(X)&#34;,&#34;-!&#34;,Literal);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d5/d29/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1agent_1_1CGetPlan.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;agent/planlist&#34;&gt;&lt;a href=&#34;#agent/planlist&#34;&gt;agent/planlist&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to get plan-information as list. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action returns a list of tuples with the a string (trigger definition) and the plan literal, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;L=agent/planlist();
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/de/dd2/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1agent_1_1CPlanList.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;agent/planstatistic&#34;&gt;&lt;a href=&#34;#agent/planstatistic&#34;&gt;agent/planstatistic&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to get plan statistic. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The actions returns for each plan the statistic information, for each plan argument, succesfull, fail and sum rate is returned, the action fails if the plan does not exist within the plan-base &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[Successful1|Fail1|Sum1|Successful2|Fail2|Sum2]=agent/planstatistic(Plan1,Plan2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/df/d5f/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1agent_1_1CPlanStatistic.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;agent/removeplan&#34;&gt;&lt;a href=&#34;#agent/removeplan&#34;&gt;agent/removeplan&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;removes a plan by the plan trigger. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action moves all plan based on the input trigger arguments, the action fails on wrong input &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;agent/removeplan(&#34;+!&#34;,&#34;myplan(X)&#34;,&#34;-!&#34;,Literal);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/db/d5d/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1agent_1_1CRemovePlan.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;agent/sleep&#34;&gt;&lt;a href=&#34;#agent/sleep&#34;&gt;agent/sleep&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;sets the agent to the sleep state. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action applys the sleep state of the current agent. The first optional argument can be a sleeping time (in agent cycles) &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;agent/sleep(3);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d7/dd4/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1agent_1_1CSleep.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;/dl&gt;&lt;h2 id=&#34;bool&#34;&gt;bool&lt;/h2&gt;&lt;dl&gt;&lt;dt id=&#34;bool/allmatch&#34;&gt;&lt;a href=&#34;#bool/allmatch&#34;&gt;bool/allmatch&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;checks all elements are equal to the first argument. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The actions checks the first argument to all other if this matchs for equality, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;AllEqual=generic/bool/anymatch(&#34;thisisthetest&#34;,123,&#34;thisisthetest&#34;,[&#34;hello&#34;,234]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;Note&lt;/dt&gt;&lt;dd&gt;on number arguments not the value must equal, also the type (double / integral) must be equal, so keep in mind, that you use the correct number type on the argument input &lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/da/dcb/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1bool_1_1CAllMatch.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;bool/and&#34;&gt;&lt;a href=&#34;#bool/and&#34;&gt;bool/and&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;combines all arguments to a single result with the and-operator. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;This action uses the logical cpnjunction to combine all logical arguments in a single result, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;R=generic/bool/and(Logical1,[Logical2,Logical3],Logical4);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Logical_conjunction&#34; /&gt;https://en.wikipedia.org/wiki/Logical_conjunction&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d1/dc9/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1bool_1_1CAnd.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;bool/anymatch&#34;&gt;&lt;a href=&#34;#bool/anymatch&#34;&gt;bool/anymatch&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;checks any elements are equal to the first argument. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The actions checks the first argument to all other if any matchs for equality, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;AnyEqual=generic/bool/anymatch(&#34;thisisthetest&#34;,123,&#34;thisisthetest&#34;,[&#34;hello&#34;,234]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;Note&lt;/dt&gt;&lt;dd&gt;on number arguments not the value must equal, also the type (double / integral) must be equal, so keep in mind, that you use the correct number type on the argument input &lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d8/dcd/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1bool_1_1CAnyMatch.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;bool/countfalse&#34;&gt;&lt;a href=&#34;#bool/countfalse&#34;&gt;bool/countfalse&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;count the number of false values. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;This action counts the number of false values, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;R=generic/bool/countfalse(Logical1,[Logical2,Logical3],Logical4);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/de/dcf/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1bool_1_1CCountFalse.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;bool/counttrue&#34;&gt;&lt;a href=&#34;#bool/counttrue&#34;&gt;bool/counttrue&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;counts the number of true values. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;This actioncounts the number of true values and fails never &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;C=generic/bool/counttrue(Logical1,[Logical2,Logical3],Logical4);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/da/d81/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1bool_1_1CCountTrue.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;bool/equal&#34;&gt;&lt;a href=&#34;#bool/equal&#34;&gt;bool/equal&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;checks elements of equality. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The actions checks all tupel of arguments of equality and fails if the unflatten argument number is odd. &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[E1|E2]=generic/bool/equal(&#34;thisisequal&#34;,&#34;thisisequal&#34;,[123,&#34;test&#34;]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;Note&lt;/dt&gt;&lt;dd&gt;on number arguments not the value must equal, also the type (double / integral) must be equal, so keep in mind, that you use the correct number type on the argument input &lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d2/d6b/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1bool_1_1CEqual.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;bool/not&#34;&gt;&lt;a href=&#34;#bool/not&#34;&gt;bool/not&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;inverts all argument. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;This action uses the logical negation and inverts all logical boolean arguments and returns all elements, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[R1|R2|R3|R4]=generic/bool/not(Logical1,[Logical2,Logical3],Logical4);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Negation&#34; /&gt;https://en.wikipedia.org/wiki/Negation&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/dd/dd3/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1bool_1_1CNot.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;bool/notequal&#34;&gt;&lt;a href=&#34;#bool/notequal&#34;&gt;bool/notequal&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;checks elements of inequality. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The actions checks all tupel of arguments of inequality and fails if the unflatten argument number is odd. &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[NE1|NE2]=generic/bool/notequal(&#34;thisisequal&#34;,&#34;thisisequal&#34;,[123,&#34;test&#34;]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;Note&lt;/dt&gt;&lt;dd&gt;on number arguments not the value must equal, also the type (double / integral) must be equal, so keep in mind, that you use the correct number type on the argument input &lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d0/d80/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1bool_1_1CNotEqual.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;bool/or&#34;&gt;&lt;a href=&#34;#bool/or&#34;&gt;bool/or&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;combines all arguments to a single result with the or-operator. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;This action uses the logical disjunction to combine all logical arguments in a single result, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;R=generic/bool/or(Logical1,[Logical2,Logical3],Logical4);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Logical_disjunction&#34; /&gt;https://en.wikipedia.org/wiki/Logical_disjunction&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/dc/d0d/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1bool_1_1COr.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;bool/xor&#34;&gt;&lt;a href=&#34;#bool/xor&#34;&gt;bool/xor&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;combines all arguments to a single result with the xor-operator. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;This action uses the logical exclusive-or to combine all logical arguments in a single result, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;R=generic/bool/xor(Logical1,Logical2,[Logical3,Logical4]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Exclusive_or&#34; /&gt;https://en.wikipedia.org/wiki/Exclusive_or&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d8/dff/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1bool_1_1CXor.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;/dl&gt;&lt;h2 id=&#34;collection&#34;&gt;collection&lt;/h2&gt;&lt;dl&gt;&lt;dt id=&#34;collection/size&#34;&gt;&lt;a href=&#34;#collection/size&#34;&gt;collection/size&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the size of the collection. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;All arguments must be collections and the action returns the size of each collection, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B|C|D]=collection/size(Collection,Map,MultiMap,Tupel);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;Note&lt;/dt&gt;&lt;dd&gt;on non-collection type the action returns a zero value &lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d5/dc6/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1CSize.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;/dl&gt;&lt;h2 id=&#34;collection/list&#34;&gt;collection/list&lt;/h2&gt;&lt;dl&gt;&lt;dt id=&#34;collection/list/complement&#34;&gt;&lt;a href=&#34;#collection/list/complement&#34;&gt;collection/list/complement&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates the complement between lists. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action uses two input arguments &lt;!-- htmlmin:ignore --&gt;$ \mathbb{A} $&lt;!-- htmlmin:ignore --&gt; and &lt;!-- htmlmin:ignore --&gt;$ \mathbb{B} $&lt;!-- htmlmin:ignore --&gt; and returns a list of all elements which contains &lt;!-- htmlmin:ignore --&gt;$ \mathbb{A} \setminus \mathbb{B} $&lt;!-- htmlmin:ignore --&gt;, the action fails never &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;L=collection/list/complement([1,2,3],[3,4,5]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d5/d45/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1list_1_1CComplement.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;collection/list/create&#34;&gt;&lt;a href=&#34;#collection/list/create&#34;&gt;collection/list/create&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates a list. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Creates a list of the arguments, so each argument of the action is put to the list, is the argument empty an empty-list object will be returned, the action fails never &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;L1=collection/list/create(&#34;a&#34;,1,[&#34;b&#34;,2]);
L2=collection/list/create();
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d2/dd3/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1list_1_1CCreate.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;collection/list/flatconcat&#34;&gt;&lt;a href=&#34;#collection/list/flatconcat&#34;&gt;collection/list/flatconcat&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns a flat concated list of any term data. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The arguments of this action are nested lists and the action transfer all nested structures to a straight list, the action fails never &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;F=collection/list/flatconcat([1,2,[3,4]],[[1,2],[7,8]]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/df/dd9/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1list_1_1CFlatConcat.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;collection/list/get&#34;&gt;&lt;a href=&#34;#collection/list/get&#34;&gt;collection/list/get&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns an element of the list by the index. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The first argument is a list object and all other arguments are index values, so the action returns the elements, the action fails never &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;V=collection/list/get(L,2,7);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/df/d4f/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1list_1_1CGet.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;collection/list/intersect&#34;&gt;&lt;a href=&#34;#collection/list/intersect&#34;&gt;collection/list/intersect&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates the intersection between lists. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;All arguments are lists and the action returns the intersection &lt;!-- htmlmin:ignore --&gt;$ \cap M_i \forall i \in \mathbb{N} $&lt;!-- htmlmin:ignore --&gt;, the action fails never &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;I=collection/list/intersect([1,2,[3,4]],[3,4,[8,9]],[1,2,3,5]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d4/d8f/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1list_1_1CIntersect.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;collection/list/isempty&#34;&gt;&lt;a href=&#34;#collection/list/isempty&#34;&gt;collection/list/isempty&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;checks a list if empty. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Concats all list arguments (and removes the nested structures) and returns a boolean of the empty check, the action fails never &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;E=collection/list/isempty([]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/db/de9/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1list_1_1CIsEmpty.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;collection/list/range&#34;&gt;&lt;a href=&#34;#collection/list/range&#34;&gt;collection/list/range&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates a list with a integer ranged list. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Creates a list of integer values within the range &lt;!-- htmlmin:ignore --&gt;$ [\text{argument 1}, \text{argument 2}) $&lt;!-- htmlmin:ignore --&gt;, the action fails never &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;L=collection/list/create(0,10);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d2/d97/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1list_1_1CRange.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;collection/list/remove&#34;&gt;&lt;a href=&#34;#collection/list/remove&#34;&gt;collection/list/remove&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns an element of the list by the index. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Removes an element by the list index, the first argument is the list object, the second argument is the index, the action fails never &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;collection/list/remove(L,3);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d9/dcf/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1list_1_1CRemove.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;collection/list/reverse&#34;&gt;&lt;a href=&#34;#collection/list/reverse&#34;&gt;collection/list/reverse&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;reverses a list. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;All arguments of the action are lists and the action will remove nested structures and reverse all elements in a single list, the action fails never &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;R=collection/list/reverse(L,[1,2],[3,4,[7,8]]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/db/d71/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1list_1_1CReverse.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;collection/list/set&#34;&gt;&lt;a href=&#34;#collection/list/set&#34;&gt;collection/list/set&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;adds an element to the list. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Sets an element within the list by index, the first argument is the list object, the second the index value and third the new value of the element, the action fails never &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;collection/list/set(L,2,&#34;astringvalue&#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/de/d89/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1list_1_1CSet.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;collection/list/sublist&#34;&gt;&lt;a href=&#34;#collection/list/sublist&#34;&gt;collection/list/sublist&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns a sublist within the index range. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Creates a sublist of an existing list by an index range, first argument is the list object, second the lower-bound, third the upper-bound within the range &lt;!-- htmlmin:ignore --&gt;$ [ \text{lower-bound}, \text{upper-bound} ) $&lt;!-- htmlmin:ignore --&gt;, the action fails never &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;LS=collection/list/get(L,2,5);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d7/d0c/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1list_1_1CSubList.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;collection/list/symmetricdifference&#34;&gt;&lt;a href=&#34;#collection/list/symmetricdifference&#34;&gt;collection/list/symmetricdifference&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates the symmetric difference between lists (difference of union and intersection). &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Creates the symmetric difference of all arguments, so all arguments are collections and the action will return a list with the symmetric difference &lt;!-- htmlmin:ignore --&gt;$ (\mathbb{X} \setminus \mathbb{Y}) \cup (\mathbb{B} \setminus \mathbb{A}) $&lt;!-- htmlmin:ignore --&gt;, the action fails never &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;D=collection/list/symmetricdifference([1,2,[3,4]],[7,8,9,4],[[1,2],[3]]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Symmetric_difference&#34; /&gt;https://en.wikipedia.org/wiki/Symmetric_difference&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d4/ded/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1list_1_1CSymmetricDifference.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;collection/list/union&#34;&gt;&lt;a href=&#34;#collection/list/union&#34;&gt;collection/list/union&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates the union between lists (not unique). &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Creates the union of all arguemnts with removing nested structures &lt;!-- htmlmin:ignore --&gt;$ \cup X_i \forall i \in \mathbb{N} $&lt;!-- htmlmin:ignore --&gt;, the action fails never &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;U=collection/list/union(L,[1,2],[3,4,[5,6]];
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d6/d6c/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1list_1_1CUnion.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;collection/list/unique&#34;&gt;&lt;a href=&#34;#collection/list/unique&#34;&gt;collection/list/unique&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns an unique list of the list. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;All arguments are collections and the action removes nested structures and returns a list with unique elements, the action fails never &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;U=collection/list/unique(L);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/da/d46/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1list_1_1CUnique.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;collection/list/zip&#34;&gt;&lt;a href=&#34;#collection/list/zip&#34;&gt;collection/list/zip&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates a list of tuples with elements of two lists. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Creates list of tupels of both list arguments &lt;!-- htmlmin:ignore --&gt;$ \mathbb{X} $&lt;!-- htmlmin:ignore --&gt; and &lt;!-- htmlmin:ignore --&gt;$ \mathbb{Y} $&lt;!-- htmlmin:ignore --&gt; and returns a list of &lt;!-- htmlmin:ignore --&gt;$ \langle x_i, y_i \rangle $&lt;!-- htmlmin:ignore --&gt;, the action fails never &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;T=collection/list/zip([1,3,5,7],[2,4,6,8]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/df/dff/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1list_1_1CZip.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;/dl&gt;&lt;h2 id=&#34;collection/map&#34;&gt;collection/map&lt;/h2&gt;&lt;dl&gt;&lt;dt id=&#34;collection/map/create&#34;&gt;&lt;a href=&#34;#collection/map/create&#34;&gt;collection/map/create&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates a hashmap. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Returns an empty hashmap (key-value pair) and optional arguments must be even and it will create a key-value structure, the action fails on an odd number of arguments except zero only &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;M=collection/map/create();
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/db/d69/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1map_1_1CCreate.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;collection/map/get&#34;&gt;&lt;a href=&#34;#collection/map/get&#34;&gt;collection/map/get&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns an element of the map. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Returns values of the map which is referenced by the key, the action fails never, the first argument is the map object, all other arguments are the keys &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;V1=collection/map/get(Map,&#34;key&#34;);
[V2|V3]=collection/map/get(Map,&#34;Key1&#34;,&#34;Key2&#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d1/d21/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1map_1_1CGet.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;collection/map/keys&#34;&gt;&lt;a href=&#34;#collection/map/keys&#34;&gt;collection/map/keys&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns all key values of the map. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Returns a unique list with all key values of the argument maps and fails never, all arguments must be maps &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;L=collection/map/keys(Map1,Map2,Map3);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d7/de2/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1map_1_1CKeys.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;collection/map/put&#34;&gt;&lt;a href=&#34;#collection/map/put&#34;&gt;collection/map/put&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;adds an element to all map arguments. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;First argument is a key value, second the value, all other values are map references, the key-value pair is added and the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;collection/map/put(&#34;key&#34;,&#34;value&#34;,Map1,Map2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d8/dd0/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1map_1_1CPut.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;collection/map/putifabsent&#34;&gt;&lt;a href=&#34;#collection/map/putifabsent&#34;&gt;collection/map/putifabsent&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;adds an element to all map arguments iif not exists. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;First argument is a key value, second the value, all other values are map references, the key-value pair is added iif not exists and the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;collection/map/putifabsent(&#34;key&#34;,&#34;value&#34;,Map1,Map2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/df/de3/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1map_1_1CPutIfAbsent.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;collection/map/remove&#34;&gt;&lt;a href=&#34;#collection/map/remove&#34;&gt;collection/map/remove&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;removes elements from the map. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Removes of possible all arguments from the map, first argument is the map reference all other arguments are key values returns the arguments (or null if not exists) and never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B|C]=collection/map/remove(Map,&#34;a&#34;,12,&#34;c&#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d9/d36/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1map_1_1CRemove.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;collection/map/values&#34;&gt;&lt;a href=&#34;#collection/map/values&#34;&gt;collection/map/values&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns all values of the map. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Returns a list with all values of the argument maps and fails never &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;L=collection/map/values(Map1,Map2,Map3);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d5/dfb/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1map_1_1CValues.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;/dl&gt;&lt;h2 id=&#34;collection/multimap&#34;&gt;collection/multimap&lt;/h2&gt;&lt;dl&gt;&lt;dt id=&#34;collection/multimap/asmap&#34;&gt;&lt;a href=&#34;#collection/multimap/asmap&#34;&gt;collection/multimap/asmap&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the multimap as map. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Actions translates multimap objects into map objects, action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;X=collection/multimap/asmap(MultiMap);
[A|B]=collection/multimap/asmap(MultiMap1,MultiMap2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d0/df7/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1multimap_1_1CAsMap.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;collection/multimap/create&#34;&gt;&lt;a href=&#34;#collection/multimap/create&#34;&gt;collection/multimap/create&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates a multi-hashmap. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action creates a multi-hashmap object and returns the object, optional arguments must be even and it will create a key-value structure, the action fails on an odd number of arguments except zero only &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;M1=collection/multimap/create();
M2=collection/multimap/create(&#34;key1&#34;,123,[&#34;Key2&#34;,&#34;Value2&#34;]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d8/d29/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1multimap_1_1CCreate.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;collection/multimap/get&#34;&gt;&lt;a href=&#34;#collection/multimap/get&#34;&gt;collection/multimap/get&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;get a element-list of the multimap by key. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action can return multiple lists of elements by different keys, one key is needed and the action never failing &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B|C]=collection/multimap/get(Map,&#34;key1&#34;,&#34;key2&#34;,[&#34;key3&#34;]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/dc/d91/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1multimap_1_1CGet.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;collection/multimap/keys&#34;&gt;&lt;a href=&#34;#collection/multimap/keys&#34;&gt;collection/multimap/keys&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns all key values of the multimap. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Returns a unique list with all key values of the argument maps and fails never, all arguments must be multimaps &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;L=collection/map/keys(MultiMap1,MultiMap2,MultiMap3);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d0/d53/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1multimap_1_1CKeys.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;collection/multimap/put&#34;&gt;&lt;a href=&#34;#collection/multimap/put&#34;&gt;collection/multimap/put&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;adds an element to all map arguments. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;First argument is a key value, second the value, all other values are map references, the key-value pair is added and the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;collection/map/put(&#34;key&#34;,&#34;value&#34;,MultiMap1,MultiMap2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/db/db3/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1multimap_1_1CPut.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;collection/multimap/values&#34;&gt;&lt;a href=&#34;#collection/multimap/values&#34;&gt;collection/multimap/values&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns all values of the multimap. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Returns a list with all values of the argument multimaps and fails never &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;L=collection/multimap/values(MultiMap1,MultiMap2,MultiMap3);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d2/d6b/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1multimap_1_1CValues.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;/dl&gt;&lt;h2 id=&#34;collection/tuple&#34;&gt;collection/tuple&lt;/h2&gt;&lt;dl&gt;&lt;dt id=&#34;collection/tuple/create&#34;&gt;&lt;a href=&#34;#collection/tuple/create&#34;&gt;collection/tuple/create&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates a tuple of two elements. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The number of arguments must be even and each two elements will be combined into a tupel and never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B]=collection/tupel/create(&#34;A&#34;,&#34;1&#34;,[&#34;B&#34;,&#34;2&#34;]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d1/d2e/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1tuple_1_1CCreate.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;collection/tuple/flat&#34;&gt;&lt;a href=&#34;#collection/tuple/flat&#34;&gt;collection/tuple/flat&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;unflats the tuples into variables. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;All arguments are tupels and each tupel will be extract into two variables, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B|C|D]=collection/tupel/flat(Tupel1,Tupel2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d7/d1e/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1tuple_1_1CFlat.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;/dl&gt;&lt;h2 id=&#34;crypto&#34;&gt;crypto&lt;/h2&gt;&lt;dl&gt;&lt;dt id=&#34;crypto/createkey&#34;&gt;&lt;a href=&#34;#crypto/createkey&#34;&gt;crypto/createkey&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates an encrypting / decrypting key pair. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The argument is a string with the cryptographic algorithm AES, DES or RSA and the action return a key pair, the action fails if the key cannot generated &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[PublicKey,PrivateKey]=cypto/createkey(&#34;AES|DES|RSA&#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;Note&lt;/dt&gt;&lt;dd&gt;The private key is set on RSA algorithm only &lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Advanced_Encryption_Standard&#34; /&gt;https://en.wikipedia.org/wiki/Advanced_Encryption_Standard&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Data_Encryption_Standard&#34; /&gt;https://en.wikipedia.org/wiki/Data_Encryption_Standard&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/RSA_%28cryptosystem%29&#34; /&gt;https://en.wikipedia.org/wiki/RSA_(cryptosystem)&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/db/d80/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1crypto_1_1CCreateKey.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;crypto/decrypt&#34;&gt;&lt;a href=&#34;#crypto/decrypt&#34;&gt;crypto/decrypt&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;dencrypting algorithm for decrypting data. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The actions decrypts data by the key, that is set on the first argument, all other arguments are datasets for encrypting, the actions returns all drcrypted datasets back and fails if a dataset cannot be decrypted &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[DecyptData1|DecyptData2|DecyptData3]=crypto/decrypt(Key,Dataset1,Dataset2,Dataset3);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d2/d6a/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1crypto_1_1CDecrypt.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;crypto/encrypt&#34;&gt;&lt;a href=&#34;#crypto/encrypt&#34;&gt;crypto/encrypt&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;encrypting algorithm. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Encrypts a set of datasets, which can be complex objects, the first argument of the action is the encrypting key and all other arguments are datasets, the action returns all encypted datasets and fails if one encryption fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[Encypt1|Encrypt2|Encypt3]=crypto/encrypt(Key,Dataset1,Dataset2,Dataset3);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d9/d78/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1crypto_1_1CEncrypt.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;crypto/hash&#34;&gt;&lt;a href=&#34;#crypto/hash&#34;&gt;crypto/hash&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;hash algorithm. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The actions creates a hash values of datasets, the first argument is the name of the hasing algorithm (Adler-32, CRC-32, CRC-32C, Murmur3-32, Murmur3-128, Siphash-2-4, MD2, MD5, SHA-1, SHA-224, SHA-256, SHA-384, SHA-512), for all other arguments a hash value is calculated and the action returns the hash values back, only if the hash algorithm is unknown the action wil fail &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[Hash1|Hash2|Hash3]=crypto/hash(&#34;Adler-32|CRC-32|CRC-32C|...&#34;,Dataset1,Dataset2,Dataset3);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Secure_Hash_Algorithm&#34; /&gt;https://en.wikipedia.org/wiki/Secure_Hash_Algorithm&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/MD2_%28cryptography%29&#34; /&gt;https://en.wikipedia.org/wiki/MD2_(cryptography)&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/MD5&#34; /&gt;https://en.wikipedia.org/wiki/MD5&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Adler-32&#34; /&gt;https://en.wikipedia.org/wiki/Adler-32&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Cyclic_redundancy_check&#34; /&gt;https://en.wikipedia.org/wiki/Cyclic_redundancy_check&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/MurmurHash&#34; /&gt;https://en.wikipedia.org/wiki/MurmurHash&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/SipHash&#34; /&gt;https://en.wikipedia.org/wiki/SipHash&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;http://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#MessageDigest&#34; /&gt;http://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#MessageDigest&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://github.com/google/guava/wiki/HashingExplained&#34; /&gt;https://github.com/google/guava/wiki/HashingExplained&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d7/df5/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1crypto_1_1CHash.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;/dl&gt;&lt;h2 id=&#34;datetime&#34;&gt;datetime&lt;/h2&gt;&lt;dl&gt;&lt;dt id=&#34;datetime/applydays&#34;&gt;&lt;a href=&#34;#datetime/applydays&#34;&gt;datetime/applydays&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;subtract or adds a number of days. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action adds / subtracts a number of days to the date-time objects, the first argument is a string with minus or plus, the second argument the number and all other arguments are date-time objects, the action returns the modified date-time objects, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[O1|O2]=datetime/applydays(&#34;minus|plus&#34;3,DateTime1,DateTime2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d8/d70/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1datetime_1_1CApplyDays.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;datetime/applyhours&#34;&gt;&lt;a href=&#34;#datetime/applyhours&#34;&gt;datetime/applyhours&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;subtract or adds a number of hours. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action adds / subtracts a number of hours to the date-time objects, the first argument is a string with minus or plus, the second argument the number and all other arguments are date-time objects, the action returns the modified date-time objects, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[O1|O2]=datetime/applyhours(&#34;minus|plus&#34;6,DateTime1,DateTime2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d4/de6/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1datetime_1_1CApplyHours.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;datetime/applyminutes&#34;&gt;&lt;a href=&#34;#datetime/applyminutes&#34;&gt;datetime/applyminutes&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;subtract or adds a number of minutes. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action adds / subtracts a number of minutes to the date-time objects, the first argument is a string with minus or plus, the second argument the number and all other arguments are date-time objects, the action returns the modified date-time objects, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[O1|O2]=datetime/applyminutes(&#34;minus|plus&#34;6,DateTime1,DateTime2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d1/d98/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1datetime_1_1CApplyMinutes.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;datetime/applymonths&#34;&gt;&lt;a href=&#34;#datetime/applymonths&#34;&gt;datetime/applymonths&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;subtract or adds a number of months. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action adds / subtracts a number of months to the date-time objects, the first argument is a string with minus or plus, the second argument the number and all other arguments are date-time objects, the action returns the modified date-time objects, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[O1|O2]=datetime/applymonths(&#34;minus|plus&#34;6,DateTime1,DateTime2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d1/de5/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1datetime_1_1CApplyMonths.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;datetime/applynanoseconds&#34;&gt;&lt;a href=&#34;#datetime/applynanoseconds&#34;&gt;datetime/applynanoseconds&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;subtract or adds a number of nano-seconds. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action adds / subtracts a number of nano-seconds to the date-time objects, the first argument is a string with minus or plus, the second argument the number and all other arguments are date-time objects, the action returns the modified date-time objects, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[O1|O2]=datetime/applynanoseconds(&#34;minus|plus&#34;6,DateTime1,DateTime2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d4/d1f/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1datetime_1_1CApplyNanoSeconds.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;datetime/applyseconds&#34;&gt;&lt;a href=&#34;#datetime/applyseconds&#34;&gt;datetime/applyseconds&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;subtract or adds a number of seconds. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action adds / subtracts a number of seconds to the date-time objects, the first argument is a string with minus or plus, the second argument the number and all other arguments are date-time objects, the action returns the modified date-time objects, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[O1|O2]=datetime/applyseconds(&#34;minus|plus&#34;6,DateTime1,DateTime2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/da/d2e/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1datetime_1_1CApplySeconds.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;datetime/applyyears&#34;&gt;&lt;a href=&#34;#datetime/applyyears&#34;&gt;datetime/applyyears&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;subtract or adds a number of years. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action adds / subtracts a number of years to the date-time objects, the first argument is a string with minus or plus, the second argument the number and all other arguments are date-time objects, the action returns the modified date-time objects, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[O1|O2]=datetime/applyyears(&#34;minus|plus&#34;3,DateTime1,DateTime2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/da/dbe/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1datetime_1_1CApplyYears.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;datetime/build&#34;&gt;&lt;a href=&#34;#datetime/build&#34;&gt;datetime/build&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;builds a date-time object from elements. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The actions creates form an eight-tuple a date-time object and never fails, the seventh argument within the tuple is the time-zone, which can be set to empty or &#34;current&#34;, so the system-default zone is used &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;O1=datetime/build(Year,Month,Day,Hour,Minutes,Second,NanoSeconds,&#34;current&#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d2/da4/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1datetime_1_1CBuild.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;datetime/create&#34;&gt;&lt;a href=&#34;#datetime/create&#34;&gt;datetime/create&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns a date-time object. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action returns a date-time object based on the string input arguments, the action parses the string if the string is empty or &#34;now&#34; the current date-time will returned, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[O1|O2]=datetime/create(&#34;now&#34;,&#34;2007-12-03T10:15:30+01:00[Europe/Paris]&#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d8/d40/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1datetime_1_1CCreate.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;datetime/date&#34;&gt;&lt;a href=&#34;#datetime/date&#34;&gt;datetime/date&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for getting the current date. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action returns the date elements of a parsed string or date-time object, if the string is empty or &#34;now&#34; the current date-time is used, the action fails on wrong input &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[Year|Month|Day|DayOfWeek|DayOfYear]=datetime/date(&#34;now&#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d5/df1/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1datetime_1_1CDate.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;datetime/daysbetween&#34;&gt;&lt;a href=&#34;#datetime/daysbetween&#34;&gt;datetime/daysbetween&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the days between two dates. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The actions returns the number of days between two date-time objects, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[D1|D2]=datetime/daysbetween(DateTime1,DateTime2,DateTime3,DateTime4);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d0/d61/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1datetime_1_1CDaysBetween.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;datetime/hoursbetween&#34;&gt;&lt;a href=&#34;#datetime/hoursbetween&#34;&gt;datetime/hoursbetween&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the hours between two dates. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The actions returns the number of hours between two date-time objects, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[H1|H2]=datetime/hoursbetween(DateTime1,DateTime2,DateTime3,DateTime4);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d0/d97/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1datetime_1_1CHoursBetween.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;datetime/minutesbetween&#34;&gt;&lt;a href=&#34;#datetime/minutesbetween&#34;&gt;datetime/minutesbetween&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the minutes between two dates. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The actions returns the number of minutes between two date-time objects, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[M1|M2]=datetime/minutesbetween(DateTime1,DateTime2,DateTime3,DateTime4);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d3/db0/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1datetime_1_1CMinutesBetween.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;datetime/monthsbetween&#34;&gt;&lt;a href=&#34;#datetime/monthsbetween&#34;&gt;datetime/monthsbetween&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the months between two dates. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The actions returns the number of months between two date-time objects, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[M1|M2]=datetime/monthsbetween(DateTime1,DateTime2,DateTime3,DateTime4);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d0/dbd/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1datetime_1_1CMonthsBetween.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;datetime/secondsbetween&#34;&gt;&lt;a href=&#34;#datetime/secondsbetween&#34;&gt;datetime/secondsbetween&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the seconds between two dates. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The actions returns the number of seconds between two date-time objects, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[S1|S2]=datetime/secondsbetween(DateTime1,DateTime2,DateTime3,DateTime4);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d2/d71/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1datetime_1_1CSecondsBetween.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;datetime/time&#34;&gt;&lt;a href=&#34;#datetime/time&#34;&gt;datetime/time&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for getting the current time. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action returns the time elements of a parsed string or date-time object, if the string is empty or &#34;now&#34; the current date-time is used, the action fails on wrong input &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[Hour|Minute|Second|Nano]=datetime/time(&#34;now&#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/dc/d09/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1datetime_1_1CTime.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;datetime/yearsbetween&#34;&gt;&lt;a href=&#34;#datetime/yearsbetween&#34;&gt;datetime/yearsbetween&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the years between two dates. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The actions returns the number of years between two date-time objects, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[Y1|Y2]=datetime/yearsbetween(DateTime1,DateTime2,DateTime3,DateTime4);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d4/d69/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1datetime_1_1CYearsBetween.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;datetime/zoneid&#34;&gt;&lt;a href=&#34;#datetime/zoneid&#34;&gt;datetime/zoneid&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the zone-id. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action returns the zone-id of a parsed string or date-time object, if the string is empty or &#34;now&#34; the current date-time is used, the action fails on wrong input &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;ZoneID=datetime/zoneid(&#34;now&#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d4/dee/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1datetime_1_1CZoneid.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;/dl&gt;&lt;h2 id=&#34;generic&#34;&gt;generic&lt;/h2&gt;&lt;dl&gt;&lt;dt id=&#34;generic/print&#34;&gt;&lt;a href=&#34;#generic/print&#34;&gt;generic/print&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for sum of elements. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Prints a set of messages to the commandline / output-stream, the command can be used with a variable set of arguments and fails never &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;generic/print(&#34;stringA=&#34;,A,&#34;--B=&#34;,B,&#34;--C=&#34;,C,&#34;--D=&#34;,D,&#34;--X=&#34;,X,&#34;--Y=&#34;,Y);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d9/dc7/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1CPrint.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;generic/throw&#34;&gt;&lt;a href=&#34;#generic/throw&#34;&gt;generic/throw&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for throwing a runtime execption. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action fails never but throws a Java runtime exception on a boolean condition, the first argument is a boolean value on true the exception is thrown, second argument can be a string with a message &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;generic/throw(true,&#34;amessage&#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;Note&lt;/dt&gt;&lt;dd&gt;the exception must be catched outside the agent call method &lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d0/d8b/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1CThrow.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;/dl&gt;&lt;h2 id=&#34;generic/type&#34;&gt;generic/type&lt;/h2&gt;&lt;dl&gt;&lt;dt id=&#34;generic/type/createliteral&#34;&gt;&lt;a href=&#34;#generic/type/createliteral&#34;&gt;generic/type/createliteral&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates a literal by the input data. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action create a literal, so the first argument is a string with the literal functor all other arguments will be used for the literal values &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;L=generic/type/createliteral(&#34;literal/functor/with/path&#34;,123,&#34;value&#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/db/d04/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1type_1_1CCreateLiteral.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;generic/type/is&#34;&gt;&lt;a href=&#34;#generic/type/is&#34;&gt;generic/type/is&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to check if a type is a class. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action checks the type of a value if it is assignable to a class type, the first argument is the value, all other values are strings witha full-qualified class name, the action returns for each class name a boolean if it is assignable, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B|C|D]=generic/type(X,&#34;java.lang.String&#34;,&#34;java.lang.Number&#34;,&#34;java.lang.Double&#34;,&#34;java.lang.Long&#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/db/d1c/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1type_1_1CIs.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;generic/type/isnull&#34;&gt;&lt;a href=&#34;#generic/type/isnull&#34;&gt;generic/type/isnull&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to check if a value is a null value. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The actions checks all arguments if the values are null, the action never fails and returns booleans &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B]=generic/type(X,Y);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d3/d9a/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1type_1_1CIsNull.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;generic/type/isnumeric&#34;&gt;&lt;a href=&#34;#generic/type/isnumeric&#34;&gt;generic/type/isnumeric&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to check if a type is a number. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The actions checks all arguments for a number value and it fails if one of the arguments not a number &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;generic/type/isnumeric(X,3.5);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d8/d61/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1type_1_1CIsNumeric.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;generic/type/isstring&#34;&gt;&lt;a href=&#34;#generic/type/isstring&#34;&gt;generic/type/isstring&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to check if a type is a string. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;All arguments are check if it is a string, the action fails if one of the arguments are not a string &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;generic/type/isstring(&#34;foo&#34;,&#34;bar&#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/dd/d00/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1type_1_1CIsString.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;generic/type/parsefloat&#34;&gt;&lt;a href=&#34;#generic/type/parsefloat&#34;&gt;generic/type/parsefloat&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for parsing a float from string. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Parses each argument to a floating point value and returns the value, the action fails on parsing errors &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[X|Y|Z]=generic/type/parsefloat(&#34;1.45&#34;,[&#34;8.88&#34;,&#34;9&#34;]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d5/d99/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1type_1_1CParseFloat.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;generic/type/parseint&#34;&gt;&lt;a href=&#34;#generic/type/parseint&#34;&gt;generic/type/parseint&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for parsing a integer from string. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Parses each argument to a integer point value and returns the value, the action fails on parsing errors &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[X|Y|Z]=generic/type/parseint(&#34;1&#34;,[&#34;3&#34;,&#34;9&#34;]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/db/d3c/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1type_1_1CParseInt.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;generic/type/parseliteral&#34;&gt;&lt;a href=&#34;#generic/type/parseliteral&#34;&gt;generic/type/parseliteral&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for parsing a integer from string. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Parses each argument to a integer point value and returns the value, the action fails on parsing errors &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[X|Y|Z]=generic/type/parseliteral(&#34;foo(5)&#34;,[&#34;bar(foo(&#39;abcd&#39;)&#34;,&#34;xxx()[source(3)]&#34;]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/df/d70/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1type_1_1CParseLiteral.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;generic/type/to&#34;&gt;&lt;a href=&#34;#generic/type/to&#34;&gt;generic/type/to&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to cast any java object type. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action casts any value to the given full-qualified class name in the first argument, the action fails on casting errors &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B]=generic/type/to(&#34;java.lang.String&#34;,X,Y);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d5/dcd/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1type_1_1CTo.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;generic/type/tofloat&#34;&gt;&lt;a href=&#34;#generic/type/tofloat&#34;&gt;generic/type/tofloat&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to cast a value to an floating-point value. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Cast any argument into a floating-point number, the action fails on casting errors &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[N1|N2]=generic/type/tofloat(X,Y);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d6/db0/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1type_1_1CToFloat.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;generic/type/toint&#34;&gt;&lt;a href=&#34;#generic/type/toint&#34;&gt;generic/type/toint&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to cast a value to an integer value. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Cast any argument into an integer number, the action fails on casting errors &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[N1|N2]=generic/type/tofloat(X,Y);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/da/df4/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1type_1_1CToInt.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;generic/type/tostring&#34;&gt;&lt;a href=&#34;#generic/type/tostring&#34;&gt;generic/type/tostring&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;converts a value into the string represenation. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action converts any argument into the string represenation, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d1/de2/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1type_1_1CToString.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;/dl&gt;&lt;h2 id=&#34;graph&#34;&gt;graph&lt;/h2&gt;&lt;dl&gt;&lt;dt id=&#34;graph/addedge&#34;&gt;&lt;a href=&#34;#graph/addedge&#34;&gt;graph/addedge&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;adds an edge to the graph. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action adds to each graph the pair of vertices, so the first two arguments are the vertices, all other arguments are graphs, the action fails on wrong input &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;graph/addedge(Edge,StartVertex,EndVertex,Graph1,Graph2,Graph3);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/de/d1b/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1graph_1_1CAddEdge.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;graph/addvertex&#34;&gt;&lt;a href=&#34;#graph/addvertex&#34;&gt;graph/addvertex&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;adds a vertex to the graph. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action adds a vertex to the graph, so the first argument is the vertex and all other arguments are graphs, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;graph/addvertex(Value,Graph1,[Graph2,[Graph3]]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d2/d10/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1graph_1_1CAddVertex.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;graph/adjacencymatrix&#34;&gt;&lt;a href=&#34;#graph/adjacencymatrix&#34;&gt;graph/adjacencymatrix&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates from a graph the adjacency matrix. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action converts graphs into a matrix based on a cost-map, the first argument can be a string with dense or sparse for defining the returned matrix, after that a cost-map cann be set or a fixed numerical value for defining the cost of an edge, all other arguments are graphs, for each graph the matrix and vertex list is returned, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[M1|V1|M2|V2]=graph/adjacencymatrix(&#34;dense|sparse&#34;,CostMap,Graph1,Graph2);
[M3|V3|M4|V4]=graph/adjacencymatrix(CostMap,Graph1,Graph2);
[M1|V1|M2|V2]=graph/adjacencymatrix(&#34;dense|sparse&#34;,1,Graph1,Graph2);
[M3|V3|M4|V4]=graph/adjacencymatrix(1,Graph1,Graph2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;Note&lt;/dt&gt;&lt;dd&gt;the cost-map does not need an entry for each edge non-existing edges have got on default zero costs with 1 &lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Adjacency_matrix&#34; /&gt;https://en.wikipedia.org/wiki/Adjacency_matrix&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d4/d76/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1graph_1_1CAdjacencyMatrix.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;graph/containsedge&#34;&gt;&lt;a href=&#34;#graph/containsedge&#34;&gt;graph/containsedge&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;check if a graph contains an edge. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action checks for the first argument, if each other graph argument contains the first item as an edge, the action fails on wrong input &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[B1|B2]=graph/containsedge(Element,Graph1,Graph2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d0/d3f/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1graph_1_1CContainsEdge.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;graph/containsvertex&#34;&gt;&lt;a href=&#34;#graph/containsvertex&#34;&gt;graph/containsvertex&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;check if a graph contains a vertex. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action checks for the first argument, if each other graph argument contains the first item as an vertex, the action fails on wrong input &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[B1|B2]=graph/containsvertex(Element,Graph1,Graph2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/de/dc8/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1graph_1_1CContainsVertex.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;graph/create&#34;&gt;&lt;a href=&#34;#graph/create&#34;&gt;graph/create&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates a graph data structure. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action create a graph data structure with nodes and edges, arguments are strings with the name of the graph type ( SPARSE | SPARSEMULTI | DIRECTEDSPARSE | DIRECTEDSPARSEMULTI | UNDIRECTEDSPARSE | UNDIRECTEDSPARSEMULTI ) on a wrong name, a sparse graph is created, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[G1|G2]=graph/create(&#34;sparse&#34;,&#34;directedsparse&#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Graph_%28discrete_mathematics%29&#34; /&gt;https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d9/de0/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1graph_1_1CCreate.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;graph/degree&#34;&gt;&lt;a href=&#34;#graph/degree&#34;&gt;graph/degree&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the degree of a vertex. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action returns for a vertex as first argument the degree on each graph argument, the action fails on wrong input &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[D1|D2]=graph/degree(Vertex,Graph1,Graph2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d4/dea/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1graph_1_1CDegree.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;graph/distancepath&#34;&gt;&lt;a href=&#34;#graph/distancepath&#34;&gt;graph/distancepath&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;calculates the distance of a route within a graph. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action calculates the distance based on a cost-edge-map, so the first argument is a map of edges and numeric cost values, the second and third argument are vertices with start- and end-vertex of the route and all other arguments are graph objects, for each graph object a cost value is returned the action fails on wrong input &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[D1|D2]=graph/shortestpath(CostMap,StartVertex,EndVertex,Graph1,Graph2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;Note&lt;/dt&gt;&lt;dd&gt;the cost-map does not need an entry for each edge non-existing edges have got on default zero costs &lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d5/d11/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1graph_1_1CDistancePath.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;graph/edgecount&#34;&gt;&lt;a href=&#34;#graph/edgecount&#34;&gt;graph/edgecount&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the number of edges. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action returns the number of edges within a graph and never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[E1|E2]=graph/edgecount(Graph1,Graph2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/da/dad/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1graph_1_1CEdgeCount.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;graph/edges&#34;&gt;&lt;a href=&#34;#graph/edges&#34;&gt;graph/edges&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns for a graph all edges. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action returns for all graph arguments a list of edges, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[E1|E2]=graph/edges(Graph1,Graph2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;Note&lt;/dt&gt;&lt;dd&gt;the return argument is an unmodifyable list &lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/de/df7/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1graph_1_1CEdges.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;graph/endpoint&#34;&gt;&lt;a href=&#34;#graph/endpoint&#34;&gt;graph/endpoint&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns of an edge the vertices. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The actions returns for each edge argument the connected vertices, the action fails on wrong input &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[V1|V2|V3|V4]=graph/endpoint(Edge,Graph1,Graph2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d1/d83/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1graph_1_1CEndPoint.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;graph/findedge&#34;&gt;&lt;a href=&#34;#graph/findedge&#34;&gt;graph/findedge&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;retruns an edge. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action returns an edge between two vertices, the first two arguments are vertices, all other arguments are graphs, returning values are edges, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[E1|E2|E3]=graph/findedge(Vertex1,Vertex2,Graph1,Graph2,Graph3);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/de/ddd/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1graph_1_1CFindEdge.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;graph/findedgeset&#34;&gt;&lt;a href=&#34;#graph/findedgeset&#34;&gt;graph/findedgeset&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns all edges of two vertices. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action returns a list of edges between two vertices, the first two arguments are vertices, all other arguments are graphs and return values are lists, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[L1|L2]=graph/findedgeset(Vertex1,Vertex2,Graph1,Graph2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d1/d46/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1graph_1_1CFindEdgeSet.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;graph/incidentcount&#34;&gt;&lt;a href=&#34;#graph/incidentcount&#34;&gt;graph/incidentcount&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the number of vertices that are incident to edge. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action returns the number of verticies that are incident to an edge for each graph object &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[C1|C2]=graph/incidentcount(Edge,Graph1,Graph2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d7/d92/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1graph_1_1CIncidentCount.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;graph/incidentvertices&#34;&gt;&lt;a href=&#34;#graph/incidentvertices&#34;&gt;graph/incidentvertices&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns a list of incident vertices of an edge. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action returns for the first edge argument the incident vertices in each graph argument, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[L1|L2]=graph/incidentvertices(Edge,Graph1,Graph2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;Note&lt;/dt&gt;&lt;dd&gt;the return argument is an unmodifyable list &lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/df/d0a/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1graph_1_1CIncidentVertices.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;graph/indegree&#34;&gt;&lt;a href=&#34;#graph/indegree&#34;&gt;graph/indegree&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the in-degree of a vertex. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action returns for a vertex as first argument the in-degree on each graph argument, the action fails on wrong input &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[D1|D2]=graph/indegree(Vertex,Graph1,Graph2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d6/df5/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1graph_1_1CInDegree.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;graph/inedges&#34;&gt;&lt;a href=&#34;#graph/inedges&#34;&gt;graph/inedges&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns incomming edges of a vertex. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The actions returns a list incoming edges of a vertex for each graph argument, the first argument is the vertex, all other graphs, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[OE1|OE2]=graph/inedges(Vertex,Graph1,Graph2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;Note&lt;/dt&gt;&lt;dd&gt;returned list of edges is unmodifyable &lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/dc/d56/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1graph_1_1CInEdges.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;graph/isincident&#34;&gt;&lt;a href=&#34;#graph/isincident&#34;&gt;graph/isincident&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;checks if a vertex and an edge incident. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The actions checks for the first vertex argument and the second egde argument if both are incident within all graphs &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[B1|B2]=graph/isincident(Vertex,Edge,Graph1,Graph2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d5/ded/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1graph_1_1CIsIncident.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;graph/isneighbor&#34;&gt;&lt;a href=&#34;#graph/isneighbor&#34;&gt;graph/isneighbor&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;checks if a vertex is predecessor of another vertex. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action checks for the first vertex argument that the second vertex argument is predecessor within the given graph, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[B1|B2|B3]=graph/isneighbor(Vertex1,Vertex2,Graph1,Graph2,Graph3);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/dc/d21/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1graph_1_1CIsNeighbor.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;graph/ispredecessor&#34;&gt;&lt;a href=&#34;#graph/ispredecessor&#34;&gt;graph/ispredecessor&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;checks if a vertex is predecessor of another vertex. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action checks for the first vertex argument that the second vertex argument is predecessor within the given graph, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[B1|B2|B3]=graph/ispredecessor(Vertex1,Vertex2,Graph1,Graph2,Graph3);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d4/d27/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1graph_1_1CIsPredecessor.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;graph/issuccessor&#34;&gt;&lt;a href=&#34;#graph/issuccessor&#34;&gt;graph/issuccessor&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;checks if a vertex is successor of another vertex. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action checks for the first vertex argument that the second vertex argument is successor within the given graph, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[B1|B2|B3]=graph/issuccessor(Vertex1,Vertex2,Graph1,Graph2,Graph3);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/df/db1/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1graph_1_1CIsSuccessor.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;graph/neighbors&#34;&gt;&lt;a href=&#34;#graph/neighbors&#34;&gt;graph/neighbors&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the neighbors of a vertex. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The actions returns a list of neighbors of a vertex for each graph argument, the first argument is the vertex, all other graphs, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[N1|N2]=graph/neighbors(Vertex,Graph1,Graph2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;Note&lt;/dt&gt;&lt;dd&gt;returned list of neighbors is unmodifyable &lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d8/d6b/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1graph_1_1CNeighbors.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;graph/neighborscount&#34;&gt;&lt;a href=&#34;#graph/neighborscount&#34;&gt;graph/neighborscount&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the number neighbors of a vertex. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The actions returns the number of neighbors of a vertex for each graph argument, the first argument is the vertex, all other graphs, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[C1|C2]=graph/neighborscount(Vertex,Graph1,Graph2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d2/de0/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1graph_1_1CNeighborsCount.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;graph/opposite&#34;&gt;&lt;a href=&#34;#graph/opposite&#34;&gt;graph/opposite&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the opposit of a vertex and edge. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action returns the opposite vertex, with the first argument is a vertex, the second an edge an all other arguments are graphs, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[V1|V2]=graph/opposite(Vertex,Edge,Graph1,Graph2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d6/dc8/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1graph_1_1COpposite.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;graph/outdegree&#34;&gt;&lt;a href=&#34;#graph/outdegree&#34;&gt;graph/outdegree&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the out-degree of a vertex. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action returns for a vertex as first argument the out-degree on each graph argument, the action fails on wrong input &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[D1|D2]=graph/outdegree(Vertex,Graph1,Graph2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d9/d7a/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1graph_1_1COutDegree.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;graph/outedges&#34;&gt;&lt;a href=&#34;#graph/outedges&#34;&gt;graph/outedges&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns outgoing edges of a vertex. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The actions returns a list outgoing edges of a vertex for each graph argument, the first argument is the vertex, all other graphs, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[OE1|OE2]=graph/outedges(Vertex,Graph1,Graph2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;Note&lt;/dt&gt;&lt;dd&gt;returned list of edges is unmodifyable &lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/de/d55/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1graph_1_1COutEdges.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;graph/predecessorcount&#34;&gt;&lt;a href=&#34;#graph/predecessorcount&#34;&gt;graph/predecessorcount&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the number of predecessors within a graph. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action returns for the first vertex argument the number of predecessors on all other graph arguments, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[C1|C2]=graph/predecessorcount(Vertex,Graph1,Graph2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d4/d9e/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1graph_1_1CPredecessorCount.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;graph/removeedge&#34;&gt;&lt;a href=&#34;#graph/removeedge&#34;&gt;graph/removeedge&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;removes edges from a graph. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action removes edges from a graph, the first argument is the graph all other arguments are edges, fails if an edge cannot removed &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;graph/removeedge(Graph,Edge1,Edge2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/db/d41/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1graph_1_1CRemoveEdge.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;graph/removevertex&#34;&gt;&lt;a href=&#34;#graph/removevertex&#34;&gt;graph/removevertex&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;removes vertices from a graph. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action removes vertices from a graph, the first argument is the graph all other arguments are vertices, fails if a vertex cannot removed &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;graph/removevertex(Graph,Vertex1,Vertex2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d9/dfa/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1graph_1_1CRemoveVertex.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;graph/shortestpath&#34;&gt;&lt;a href=&#34;#graph/shortestpath&#34;&gt;graph/shortestpath&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;calculates the shortest path of two vertices within graph. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action calculates a path based on a cost-edge-map, so the first argument is a map of edges and numeric cost values, the second and third argument are vertices with start- and end-vertex of the route and all other arguments are graph objects, for each graph object a list of vertices of the route is returned, the action fails on wrong input &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[Route1|Route2]=graph/shortestpath(CostMap,StartVertex,EndVertex,Graph1,Graph2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;Note&lt;/dt&gt;&lt;dd&gt;the cost-map does not need an entry for each edge non-existing edges have got on default zero costs &lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/dd/d28/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1graph_1_1CShortestPath.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;graph/spanningtree&#34;&gt;&lt;a href=&#34;#graph/spanningtree&#34;&gt;graph/spanningtree&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates a minimal spanning tree of a graph. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action creates from each graph argument a spanning tree, if the first argument is a cost-map for edges the numerical values are used for the spanning tree &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[SP1|SP2]=graph/spanningtree(Graph1,Graph2);
[SP3|SP4]=graph/spanningtree(CostMap,Graph3,Graph4);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/db/df8/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1graph_1_1CSpanningTree.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;graph/successorcount&#34;&gt;&lt;a href=&#34;#graph/successorcount&#34;&gt;graph/successorcount&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the number of successors within a graph. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action returns for the first vertex argument the number of successors on all other graph arguments, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[C1|C2]=graph/successorcount(Vertex,Graph1,Graph2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d1/d07/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1graph_1_1CSuccessorCount.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;graph/vertexcount&#34;&gt;&lt;a href=&#34;#graph/vertexcount&#34;&gt;graph/vertexcount&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the number of vertices. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action returns the number of vertices within a graph and never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[V1|V2]=graph/vertexcount(Graph1,Graph2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/dc/d4c/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1graph_1_1CVertexCount.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;graph/vertices&#34;&gt;&lt;a href=&#34;#graph/vertices&#34;&gt;graph/vertices&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns all vertices of a graph. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action returns a list of all vertices for each graph argument &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[V1|V2]=graph/vertices(Graph1,Graph2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;Note&lt;/dt&gt;&lt;dd&gt;the returned vertex list is unmodifyable list &lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d1/d5a/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1graph_1_1CVertices.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;/dl&gt;&lt;h2 id=&#34;math&#34;&gt;math&lt;/h2&gt;&lt;dl&gt;&lt;dt id=&#34;math/abs&#34;&gt;&lt;a href=&#34;#math/abs&#34;&gt;math/abs&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for absolute value. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action calculates &lt;!-- htmlmin:ignore --&gt;$ \lvert x_i \rvert $&lt;!-- htmlmin:ignore --&gt; for all arguments &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B|C]=math/abs(-1,-5,3);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Absolute_value&#34; /&gt;https://en.wikipedia.org/wiki/Absolute_value&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d6/df0/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CAbs.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/acos&#34;&gt;&lt;a href=&#34;#math/acos&#34;&gt;math/acos&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for arc cosinus value. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action calculates &lt;!-- htmlmin:ignore --&gt;$ acos( x_i ) $&lt;!-- htmlmin:ignore --&gt; for all arguments, the return value is in &lt;!-- htmlmin:ignore --&gt;$ [0, \pi) $&lt;!-- htmlmin:ignore --&gt;, the arguments must be in radians. &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B|C]=math/acos(-1,-5,3);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Inverse_trigonometric_functions&#34; /&gt;https://en.wikipedia.org/wiki/Inverse_trigonometric_functions&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/de/d08/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CACos.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/asin&#34;&gt;&lt;a href=&#34;#math/asin&#34;&gt;math/asin&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for arc sinus value. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action calculates &lt;!-- htmlmin:ignore --&gt;$ asin( x_i ) $&lt;!-- htmlmin:ignore --&gt; for all arguments, the return value is in &lt;!-- htmlmin:ignore --&gt;$ [0, \pi) $&lt;!-- htmlmin:ignore --&gt;, the arguments must be in radians. &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B|C]=math/asin(-1,-5,3);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Inverse_trigonometric_functions&#34; /&gt;https://en.wikipedia.org/wiki/Inverse_trigonometric_functions&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d7/d1b/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CASin.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/atan&#34;&gt;&lt;a href=&#34;#math/atan&#34;&gt;math/atan&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for tangens value. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action calculates &lt;!-- htmlmin:ignore --&gt;$ atan( x_i ) $&lt;!-- htmlmin:ignore --&gt; for all arguments, the return value is in &lt;!-- htmlmin:ignore --&gt;$ [0, \pi) $&lt;!-- htmlmin:ignore --&gt;, the arguments must be in radians. &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B|C]=math/atan(-1,-5,3);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Inverse_trigonometric_functions&#34; /&gt;https://en.wikipedia.org/wiki/Inverse_trigonometric_functions&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d2/d8f/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CATan.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/average&#34;&gt;&lt;a href=&#34;#math/average&#34;&gt;math/average&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for average. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action calculates &lt;!-- htmlmin:ignore --&gt;$ \frac{1}{i} \sum_{i} x_i $&lt;!-- htmlmin:ignore --&gt; over all arguments, action fails never, but can throw a runtime exception &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;A=math/average(1,3,9,[10,[11,12]]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Average&#34; /&gt;https://en.wikipedia.org/wiki/Average&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d9/d0d/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CAverage.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/binomial&#34;&gt;&lt;a href=&#34;#math/binomial&#34;&gt;math/binomial&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for calculating binomial coefficient. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Calcluates &lt;!-- htmlmin:ignore --&gt;$ \binom{n}{k} $&lt;!-- htmlmin:ignore --&gt;, where n is the first argument and k the second of each given input tupel, the action fails never &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[B1|B2]=math/binomial(49,6,30,5);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Binomial_coefficient&#34; /&gt;https://en.wikipedia.org/wiki/Binomial_coefficient&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d4/d52/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CBinomial.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/ceil&#34;&gt;&lt;a href=&#34;#math/ceil&#34;&gt;math/ceil&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for ceil value. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Ceils any argument values with &lt;!-- htmlmin:ignore --&gt;$ \lceil x_i \rceil $&lt;!-- htmlmin:ignore --&gt; and returns all values, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B|C]=math/ceil(1.3,2.8,9.7);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Floor_and_ceiling_functions&#34; /&gt;https://en.wikipedia.org/wiki/Floor_and_ceiling_functions&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d3/d24/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CCeil.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/cos&#34;&gt;&lt;a href=&#34;#math/cos&#34;&gt;math/cos&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for cosinus value. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action calculates &lt;!-- htmlmin:ignore --&gt;$ cos( x_i ) $&lt;!-- htmlmin:ignore --&gt; for each argument in radians and returns the values &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B]=math/cos(3,4);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/dd/d5d/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CCos.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/cosh&#34;&gt;&lt;a href=&#34;#math/cosh&#34;&gt;math/cosh&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for cosinus hyperbolic value. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action calculates for all arguments &lt;!-- htmlmin:ignore --&gt;$ cosh( x_i ) $&lt;!-- htmlmin:ignore --&gt; and fails never, the arguments must be in radians. &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B]=math/cosh(3,4);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Hyperbolic_function&#34; /&gt;https://en.wikipedia.org/wiki/Hyperbolic_function&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d9/d8d/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CCosh.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/degrees&#34;&gt;&lt;a href=&#34;#math/degrees&#34;&gt;math/degrees&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for converting angle value to degree value. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Converts all radian arguments into degree values &lt;!-- htmlmin:ignore --&gt;$ \frac{x_i \cdot 180}{\pi} $&lt;!-- htmlmin:ignore --&gt; &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;A=math/degrees(pi);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Radian&#34; /&gt;https://en.wikipedia.org/wiki/Radian&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/de/d0c/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CDegrees.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/exp&#34;&gt;&lt;a href=&#34;#math/exp&#34;&gt;math/exp&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for exponential value. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Calculate the exponential function &lt;!-- htmlmin:ignore --&gt;$ e^{x_i} $&lt;!-- htmlmin:ignore --&gt; for each argument, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[X|Y]=math/exp(1,8);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Exponential_function&#34; /&gt;https://en.wikipedia.org/wiki/Exponential_function&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d1/d64/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CExp.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/factorial&#34;&gt;&lt;a href=&#34;#math/factorial&#34;&gt;math/factorial&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for calculating factorial. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Creates the factorial &lt;!-- htmlmin:ignore --&gt;$ ! x_i $&lt;!-- htmlmin:ignore --&gt; for all unflattern arguments and the action fails never &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B|C|D|E]=math/factorial(5,[[1,2],3,4]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Factorial&#34; /&gt;https://en.wikipedia.org/wiki/Factorial&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d9/dc9/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CFactorial.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/floor&#34;&gt;&lt;a href=&#34;#math/floor&#34;&gt;math/floor&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for floor value. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Floors any argument values with &lt;!-- htmlmin:ignore --&gt;$ \lfloor x_i \rfloor $&lt;!-- htmlmin:ignore --&gt; and returns all values, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B|C]=math/floor(1.3,2.8,9.7);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Floor_and_ceiling_functions&#34; /&gt;https://en.wikipedia.org/wiki/Floor_and_ceiling_functions&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d4/dc7/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CFloor.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/geometricmean&#34;&gt;&lt;a href=&#34;#math/geometricmean&#34;&gt;math/geometricmean&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for geometric mean. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action calculates &lt;!-- htmlmin:ignore --&gt;$ \sqrt[i]{\prod_{i} x_i} $&lt;!-- htmlmin:ignore --&gt; over all unflatten arguments, action fails never &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;G=math/geometricmean(1,3,9,[10,[11,12]]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Average&#34; /&gt;https://en.wikipedia.org/wiki/Average&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d7/d0c/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CGeometricMean.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/harmonicmean&#34;&gt;&lt;a href=&#34;#math/harmonicmean&#34;&gt;math/harmonicmean&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for harmonic mean. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action calculates &lt;!-- htmlmin:ignore --&gt;$ \frac{i}{\sum_{i} \frac{1}{x_i}} $&lt;!-- htmlmin:ignore --&gt; over all unflatten arguments, action fails never &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;G=math/harmonicmean(1,3,9,[10,[11,12]]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Average&#34; /&gt;https://en.wikipedia.org/wiki/Average&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d7/d6b/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CHarmonicMean.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/hypot&#34;&gt;&lt;a href=&#34;#math/hypot&#34;&gt;math/hypot&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for calculating the euclidian length. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Calculates for each pair of arguments &lt;!-- htmlmin:ignore --&gt;$ \sqrt{ x_{i}^{2} + y_{i}^{2} } $&lt;!-- htmlmin:ignore --&gt; and fail iif the number of arguments are odd, it unflats all list elements &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B|C]=math/hypot(1,[2,[3]],[4,5]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d5/ddb/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CHypot.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/isprime&#34;&gt;&lt;a href=&#34;#math/isprime&#34;&gt;math/isprime&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for checking for a prime number. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Checks for all unflatten arguments if the number is a prime number and returns a boolean of this check, the actions never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[P1|P2]=math/isprime(3,4);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Prime_number&#34; /&gt;https://en.wikipedia.org/wiki/Prime_number&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Primality_test&#34; /&gt;https://en.wikipedia.org/wiki/Primality_test&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d1/db9/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CIsPrime.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/log&#34;&gt;&lt;a href=&#34;#math/log&#34;&gt;math/log&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for logarithm value. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Calculates the natural logarithm &lt;!-- htmlmin:ignore --&gt;$ log( x_i ) $&lt;!-- htmlmin:ignore --&gt; for each unflatten argument &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B|C]=math/log([1,2],3);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Natural_logarithm&#34; /&gt;https://en.wikipedia.org/wiki/Natural_logarithm&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Logarithm&#34; /&gt;https://en.wikipedia.org/wiki/Logarithm&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d6/d74/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CLog.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/log10&#34;&gt;&lt;a href=&#34;#math/log10&#34;&gt;math/log10&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for logarithm (base 10) value. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Calculates the logarithm of the base 10 &lt;!-- htmlmin:ignore --&gt;$ log_{10} x_i $&lt;!-- htmlmin:ignore --&gt; for all unflatten arguments &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B|C]=math/log10([1,2],3);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Logarithm&#34; /&gt;https://en.wikipedia.org/wiki/Logarithm&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/dc/dca/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CLog10.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/max&#34;&gt;&lt;a href=&#34;#math/max&#34;&gt;math/max&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for maximum. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action calculates for all unflatten arguments the maxmimum with &lt;!-- htmlmin:ignore --&gt;$ max( x_0, x_1, \ldots, x_i ) $&lt;!-- htmlmin:ignore --&gt;, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;Max=math/max(2,5,7,[3,2]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d4/d67/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CMax.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/maxindex&#34;&gt;&lt;a href=&#34;#math/maxindex&#34;&gt;math/maxindex&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for index of maximum. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action takes of the given unflatten input the maximum and returns the index within the unflatten argument list, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;MaxIndex=math/maxindex(5,6,[7,8,[1,2,3]]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/dd/dc3/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CMaxIndex.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/min&#34;&gt;&lt;a href=&#34;#math/min&#34;&gt;math/min&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for minimum. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action calculates for all unflatten arguments the minimum with &lt;!-- htmlmin:ignore --&gt;$ min( x_0, x_1, \ldots, x_i ) $&lt;!-- htmlmin:ignore --&gt;, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;Max=math/min(2,5,7,[3,2]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/dc/dde/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CMin.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/minindex&#34;&gt;&lt;a href=&#34;#math/minindex&#34;&gt;math/minindex&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for index of minimum. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action takes of the given unflatten input the minimum and returns the index within the unflatten argument list, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;MinIndex=math/minindex(5,6,[7,8,[1,2,3]]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/dc/d8e/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CMinIndex.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/nextprime&#34;&gt;&lt;a href=&#34;#math/nextprime&#34;&gt;math/nextprime&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for create the next prime number. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action calculates the next prime number relative to the given argument value, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B|C]=math/nextprime([12,[144,1096]]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Prime_number&#34; /&gt;https://en.wikipedia.org/wiki/Prime_number&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Primality_test&#34; /&gt;https://en.wikipedia.org/wiki/Primality_test&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/dd/d0a/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CNextPrime.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/pow&#34;&gt;&lt;a href=&#34;#math/pow&#34;&gt;math/pow&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for pow. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Calculates the pow for each unflatten argument &lt;!-- htmlmin:ignore --&gt;$ x_i^t $&lt;!-- htmlmin:ignore --&gt;, the first argument is the exponent t and all other arguments will be used for &lt;!-- htmlmin:ignore --&gt;$ x_i $&lt;!-- htmlmin:ignore --&gt;, the action fails never &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B|C]=math/pow(2,-2,2,9);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/df/d45/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CPow.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/primefactors&#34;&gt;&lt;a href=&#34;#math/primefactors&#34;&gt;math/primefactors&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for creating prime factors list. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;For each argument the action returns a list of prime factors and fails never. &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[L1|L2]=math/primfactors(8,[120]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Prime_number&#34; /&gt;https://en.wikipedia.org/wiki/Prime_number&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Primality_test&#34; /&gt;https://en.wikipedia.org/wiki/Primality_test&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/dd/d83/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CPrimeFactors.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/radians&#34;&gt;&lt;a href=&#34;#math/radians&#34;&gt;math/radians&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for converting degree value into radian. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Converts all degree arguments into radian values &lt;!-- htmlmin:ignore --&gt;$ \frac{x_i \cdot \pi}{180} $&lt;!-- htmlmin:ignore --&gt; &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;A=math/radians(180);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Radian&#34; /&gt;https://en.wikipedia.org/wiki/Radian&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d8/df6/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CRadians.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/round&#34;&gt;&lt;a href=&#34;#math/round&#34;&gt;math/round&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for rounded value. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;This action calculates for each unflatten input argument the rounded value and the action fails never &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[I1|I2|I3]=math/round(5.5,[1.2,[2.7]]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Rounding&#34; /&gt;https://en.wikipedia.org/wiki/Rounding&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d6/d13/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CRound.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/sigmoid&#34;&gt;&lt;a href=&#34;#math/sigmoid&#34;&gt;math/sigmoid&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for calculating a parameterized sigmoid function. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Action calculates the sigmoid function for each value, the definition of the function is &lt;!-- htmlmin:ignore --&gt;$ \frac{\alpha}{ \beta + e^{ - \gamma \cdot t }} $&lt;!-- htmlmin:ignore --&gt;&lt;!-- htmlmin:ignore --&gt;$ \alpha $&lt;!-- htmlmin:ignore --&gt; is the first, &lt;!-- htmlmin:ignore --&gt;$ \beta $&lt;!-- htmlmin:ignore --&gt; the second and &lt;!-- htmlmin:ignore --&gt;$ \gamma $&lt;!-- htmlmin:ignore --&gt; the third argument, all values beginning at the fourth position will be used for t, so the action returns all values but and is never failing. &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B|C]=math/sigmoid(1,1,1,10,20,30);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Sigmoid_function&#34; /&gt;https://en.wikipedia.org/wiki/Sigmoid_function&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/da/d60/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CSigmoid.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/signum&#34;&gt;&lt;a href=&#34;#math/signum&#34;&gt;math/signum&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for signum value. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Calculates for each argument the signum value &lt;!-- htmlmin:ignore --&gt;$ sgn(x) = \begin{cases} -1 &amp; \text{if } x &lt; 0 \\ 0 &amp; \text{if } x = 0 \\ 1 &amp; \text{if } x &gt; 0 \end{cases} $&lt;!-- htmlmin:ignore --&gt; &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B|C]=math/signum(-3,0,8)
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Sign_function&#34; /&gt;https://en.wikipedia.org/wiki/Sign_function&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/db/d09/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CSignum.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/sin&#34;&gt;&lt;a href=&#34;#math/sin&#34;&gt;math/sin&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for sinus value. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action calculates &lt;!-- htmlmin:ignore --&gt;$ sin( x_i ) $&lt;!-- htmlmin:ignore --&gt; for each argument in radians and returns the values &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B]=math/sin(3,4);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/db/d79/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CSin.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/sinh&#34;&gt;&lt;a href=&#34;#math/sinh&#34;&gt;math/sinh&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for sinus hyperbolic value. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;For each unflatten input argument the &lt;!-- htmlmin:ignore --&gt;$ sinh( x_i ) $&lt;!-- htmlmin:ignore --&gt; is calculated and the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[X|Y|Z]=math/sinh(3.2,[5,8,[1.2]]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Hyperbolic_function&#34; /&gt;https://en.wikipedia.org/wiki/Hyperbolic_function&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d1/da0/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CSinh.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/sqrt&#34;&gt;&lt;a href=&#34;#math/sqrt&#34;&gt;math/sqrt&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for sqrt value. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Calculates the square-root for each unflatten argument &lt;!-- htmlmin:ignore --&gt;$ \sqrt{ x_i } $&lt;!-- htmlmin:ignore --&gt; &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d6/d00/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CSqrt.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/stirling&#34;&gt;&lt;a href=&#34;#math/stirling&#34;&gt;math/stirling&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for calculating stirling number. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action calculates the stirling number with &lt;!-- htmlmin:ignore --&gt;$ S(n,k)=\left\{\begin{matrix} n \\ k \end{matrix}\right\}= S_n^{(k)} $&lt;!-- htmlmin:ignore --&gt; of each tuple of the unflatten argument list, n is the first value of the tupel and k is the second value of the tupel, the action fails never &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[S1|S2]=math/stirling(2,3,[4,5]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Stirling_number&#34; /&gt;https://en.wikipedia.org/wiki/Stirling_number&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d3/d61/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CStirling.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/sum&#34;&gt;&lt;a href=&#34;#math/sum&#34;&gt;math/sum&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for sum of elements. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Sums all unflatten arguments &lt;!-- htmlmin:ignore --&gt;$ \sum_{i} x_i $&lt;!-- htmlmin:ignore --&gt;, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;S=math/sum(3,4,[1,-5,[3,4]],10,12);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/db/d02/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CSum.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/tan&#34;&gt;&lt;a href=&#34;#math/tan&#34;&gt;math/tan&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for tangens value. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action calculates for each unflatten input value in radians the &lt;!-- htmlmin:ignore --&gt;$ tan( x_i ) $&lt;!-- htmlmin:ignore --&gt; value, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[X|Y|Z]=math/tan(pi,1.3*pi,0.43*pi);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Trigonometric_functions&#34; /&gt;https://en.wikipedia.org/wiki/Trigonometric_functions&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d8/d9e/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CTan.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/tanh&#34;&gt;&lt;a href=&#34;#math/tanh&#34;&gt;math/tanh&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for tangens hyperbolic value. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Calculates for each unflatten argument &lt;!-- htmlmin:ignore --&gt;$ tanh( x_i ) $&lt;!-- htmlmin:ignore --&gt; and fails never &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B|C]=math/tanh([1,2],3);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Hyperbolic_function&#34; /&gt;https://en.wikipedia.org/wiki/Hyperbolic_function&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d6/dbd/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CTanh.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;/dl&gt;&lt;h2 id=&#34;math/bit/matrix&#34;&gt;math/bit/matrix&lt;/h2&gt;&lt;dl&gt;&lt;dt id=&#34;math/bit/matrix/and&#34;&gt;&lt;a href=&#34;#math/bit/matrix/and&#34;&gt;math/bit/matrix/and&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;performs the logical and operation to all bit matrices. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action runs the logical and operator, the first argument is the bit matrix, that is combined with all other bit matrices, so &lt;!-- htmlmin:ignore --&gt;$ m_i = m_i \text{ &amp;&amp; } m_1 $&lt;!-- htmlmin:ignore --&gt; is performed, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;math/bit/matrix/and(Matrix,Matrix1,Matrix2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d1/d45/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1bit_1_1matrix_1_1CAnd.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/bit/matrix/boolvalue&#34;&gt;&lt;a href=&#34;#math/bit/matrix/boolvalue&#34;&gt;math/bit/matrix/boolvalue&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns for the index tuple a boolean value. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action returns for the first argument, which is a bit matrix, all boolean values for all given index tuples (row / column), the action fail on incorrect input &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[B1|B2]=math/bit/matrix/boolvalue(BitMatrix,1,2,[3,5]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d0/dfd/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1bit_1_1matrix_1_1CBoolValue.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/bit/matrix/column&#34;&gt;&lt;a href=&#34;#math/bit/matrix/column&#34;&gt;math/bit/matrix/column&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns a single column of a bit matrix. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action returns a column of a bit matrix as vector, the first argument is the index of the column, all other a matrix objects, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[V1|V2]=math/bit/matrix/column(3,Matrix1,[Matrix2]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d9/d39/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1bit_1_1matrix_1_1CColumn.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/bit/matrix/columns&#34;&gt;&lt;a href=&#34;#math/bit/matrix/columns&#34;&gt;math/bit/matrix/columns&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the column number of a bit matrix. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Reads the column number of each input matrix and returns the value, the action never fails. &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[C1|C2]=math/bit/matrix/columns(M1,M2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/de/dd9/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1bit_1_1matrix_1_1CColumns.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/bit/matrix/copy&#34;&gt;&lt;a href=&#34;#math/bit/matrix/copy&#34;&gt;math/bit/matrix/copy&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns a copy of the matrix. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;All input matrix objects will be copied and returned, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B]=math/bit/matrix/copy(Matrix1,Matrix2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d2/ddb/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1bit_1_1matrix_1_1CCopy.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/bit/matrix/create&#34;&gt;&lt;a href=&#34;#math/bit/matrix/create&#34;&gt;math/bit/matrix/create&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates a bit matrix. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;All tuple arguments are defined the size of bit matrix, so for each input tuple argument a bit matrix will be created and returned, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B]=math/bit/matrix/create(3,2,[1,12]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d9/d89/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1bit_1_1matrix_1_1CCreate.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/bit/matrix/dimension&#34;&gt;&lt;a href=&#34;#math/bit/matrix/dimension&#34;&gt;math/bit/matrix/dimension&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the dimension (rows / columns) of a bit matrix. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Reads the dimension of each input matrix and returns the rows and columns, the action never fails. &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[Row1|Column1|Row2|Column2]=math/bit/matrix/dimension(M1,M2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/de/d92/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1bit_1_1matrix_1_1CDimension.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/bit/matrix/falsecount&#34;&gt;&lt;a href=&#34;#math/bit/matrix/falsecount&#34;&gt;math/bit/matrix/falsecount&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the number of false values. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The actions returnf for each input matrix the number of true values, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B]=math/bit/matrix/falsecount(BitMatrix1,BitMatrix2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d4/d1c/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1bit_1_1matrix_1_1CFalseCount.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/bit/matrix/hammingdistance&#34;&gt;&lt;a href=&#34;#math/bit/matrix/hammingdistance&#34;&gt;math/bit/matrix/hammingdistance&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;calculates the hamming distance. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action calculates between bit matrices, the distance will be calculated between the first and all other arguments, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B]=math/bit/matrix/hammingdistance(Matrix1,Matrix2,Matrix3);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Hamming_distance&#34; /&gt;https://en.wikipedia.org/wiki/Hamming_distance&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d3/d4f/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1bit_1_1matrix_1_1CHammingDistance.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/bit/matrix/nand&#34;&gt;&lt;a href=&#34;#math/bit/matrix/nand&#34;&gt;math/bit/matrix/nand&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;performs the logical not-and operation to all bit matrices. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action runs the logical not-and operator, the first argument is the bit matrix, that is combined with all other bit matrices, so &lt;!-- htmlmin:ignore --&gt;$ m_i = m_i \text{ &amp;&amp; not } m_1 $&lt;!-- htmlmin:ignore --&gt; is performed, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;math/bit/matrix/nand(Matrix,Matrix1,Matrix2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d4/da8/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1bit_1_1matrix_1_1CNAnd.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/bit/matrix/not&#34;&gt;&lt;a href=&#34;#math/bit/matrix/not&#34;&gt;math/bit/matrix/not&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;performs the logical not operation to all bit matrices. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Each input argument defines a bit matrix and the action apply the logical not operator, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;math/bit/matrix/not(Matrix1,Matrix2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d8/d7e/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1bit_1_1matrix_1_1CNot.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/bit/matrix/numericvalue&#34;&gt;&lt;a href=&#34;#math/bit/matrix/numericvalue&#34;&gt;math/bit/matrix/numericvalue&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns for the index tuple a numeric value. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action returns for the first argument, which is a bit matrix, all numeric values for all given index tuples (0 = false, 1 = true), the action fails on wrong input &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[B1|B2]=math/bit/matrix/numericvalue(BitMatrix,1,2,[Row,Column]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/dc/d24/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1bit_1_1matrix_1_1CNumericValue.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/bit/matrix/or&#34;&gt;&lt;a href=&#34;#math/bit/matrix/or&#34;&gt;math/bit/matrix/or&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;performs the logical or operation to all bit matrices. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action runs the logical or operator, the first argument is the bit matrix, that is combined with all other bit matrices, so &lt;!-- htmlmin:ignore --&gt;$ m_i = m_i \text{ || } m_1 $&lt;!-- htmlmin:ignore --&gt; is performed, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;math/bit/matrix/or(Matrix,Matrix1,Matrix2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/db/db7/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1bit_1_1matrix_1_1COr.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/bit/matrix/row&#34;&gt;&lt;a href=&#34;#math/bit/matrix/row&#34;&gt;math/bit/matrix/row&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns a single row of a bit matrix. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action returns a row of a matrix as vector, the first argument is the index of the row, all other arguments are matrix object, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[R1|R2]=math/bit/matrix/row(2,Matrix1,[Matrix2]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d9/d2a/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1bit_1_1matrix_1_1CRow.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/bit/matrix/rows&#34;&gt;&lt;a href=&#34;#math/bit/matrix/rows&#34;&gt;math/bit/matrix/rows&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the row number of a matrix. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Reads the row number of each input matrix and returns the value, the action never fails. &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[C1|C2]=math/blas/matrix/rows(M1,M2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d0/d37/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1bit_1_1matrix_1_1CRows.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/bit/matrix/size&#34;&gt;&lt;a href=&#34;#math/bit/matrix/size&#34;&gt;math/bit/matrix/size&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the size (rows * columns) of the matrix. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;All input matrix objects will return their size (number of bits for the rows * columns), the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B]=math/bit/matrix/size(Matrix1,Matrix2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/db/dcc/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1bit_1_1matrix_1_1CSize.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/bit/matrix/tovector&#34;&gt;&lt;a href=&#34;#math/bit/matrix/tovector&#34;&gt;math/bit/matrix/tovector&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;converts the bit matrix into a bit vector. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action converts each bit matrix argument into a bit vector with the size of the matrix, the bit within the vector are row-wise copied from the matrix and the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[V1|V2]=math/bit/matrix/tovector(Matrix1,Matrix2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/dd/dc6/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1bit_1_1matrix_1_1CToVector.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/bit/matrix/truecount&#34;&gt;&lt;a href=&#34;#math/bit/matrix/truecount&#34;&gt;math/bit/matrix/truecount&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the number of true values. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The actions returnf for each input matrix the number of true values, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B]=math/bit/matrix/truecount(BitMatrix1,BitMatrix2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d6/ded/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1bit_1_1matrix_1_1CTrueCount.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/bit/matrix/xor&#34;&gt;&lt;a href=&#34;#math/bit/matrix/xor&#34;&gt;math/bit/matrix/xor&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;performs the logical xor operation to all bit matrices. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action runs the logical xor operator, the first argument is the bit matrix, that is combined with all other bit matrices, so &lt;!-- htmlmin:ignore --&gt;$ m_i = m_i \text{ ^ } m_1 $&lt;!-- htmlmin:ignore --&gt; is performed, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;math/bit/matrix/xor(Matrix,Matrix1,Matrix2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/dc/d30/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1bit_1_1matrix_1_1CXor.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;/dl&gt;&lt;h2 id=&#34;math/bit/vector&#34;&gt;math/bit/vector&lt;/h2&gt;&lt;dl&gt;&lt;dt id=&#34;math/bit/vector/and&#34;&gt;&lt;a href=&#34;#math/bit/vector/and&#34;&gt;math/bit/vector/and&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;performs the logical and operation to all bit vectors. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action runs the logical and operator, the first argument is the bit vector, that is combined with all other bit vectors, so &lt;!-- htmlmin:ignore --&gt;$ v_i = v_i \text{ &amp;&amp; } v_1 $&lt;!-- htmlmin:ignore --&gt; is performed, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;math/bit/vector/and(Vector,Vector1,Vector2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/da/dab/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1bit_1_1vector_1_1CAnd.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/bit/vector/boolvalue&#34;&gt;&lt;a href=&#34;#math/bit/vector/boolvalue&#34;&gt;math/bit/vector/boolvalue&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns for the index a boolean value. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action returns for the first argument, which is a bit vector, all boolean values for all given index values, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[B1|B2|B3]=math/bit/vector/boolvalue(BitVector,1,[3,5]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d4/d78/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1bit_1_1vector_1_1CBoolValue.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/bit/vector/clear&#34;&gt;&lt;a href=&#34;#math/bit/vector/clear&#34;&gt;math/bit/vector/clear&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;sets the indexed bit to false within the bit vector. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action gets bit vectors and index positions and in each bit vector the given bit positions are set to false, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;math/bit/vector/clear(BitVector1,0,1,BitVector2,[3,5]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d6/df8/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1bit_1_1vector_1_1CClear.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/bit/vector/copy&#34;&gt;&lt;a href=&#34;#math/bit/vector/copy&#34;&gt;math/bit/vector/copy&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns a copy of the vector. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;All input vector objects will be copied and returned, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B]=math/bit/vector/copy(Vector1,Vector2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d8/d68/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1bit_1_1vector_1_1CCopy.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/bit/vector/create&#34;&gt;&lt;a href=&#34;#math/bit/vector/create&#34;&gt;math/bit/vector/create&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates a bit vector. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;All arguments are defined the size of bit vectors, so for each input argument a bit vector will be created and returned, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B|C|D]=math/bit/vector/create(3,[2,[1,12]]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/dc/dd9/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1bit_1_1vector_1_1CCreate.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/bit/vector/falsecount&#34;&gt;&lt;a href=&#34;#math/bit/vector/falsecount&#34;&gt;math/bit/vector/falsecount&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the number of false values. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The actions returnf for each input vector the number of true values, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B]=math/bit/vector/falsecount(BitVector1,BitVector2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d7/d7c/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1bit_1_1vector_1_1CFalseCount.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/bit/vector/hammingdistance&#34;&gt;&lt;a href=&#34;#math/bit/vector/hammingdistance&#34;&gt;math/bit/vector/hammingdistance&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;calculates the hamming distance. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action calculates between bit vectors, the distance will be calculated between the first and all other arguments, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B]=math/bit/vector/hammingdistance(Vector1,Vector2,Vector3);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Hamming_distance&#34; /&gt;https://en.wikipedia.org/wiki/Hamming_distance&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/dd/de8/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1bit_1_1vector_1_1CHammingDistance.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/bit/vector/nand&#34;&gt;&lt;a href=&#34;#math/bit/vector/nand&#34;&gt;math/bit/vector/nand&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;performs the logical not-and operation to all bit vectors. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action runs the logical not-and operator, the first argument is the bit vector, that is combined with all other bit vectors, so &lt;!-- htmlmin:ignore --&gt;$ v_i = v_i \text{ &amp;&amp; not } v_1 $&lt;!-- htmlmin:ignore --&gt; is performed, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;math/bit/vector/nand(Vector,Vector1,Vector2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/db/d2d/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1bit_1_1vector_1_1CNAnd.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/bit/vector/not&#34;&gt;&lt;a href=&#34;#math/bit/vector/not&#34;&gt;math/bit/vector/not&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;performs the logical not operation to all bit vectors. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Each input argument defines a bit vector and the action apply the logical not operator, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;math/bit/vector/not(Vector1,Vector2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d6/dfd/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1bit_1_1vector_1_1CNot.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/bit/vector/numericvalue&#34;&gt;&lt;a href=&#34;#math/bit/vector/numericvalue&#34;&gt;math/bit/vector/numericvalue&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns for the index a numeric value. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action returns for the first argument, which is a bit vector, all numeric values for all given index values (0 = false, 1 = true), the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[B1|B2|B3]=math/bit/vector/numericvalue(BitVector,1,[3,5]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d0/d8f/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1bit_1_1vector_1_1CNumericValue.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/bit/vector/or&#34;&gt;&lt;a href=&#34;#math/bit/vector/or&#34;&gt;math/bit/vector/or&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;performs the logical or operation to all bit vectors. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action runs the logical or operator, the first argument is the bit vector, that is combined with all other bit vectors, so &lt;!-- htmlmin:ignore --&gt;$ v_i = v_i \text{ || } v_1 $&lt;!-- htmlmin:ignore --&gt; is performed, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;math/bit/vector/or(Vector,Vector1,Vector2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d5/d59/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1bit_1_1vector_1_1COr.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/bit/vector/range&#34;&gt;&lt;a href=&#34;#math/bit/vector/range&#34;&gt;math/bit/vector/range&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns a new bit vector, based on the current. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action returns a new bit vector based on the range, the first argument is a bit vector, all other arguments are tuples of ranges, the action fails on wrong input, index starts at zero, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[V1|V2]=math/bit/vector/range(BitVector,0,1,[3,5]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d5/deb/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1bit_1_1vector_1_1CRange.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/bit/vector/set&#34;&gt;&lt;a href=&#34;#math/bit/vector/set&#34;&gt;math/bit/vector/set&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;sets bit position by index and value. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The first argument is the bit vector, the second argument is a boolean value or number value (0 = false), all other values are index positions, each index bit within the bit vector will be set to the given value, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;math/bit/vector/set(BitVector,true,1,[3,7]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/dc/d23/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1bit_1_1vector_1_1CSet.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/bit/vector/size&#34;&gt;&lt;a href=&#34;#math/bit/vector/size&#34;&gt;math/bit/vector/size&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the size of the vector. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;All input vector objects will return their size (number of bits), the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B]=math/bit/vector/size(Vector1,Vector2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d5/de5/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1bit_1_1vector_1_1CSize.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/bit/vector/toblas&#34;&gt;&lt;a href=&#34;#math/bit/vector/toblas&#34;&gt;math/bit/vector/toblas&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;converts the bit vector to a blas vector. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action converts the bit vector to a blas vector, the last argument can be &#34;dense&#34; or &#34;sparse&#34;, all other arguments are bit vectors and the actions never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B]=math/bit/vector/blas(Bit1,Bit2,&#34;dense|sparse&#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/db/d7f/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1bit_1_1vector_1_1CToBlas.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/bit/vector/tolist&#34;&gt;&lt;a href=&#34;#math/bit/vector/tolist&#34;&gt;math/bit/vector/tolist&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the long values of the bit vector as list. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action creates a list with 0 / 1 values of the values of the bit vector, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[L1|L2]=math/bit/vector/tolist(Vector1,Vector2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d8/d1a/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1bit_1_1vector_1_1CToList.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/bit/vector/truecount&#34;&gt;&lt;a href=&#34;#math/bit/vector/truecount&#34;&gt;math/bit/vector/truecount&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the number of true values. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The actions returnf for each input vector the number of true values, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B]=math/blas/vector/truecount(BitVector1,BitVector2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/dd/d93/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1bit_1_1vector_1_1CTrueCount.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/bit/vector/xor&#34;&gt;&lt;a href=&#34;#math/bit/vector/xor&#34;&gt;math/bit/vector/xor&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;performs the logical xor operation to all bit vectors. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action runs the logical xor operator, the first argument is the bit vector, that is combined with all other bit vectors, so &lt;!-- htmlmin:ignore --&gt;$ v_i = v_i \text{ ^ } v_1 $&lt;!-- htmlmin:ignore --&gt; is performed, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;math/bit/vector/xor(Vector,Vector1,Vector2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/db/db3/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1bit_1_1vector_1_1CXor.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;/dl&gt;&lt;h2 id=&#34;math/blas&#34;&gt;math/blas&lt;/h2&gt;&lt;dl&gt;&lt;dt id=&#34;math/blas/elementwise&#34;&gt;&lt;a href=&#34;#math/blas/elementwise&#34;&gt;math/blas/elementwise&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;elementweise vector / matrix operation. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action calculates elementwise different operations (plus, plus-absolute, minus, multiply, divide), all arguments are triples of matrix-operator-matrix|scalar, and the operation is assigned to the left-side matrix, the action fails on assigning problems  &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;math/blas/elementwise(Matrix1,&#34;+&#34;,5,Matrix2,&#34;|+|&#34;,Matrix3,Matrix4,&#34;-&#34;,3,[Matrix5,&#34;*&#34;,0.5],[Matrix6,&#34;/&#34;,100]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/db/d6e/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1CElementWise.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/blas/multiply&#34;&gt;&lt;a href=&#34;#math/blas/multiply&#34;&gt;math/blas/multiply&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;defines matrix- / vector-products. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action multiplies tupel-wise all unflatten arguments, the action fails iif the multiply cannot executed e.g. on wrong input &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[M1|M2|M3]=math/blas/multiply(Vector1,Vector2,[[Matrix1,Matrix2],Matrix3,Vector3]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d4/d67/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1CMultiply.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/blas/size&#34;&gt;&lt;a href=&#34;#math/blas/size&#34;&gt;math/blas/size&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the elements within the BLAS structure. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action returns the size of each BLAS structure &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[S1|S2|S3]=math/blas/size(M1,[M2,M3]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d0/d17/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1CSize.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;/dl&gt;&lt;h2 id=&#34;math/blas/matrix&#34;&gt;math/blas/matrix&lt;/h2&gt;&lt;dl&gt;&lt;dt id=&#34;math/blas/matrix/assign&#34;&gt;&lt;a href=&#34;#math/blas/matrix/assign&#34;&gt;math/blas/matrix/assign&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;assigns a value or matrix to all elements. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action assign the first argument to all other arguments which must be a matrix &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;math/blas/matrix/assign(2,Matrix1,[Matrix2,Matrix3]);
math/blas/matrix/assign(AssignMatrix,Matrix1,[Matrix2,Matrix3]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/da/d39/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CAssign.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/blas/matrix/column&#34;&gt;&lt;a href=&#34;#math/blas/matrix/column&#34;&gt;math/blas/matrix/column&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns a single column of a matrix. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action returns a column of a matrix as vector, the first argument is the index of the column, all other a matrix objects, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[V1|V2]=math/blas/matrix/column(3,Matrix1,[Matrix2]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d6/d23/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CColumn.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/blas/matrix/columns&#34;&gt;&lt;a href=&#34;#math/blas/matrix/columns&#34;&gt;math/blas/matrix/columns&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the column number of a matrix. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Reads the column number of each input matrix and returns the value, the action never fails. &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[C1|C2]=math/blas/matrix/columns(M1,M2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d5/d43/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CColumns.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/blas/matrix/condition&#34;&gt;&lt;a href=&#34;#math/blas/matrix/condition&#34;&gt;math/blas/matrix/condition&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the condition of a matrix. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Calculates for each input matrix the condition number and returns the value, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[C1|C2]=math/blas/matrix/condition(M1,M2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Condition_number&#34; /&gt;https://en.wikipedia.org/wiki/Condition_number&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d2/d29/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CCondition.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/blas/matrix/copy&#34;&gt;&lt;a href=&#34;#math/blas/matrix/copy&#34;&gt;math/blas/matrix/copy&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns a copy of the matrix. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;All input matrix object will be copied and returned, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B]=math/blas/matrix/copy(Matrix1,Matrix2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d3/d82/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CCopy.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/blas/matrix/create&#34;&gt;&lt;a href=&#34;#math/blas/matrix/create&#34;&gt;math/blas/matrix/create&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates a dense- or sparse-matrix. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action creates densore or sparse matrix objects, the last object is a string with dense or sparse, all other arguments are tuples of row and column size. &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[M1|M2]=math/blas/matrix/create(2,2,[3,2],&#34;dense|sparse&#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/da/de1/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CCreate.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/blas/matrix/determinant&#34;&gt;&lt;a href=&#34;#math/blas/matrix/determinant&#34;&gt;math/blas/matrix/determinant&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the determinant of a matrix. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Calculates for each input matrix the determinat and returns it, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[D1|D2|D3]=math/blas/determinant(M1,[M2,M3]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Determinant&#34; /&gt;https://en.wikipedia.org/wiki/Determinant&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/da/d05/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CDeterminant.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/blas/matrix/dimension&#34;&gt;&lt;a href=&#34;#math/blas/matrix/dimension&#34;&gt;math/blas/matrix/dimension&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the dimension (rows / columns) of a matrix. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Reads the dimension of each input matrix and returns the rows and columns, the action never fails. &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[Row1|Column1|Row2|Column2]=math/blas/matrix/dimension(M1,M2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d4/d14/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CDimension.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/blas/matrix/eigen&#34;&gt;&lt;a href=&#34;#math/blas/matrix/eigen&#34;&gt;math/blas/matrix/eigen&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates the real eigenvalues and eigenvectors of a matrix. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;For each input matrix argument the eigen decomposition is executed and two elements eigenvalues (as vector) and eigenvectors (as matrix) are returned, the action never fails. &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[Values1|Vectors1|Values2|Vectors2]=math/blas/matrix/eigen(Matrix1,Matrix2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Eigenvalues_and_eigenvectors&#34; /&gt;https://en.wikipedia.org/wiki/Eigenvalues_and_eigenvectors&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d4/d39/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CEigen.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/blas/matrix/get&#34;&gt;&lt;a href=&#34;#math/blas/matrix/get&#34;&gt;math/blas/matrix/get&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns a single element of a matrix. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action returns single elements of a matrix, the first argument is a matrix object, the other arguments are index tuples and the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B]=math/blas/matrix(Matrix,3,4,[Row,Column]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d6/da4/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CGet.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/blas/matrix/graphlaplacian&#34;&gt;&lt;a href=&#34;#math/blas/matrix/graphlaplacian&#34;&gt;math/blas/matrix/graphlaplacian&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates the graph laplacian. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;For each input matrix, which must be symmetric, the graph laplacian is calculated and returned, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[L1|L2]=math/blas/matrix/graphlaplacian(SymmetricMatrix1,SymmetricMatrix2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Laplacian_matrix&#34; /&gt;https://en.wikipedia.org/wiki/Laplacian_matrix&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d3/d9c/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CGraphLaplacian.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/blas/matrix/infinitynorm&#34;&gt;&lt;a href=&#34;#math/blas/matrix/infinitynorm&#34;&gt;math/blas/matrix/infinitynorm&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the infinitiy-norm of a matrix. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action calculates for each input matrix object the infinity-norm and returns the value, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[N1|N2]=math/blas/matrix/infinitynorm(M1,M2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Uniform_norm&#34; /&gt;https://en.wikipedia.org/wiki/Uniform_norm&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d8/d89/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CInfinityNorm.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/blas/matrix/invert&#34;&gt;&lt;a href=&#34;#math/blas/matrix/invert&#34;&gt;math/blas/matrix/invert&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;inverts the matrix. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Inverts each input matrix and returns it, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[I1|I2]=math/blas/matrix/invert(M1,M2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Invertible_matrix&#34; /&gt;https://en.wikipedia.org/wiki/Invertible_matrix&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/df/df2/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CInvert.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/blas/matrix/matrixnorm&#34;&gt;&lt;a href=&#34;#math/blas/matrix/matrixnorm&#34;&gt;math/blas/matrix/matrixnorm&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the frobenius- / matrix-norm of a matrix. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;For each input matrix object the frobenius- / matrix-norm is calculates and returned, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[N1|N2]=math/blas/matrix/matrixnorm(M1,M2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Matrix_norm&#34; /&gt;https://en.wikipedia.org/wiki/Matrix_norm&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d1/d17/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CMatrixNorm.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/blas/matrix/nonzero&#34;&gt;&lt;a href=&#34;#math/blas/matrix/nonzero&#34;&gt;math/blas/matrix/nonzero&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the number of non-zero cells. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Gets the number of non-zero cells on each matrix input and returns the value, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[NZ1|NZ2]=math/blas/matrix/nonzero(M1,M2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/df/d00/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CNonZero.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/blas/matrix/normalizedgraphlaplacian&#34;&gt;&lt;a href=&#34;#math/blas/matrix/normalizedgraphlaplacian&#34;&gt;math/blas/matrix/normalizedgraphlaplacian&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates the normalized graph laplacian. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;For each input matrix, which must be symmetric, the normalized graph laplacian is calculated and returned, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[L1|L2]=math/blas/matrix/normalizedgraphlaplacian(SymmetricMatrix1,SymmetricMatrix2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Laplacian_matrix&#34; /&gt;https://en.wikipedia.org/wiki/Laplacian_matrix&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/dc/d14/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CNormalizedGraphLaplacian.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/blas/matrix/onenorm&#34;&gt;&lt;a href=&#34;#math/blas/matrix/onenorm&#34;&gt;math/blas/matrix/onenorm&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the one-norm of a matrix. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Calculates for each input matrix the one-norm and returns the value, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[N1|N2]=math/blas/matrix/onenorm(M1,M2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Matrix_norm&#34; /&gt;https://en.wikipedia.org/wiki/Matrix_norm&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d2/dce/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1COneNorm.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/blas/matrix/parse&#34;&gt;&lt;a href=&#34;#math/blas/matrix/parse&#34;&gt;math/blas/matrix/parse&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates a dense- or sparse-matrix from a string. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action parses each argument and returns the matrix object, the last argument can be a string with &#34;dense&#34; or &#34;sparse&#34; to defining a dense or sparse matrix, all other arguments string with a semicolon and space / comma seperated list, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B|C]=math/blas/matrix/parse(&#34;1,2;3,4&#34;,&#34;567;8910&#34;,&#34;dense|sparse&#34;)
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;Note&lt;/dt&gt;&lt;dd&gt;semicolon splits the rows, spaces / comma splits the columns &lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/dd/dfe/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CParse.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/blas/matrix/power&#34;&gt;&lt;a href=&#34;#math/blas/matrix/power&#34;&gt;math/blas/matrix/power&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the matrix power. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action creates the matrix power, the first argument is the exponent, all other arguments are input matrix vlaues and the returns the power value for each input matrix &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[M1|M2|M3]=blas/matrix/power(3,M1,[M2,[M3]]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Matrix_exponential&#34; /&gt;https://en.wikipedia.org/wiki/Matrix_exponential&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d0/d30/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CPower.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/blas/matrix/rank&#34;&gt;&lt;a href=&#34;#math/blas/matrix/rank&#34;&gt;math/blas/matrix/rank&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;rank of the matrix. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;For each input matrix the rank is calculated and returned, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[R1|R2]=math/blas/matrix/rank(M1,M2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Rank_%28linear_algebra%29&#34; /&gt;https://en.wikipedia.org/wiki/Rank_(linear_algebra)&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d4/d46/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CRank.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/blas/matrix/row&#34;&gt;&lt;a href=&#34;#math/blas/matrix/row&#34;&gt;math/blas/matrix/row&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns a single row of a matrix. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action returns a row of a matrix as vector, the first argument is the index of the row, all other arguments are matrix object, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[R1|R2]=math/blas/matrix/row(2,Matrix1,[Matrix2]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/df/df3/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CRow.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/blas/matrix/rows&#34;&gt;&lt;a href=&#34;#math/blas/matrix/rows&#34;&gt;math/blas/matrix/rows&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the row number of a matrix. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Reads the row number of each input matrix and returns the value, the action never fails. &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[C1|C2]=math/blas/matrix/rows(M1,M2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d1/d77/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CRows.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/blas/matrix/set&#34;&gt;&lt;a href=&#34;#math/blas/matrix/set&#34;&gt;math/blas/matrix/set&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;set a single element of a matrix. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action sets a value into the matrix, the first argument is the row index, second argument the column index, the third value, the new value, all other arguments are matrix objects &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;math/blas/matrix/set(2,2,0.33,Matrix1,[Matrix2,Matrix3]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d1/d48/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CSet.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/blas/matrix/singularvalue&#34;&gt;&lt;a href=&#34;#math/blas/matrix/singularvalue&#34;&gt;math/blas/matrix/singularvalue&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates the singular value decomposition of a matrix. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;For each input matrix the singular value decompisition is called and the values, and the two matrixes (left / right) are returned, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[Values1|U1|V1|Values2|U2|V2]=blas/matrix/singularvalue(Matrix1,Matrix2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Singular_value_decomposition&#34; /&gt;https://en.wikipedia.org/wiki/Singular_value_decomposition&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/dc/d9b/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CSingularValue.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/blas/matrix/solve&#34;&gt;&lt;a href=&#34;#math/blas/matrix/solve&#34;&gt;math/blas/matrix/solve&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;solver of matrix-equation. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action solve the equation &lt;!-- htmlmin:ignore --&gt;$ A \cdot X = B $&lt;!-- htmlmin:ignore --&gt; for each input tuple, &lt;!-- htmlmin:ignore --&gt;$ A $&lt;!-- htmlmin:ignore --&gt; is the first matrix argument within the tuple and &lt;!-- htmlmin:ignore --&gt;$ B $&lt;!-- htmlmin:ignore --&gt; the second, which can be a matrix or vector, for each tuple the action returns &lt;!-- htmlmin:ignore --&gt;$ X $&lt;!-- htmlmin:ignore --&gt;, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[R1|R2]=math/blas/matrix(Matrix1,Matrix2,[Matrix3,Vector1]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d6/d26/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CSolve.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/blas/matrix/submatrix&#34;&gt;&lt;a href=&#34;#math/blas/matrix/submatrix&#34;&gt;math/blas/matrix/submatrix&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns a submatrix. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The first four arguments defines the index values of the submatrix ( from/to row, from/to column ) and each matrix object that starts at the fiveth position will &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[M1|M2]=math/blas/matrix/submatrix(FromRow,ToRow,FromColumn,ToColumn,Matrix1,[Matrix2]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/dd/df6/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CSubMatrix.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/blas/matrix/sum&#34;&gt;&lt;a href=&#34;#math/blas/matrix/sum&#34;&gt;math/blas/matrix/sum&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns sum of a matrix. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Calculates for each input matrix the sum and returns the value, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[S1|S2]=math/blas/matrix/sum(M1,M2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/db/d0f/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CSum.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/blas/matrix/tolist&#34;&gt;&lt;a href=&#34;#math/blas/matrix/tolist&#34;&gt;math/blas/matrix/tolist&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;converts a matrix rowise to a list. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action creates lists of each input matrix, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[L1|L2|L3]=math/blas/matrix/tolist(Matrix1,[Matrix2,Matrix3]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d8/d82/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CToList.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/blas/matrix/trace&#34;&gt;&lt;a href=&#34;#math/blas/matrix/trace&#34;&gt;math/blas/matrix/trace&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates the trace of the matrix. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Returns for each matrix input argument the trace, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[T1|T2]=math/blas/matrix/trace(M1,M2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Trace_%28linear_algebra%29&#34; /&gt;https://en.wikipedia.org/wiki/Trace_(linear_algebra)&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d7/dc9/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CTrace.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/blas/matrix/transpose&#34;&gt;&lt;a href=&#34;#math/blas/matrix/transpose&#34;&gt;math/blas/matrix/transpose&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;transpose a matrix. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Creates for each input matrix the transposed matrix and returns it, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[T1|T2]=math/blas/matrix/transpose(M1,M2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Transpose&#34; /&gt;https://en.wikipedia.org/wiki/Transpose&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/db/d0e/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CTranspose.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/blas/matrix/twonorm&#34;&gt;&lt;a href=&#34;#math/blas/matrix/twonorm&#34;&gt;math/blas/matrix/twonorm&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the two-norm of a matrix. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Calculates for each input matrix the two-norm and returns the value, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[N1|N2]=math/blas/matrix/twonorm(M1,M2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Matrix_norm&#34; /&gt;https://en.wikipedia.org/wiki/Matrix_norm&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/db/d18/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CTwoNorm.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;/dl&gt;&lt;h2 id=&#34;math/blas/vector&#34;&gt;math/blas/vector&lt;/h2&gt;&lt;dl&gt;&lt;dt id=&#34;math/blas/vector/assign&#34;&gt;&lt;a href=&#34;#math/blas/vector/assign&#34;&gt;math/blas/vector/assign&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;assigns a value or vector to all elements. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action assign the first argument to all other arguments which must be vectors &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;math/blas/vector/assign(2,Vector1,[Vector2,Vector3]);
math/blas/vector/assign(AssignVector,Vector1,[Vector2,Vector3]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/dc/d88/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1vector_1_1CAssign.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/blas/vector/copy&#34;&gt;&lt;a href=&#34;#math/blas/vector/copy&#34;&gt;math/blas/vector/copy&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns a copy of the vector. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;All input vector object will be copied and returned, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B]=math/blas/vector/copy(Vector1,Vector2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/da/d17/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1vector_1_1CCopy.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/blas/vector/create&#34;&gt;&lt;a href=&#34;#math/blas/vector/create&#34;&gt;math/blas/vector/create&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates a dense- or sparse-vector. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action creates a vector, the first &lt;!-- htmlmin:ignore --&gt;$ n-1 $&lt;!-- htmlmin:ignore --&gt; arguments are the size of the vector, the last argument defines as string a dense or sparse vector (default is dense) and the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B|C]=math/blas/vector/create(3,2,1,&#34;dense|sparse&#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d3/deb/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1vector_1_1CCreate.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/blas/vector/dotproduct&#34;&gt;&lt;a href=&#34;#math/blas/vector/dotproduct&#34;&gt;math/blas/vector/dotproduct&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns dot-product of vectors. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action calculates for each tupel of vectors the dot-product, so the argument number must be odd otherwise the action fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[D1|D2]=math/blas/vector(V1,V2,[V3,V4]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Dot_product&#34; /&gt;https://en.wikipedia.org/wiki/Dot_product&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/da/da0/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1vector_1_1CDotProduct.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/blas/vector/fromlist&#34;&gt;&lt;a href=&#34;#math/blas/vector/fromlist&#34;&gt;math/blas/vector/fromlist&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates a dense- or sparse-vector from a list. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;All input arguments will be converted to a dense or sparse vector, so the arguments must be lists of numbers, the last optional argument can be a string with &#34;dense | sparse&#34; to create dense or sparse structures, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[V1|V2]=math/blas/vector([1,2,3],[4,5,6],&#34;dense|sparse&#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d4/dec/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1vector_1_1CFromList.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/blas/vector/get&#34;&gt;&lt;a href=&#34;#math/blas/vector/get&#34;&gt;math/blas/vector/get&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns a single element of a vector. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action returns the values by the given index, first argument is the vector and all other values are the index values, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[X|Y|Z]=math/blas/vector/get(Vector,1,[4,5]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d3/d96/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1vector_1_1CGet.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/blas/vector/nonzero&#34;&gt;&lt;a href=&#34;#math/blas/vector/nonzero&#34;&gt;math/blas/vector/nonzero&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the number of non-zero cells. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Gets the number of non-zero cells on each vector input and returns the value, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[NZ1|NZ2]=math/blas/vector/nonzero(V1,V2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/df/d55/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1vector_1_1CNonZero.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/blas/vector/set&#34;&gt;&lt;a href=&#34;#math/blas/vector/set&#34;&gt;math/blas/vector/set&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;set a single element of a vector. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The first argument is the index, the second argument the value and all other arguments are vector objects, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;math/blas/vector/assign(3,5.3,Vector1,[Vector2,[Vector3]]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/de/d7f/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1vector_1_1CSet.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/blas/vector/sum&#34;&gt;&lt;a href=&#34;#math/blas/vector/sum&#34;&gt;math/blas/vector/sum&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns sum of a vector. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Calculates for each input vector the sum and returns the value, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[S1|S2]=math/blas/vector/sum(V1,V2);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d6/d37/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1vector_1_1CSum.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/blas/vector/tolist&#34;&gt;&lt;a href=&#34;#math/blas/vector/tolist&#34;&gt;math/blas/vector/tolist&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;converts a vector to a list. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action creates lists of each input vector, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[L1|L2|L3]=math/blas/vector/tolist(Vector1,[Vector2,Vector3]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d6/d16/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1vector_1_1CToList.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;/dl&gt;&lt;h2 id=&#34;math/interpolate&#34;&gt;math/interpolate&lt;/h2&gt;&lt;dl&gt;&lt;dt id=&#34;math/interpolate/create&#34;&gt;&lt;a href=&#34;#math/interpolate/create&#34;&gt;math/interpolate/create&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to create a spline interpolation. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action creates an interpolation object, the first is the type of interpolation (akima, divideddifference, linear, loess, neville), and all other number arguments are the the base values for interpolation, the first &lt;!-- htmlmin:ignore --&gt;$ \frac{n}{2} $&lt;!-- htmlmin:ignore --&gt; are x-values the other &lt;!-- htmlmin:ignore --&gt;$ \frac{n}{2} $&lt;!-- htmlmin:ignore --&gt; values are the y-values &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;PI=math/interpolate/create(&#34;akima|divideddifference|linear|loess|neville&#34;,[-5,1,2,8,14],[7,3,7,4,8]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Polynomial_interpolation&#34; /&gt;https://en.wikipedia.org/wiki/Polynomial_interpolation&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Divided_differences&#34; /&gt;https://en.wikipedia.org/wiki/Divided_differences&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Linear_interpolation&#34; /&gt;https://en.wikipedia.org/wiki/Linear_interpolation&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Local_regression&#34; /&gt;https://en.wikipedia.org/wiki/Local_regression&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Neville%27s_algorithm&#34; /&gt;https://en.wikipedia.org/wiki/Neville%27s_algorithm&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d1/d80/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1interpolate_1_1CCreate.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/interpolate/multipleinterpolate&#34;&gt;&lt;a href=&#34;#math/interpolate/multipleinterpolate&#34;&gt;math/interpolate/multipleinterpolate&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to create interpolated values. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action interpolates a single value, the first argument is the value (x-position), all other interpolating functions, the action never fails interpolation &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B|C]=math/interpolate/multipleinterpolate(5,InterpolatingFunction1,[InterpolatingFunction2,[InterpolatingFunction3]]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Polynomial_interpolation&#34; /&gt;https://en.wikipedia.org/wiki/Polynomial_interpolation&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d3/d6d/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1interpolate_1_1CMultipleInterpolate.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/interpolate/singleinterpolate&#34;&gt;&lt;a href=&#34;#math/interpolate/singleinterpolate&#34;&gt;math/interpolate/singleinterpolate&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to create interpolated values. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action interpolates values, the first argument is the interpolating function, all other number values (x-position) for interpolation &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B|C]=math/interpolate/singleinterpolate(InterpolatingFunction,3,[10,[50]]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Polynomial_interpolation&#34; /&gt;https://en.wikipedia.org/wiki/Polynomial_interpolation&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d3/d01/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1interpolate_1_1CSingleInterpolate.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;/dl&gt;&lt;h2 id=&#34;math/linearprogram&#34;&gt;math/linearprogram&lt;/h2&gt;&lt;dl&gt;&lt;dt id=&#34;math/linearprogram/create&#34;&gt;&lt;a href=&#34;#math/linearprogram/create&#34;&gt;math/linearprogram/create&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to create a linear program. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;This action creates the linear program with the objective functions &lt;!-- htmlmin:ignore --&gt;$ \left( \sum_{i=1} c_i \cdot x_i \right) + d $&lt;!-- htmlmin:ignore --&gt;, the first &lt;!-- htmlmin:ignore --&gt;$ n-1 $&lt;!-- htmlmin:ignore --&gt; arguments are the &lt;!-- htmlmin:ignore --&gt;$ c_i $&lt;!-- htmlmin:ignore --&gt; values (coefficients) and the last argument is the &lt;!-- htmlmin:ignore --&gt;$ d $&lt;!-- htmlmin:ignore --&gt; value (constant) of the objective function, the action is never failing &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;LP=math/linearprogram/create(1,2,[3,[4,5]],10);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Linear_programming&#34; /&gt;https://en.wikipedia.org/wiki/Linear_programming&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;http://commons.apache.org/proper/commons-math/userguide/optimization.html&#34; /&gt;http://commons.apache.org/proper/commons-math/userguide/optimization.html&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d1/db4/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1linearprogram_1_1CCreate.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/linearprogram/equationconstraint&#34;&gt;&lt;a href=&#34;#math/linearprogram/equationconstraint&#34;&gt;math/linearprogram/equationconstraint&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;add a linear equation constraint to the LP. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The arguments of the action contains the left and right side of the equation:&lt;ul&gt;&lt;li&gt;&lt;!-- htmlmin:ignore --&gt;$ \left( \sum_{i=1} c_i \cdot x_i \right) + c_{const} = \left( \sum_{i=1} r_i \cdot x_i \right) + r_{const} $&lt;!-- htmlmin:ignore --&gt;&lt;/li&gt;&lt;li&gt;&lt;!-- htmlmin:ignore --&gt;$ \left( \sum_{i=1} c_i \cdot x_i \right) + c_{const} \geq \left( \sum_{i=1} r_i \cdot x_i \right) + r_{const} $&lt;!-- htmlmin:ignore --&gt;&lt;/li&gt;&lt;li&gt;&lt;!-- htmlmin:ignore --&gt;$ \left( \sum_{i=1} c_i \cdot x_i \right) + c_{const} \leq \left( \sum_{i=1} r_i \cdot x_i \right) + r_{const} $&lt;!-- htmlmin:ignore --&gt;&lt;/li&gt;&lt;/ul&gt;The first arguments is the LP object, the following arguments are the &lt;!-- htmlmin:ignore --&gt;$ c_i $&lt;!-- htmlmin:ignore --&gt; values, after that the &lt;!-- htmlmin:ignore --&gt;$ c_{const} $&lt;!-- htmlmin:ignore --&gt; value must be added, in the middle of the arguments the relation symbol ( &lt;!-- htmlmin:ignore --&gt;$ = $&lt;!-- htmlmin:ignore --&gt;, &lt;!-- htmlmin:ignore --&gt;$ \geq $&lt;!-- htmlmin:ignore --&gt; or &lt;!-- htmlmin:ignore --&gt;$ \leq $&lt;!-- htmlmin:ignore --&gt;) must be set as string, after that all &lt;!-- htmlmin:ignore --&gt;$ r_i $&lt;!-- htmlmin:ignore --&gt; elements must be set and the last argument is the &lt;!-- htmlmin:ignore --&gt;$ r_{const} $&lt;!-- htmlmin:ignore --&gt;, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;math/linearprogram/equationconstraint(LP,[2,7,[7,12,[19]]],&#34;&lt;&#34;,[1,2],3,5)
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;Warning&lt;/dt&gt;&lt;dd&gt;the action throws an exception if the relation symbol is not found &lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Linear_programming&#34; /&gt;https://en.wikipedia.org/wiki/Linear_programming&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;http://commons.apache.org/proper/commons-math/userguide/optimization.html&#34; /&gt;http://commons.apache.org/proper/commons-math/userguide/optimization.html&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/df/da5/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1linearprogram_1_1CEquationConstraint.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/linearprogram/solve&#34;&gt;&lt;a href=&#34;#math/linearprogram/solve&#34;&gt;math/linearprogram/solve&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;solves the linear program and returns the solution. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action solves the linear program and returns the solution. The first argument is the linear program, all other arguments can be a number or a string with the definition:&lt;ul&gt;&lt;li&gt;maximize / minimize defines the optimization goal&lt;/li&gt;&lt;li&gt;non-negative defines all variables with non-negative values&lt;/li&gt;&lt;li&gt;number is the number of iteration for solving&lt;/li&gt;&lt;/ul&gt;The return arguments are at the first the value, second the number of all referenced &lt;!-- htmlmin:ignore --&gt;$ x_i $&lt;!-- htmlmin:ignore --&gt; points and after that all arguments the values of &lt;!-- htmlmin:ignore --&gt;$ x_i $&lt;!-- htmlmin:ignore --&gt; &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[Value|CountXi|Xi]=math/linearprogram/solve(LP,&#34;maximize&#34;,&#34;non-negative&#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Linear_programming&#34; /&gt;https://en.wikipedia.org/wiki/Linear_programming&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;http://commons.apache.org/proper/commons-math/userguide/optimization.html&#34; /&gt;http://commons.apache.org/proper/commons-math/userguide/optimization.html&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/de/d46/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1linearprogram_1_1CSolve.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/linearprogram/valueconstraint&#34;&gt;&lt;a href=&#34;#math/linearprogram/valueconstraint&#34;&gt;math/linearprogram/valueconstraint&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;add a linear value constraint to the LP. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action create a value constaint with one of the definitions:&lt;ul&gt;&lt;li&gt;&lt;!-- htmlmin:ignore --&gt;$ \sum_{i=1} c_i \cdot x_i = v $&lt;!-- htmlmin:ignore --&gt;&lt;/li&gt;&lt;li&gt;&lt;!-- htmlmin:ignore --&gt;$ \sum_{i=1} c_i \cdot x_i \geq v $&lt;!-- htmlmin:ignore --&gt;&lt;/li&gt;&lt;li&gt;&lt;!-- htmlmin:ignore --&gt;$ \sum_{i=1} c_i \cdot x_i \leq v $&lt;!-- htmlmin:ignore --&gt;&lt;/li&gt;&lt;/ul&gt;the first &lt;!-- htmlmin:ignore --&gt;$ n-2 $&lt;!-- htmlmin:ignore --&gt; arguments are the &lt;!-- htmlmin:ignore --&gt;$ c_i $&lt;!-- htmlmin:ignore --&gt;, the &lt;!-- htmlmin:ignore --&gt;$ n-1 $&lt;!-- htmlmin:ignore --&gt; argument ist the relation symbol ( &lt;!-- htmlmin:ignore --&gt;$ = $&lt;!-- htmlmin:ignore --&gt;, &lt;!-- htmlmin:ignore --&gt;$ \geq $&lt;!-- htmlmin:ignore --&gt; or &lt;!-- htmlmin:ignore --&gt;$ \leq $&lt;!-- htmlmin:ignore --&gt;) as string and the last value is the &lt;!-- htmlmin:ignore --&gt;$ v $&lt;!-- htmlmin:ignore --&gt; value and the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;math/linearprogram/valueconstaint(LP,[2,5,[7,8,[9]]],&#34;&lt;&#34;,100);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Linear_programming&#34; /&gt;https://en.wikipedia.org/wiki/Linear_programming&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;http://commons.apache.org/proper/commons-math/userguide/optimization.html&#34; /&gt;http://commons.apache.org/proper/commons-math/userguide/optimization.html&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d7/d6d/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1linearprogram_1_1CValueConstraint.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;/dl&gt;&lt;h2 id=&#34;math/shape&#34;&gt;math/shape&lt;/h2&gt;&lt;dl&gt;&lt;dt id=&#34;math/shape/incircle&#34;&gt;&lt;a href=&#34;#math/shape/incircle&#34;&gt;math/shape/incircle&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action check if a point is within a circle. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action checks if a point is within a circle, the first three arguments defines the circle (x- / y-position and radius), all other arguments will be used as tuples (x- / y-position) which defines the point, the action fails on wrong input &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[In1|In2]=math/shape/incircle(1,1,1,2,2.5,[3,4]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/dc/d5a/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1shape_1_1CInCircle.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/shape/inrectangle&#34;&gt;&lt;a href=&#34;#math/shape/inrectangle&#34;&gt;math/shape/inrectangle&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action check if a point within a rectangle. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The first four arguments descripes the rectangle (left-upper corner x- / y-postion, right-bottom corner x- / y-position), all other arguments will used as tuples with x- / y-position and will be checked to the rectangle, the action fail on wrong input &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[In1|In2]=math/shape/inrectangle(10,100,110,10,40,55,120,110);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/df/dee/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1shape_1_1CInRectangle.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/shape/intriangle&#34;&gt;&lt;a href=&#34;#math/shape/intriangle&#34;&gt;math/shape/intriangle&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action check if a point is within a triangle. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The first three tuple of arguments defines the triangle coordinate (x- / y-position), all other tuples are the tuples of x- / y-position, the action fails on wrong input &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[In1|In2]=math/shape/intriangle([[350,320],[25,375],40,55],[160,270],0,0);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Barycentric_coordinate_system&#34; /&gt;https://en.wikipedia.org/wiki/Barycentric_coordinate_system&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/df/d99/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1shape_1_1CInTriangle.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;/dl&gt;&lt;h2 id=&#34;math/statistic&#34;&gt;math/statistic&lt;/h2&gt;&lt;dl&gt;&lt;dt id=&#34;math/statistic/addstatisticvalue&#34;&gt;&lt;a href=&#34;#math/statistic/addstatisticvalue&#34;&gt;math/statistic/addstatisticvalue&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to push a values to the statistic object. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The actions adds the given argument number values to each statistic objects within the arguments, the ordering of values and statistic object is free, each value will be added to each statistic object and the action fails on a wrong input, only number and statistic objects are allowed &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;math/statistic/addstatisticvalue(StatisticObject1,[1,2,3,StatisticObject2],1,5,8,StatisticObject3);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d9/d8d/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1statistic_1_1CAddStatisticValue.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/statistic/clearstatistic&#34;&gt;&lt;a href=&#34;#math/statistic/clearstatistic&#34;&gt;math/statistic/clearstatistic&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to clears the statistic. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The actions clears statistic objects, so all arguments must be statistic objects &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;math/statistic/clearstatistic(Statistic1,[Statistic2,[Statistic3]]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/de/d8e/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1statistic_1_1CClearStatistic.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/statistic/createdistribution&#34;&gt;&lt;a href=&#34;#math/statistic/createdistribution&#34;&gt;math/statistic/createdistribution&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates a distribution object. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action creates a distribution objects, with an individual pseudo-random generator and different distribution paramter, the action never fails, the following distributions are supported with the following number of numeric arguments&lt;ul&gt;&lt;li&gt;beta distribution with 2 arguments ( &lt;!-- htmlmin:ignore --&gt;$ \alpha $&lt;!-- htmlmin:ignore --&gt; and &lt;!-- htmlmin:ignore --&gt;$ \beta $&lt;!-- htmlmin:ignore --&gt;)&lt;/li&gt;&lt;li&gt;cauchy distribution with 2 arguments (media and scale)&lt;/li&gt;&lt;li&gt;chi-square distribution with 1 argument (degree off freedom)&lt;/li&gt;&lt;li&gt;exponential distribution with 1 argument (mean)&lt;/li&gt;&lt;li&gt;f distribution with 2 arguments (degrees of freedom, denominator degrees of freedom)&lt;/li&gt;&lt;li&gt;gamma distribution with 2 arguments (shape and scale)&lt;/li&gt;&lt;li&gt;gumble distribution with 2 arguments ( &lt;!-- htmlmin:ignore --&gt;$ \mu $&lt;!-- htmlmin:ignore --&gt; and &lt;!-- htmlmin:ignore --&gt;$ \beta $&lt;!-- htmlmin:ignore --&gt;)&lt;/li&gt;&lt;li&gt;laplace distirbution with 2 arguments ( &lt;!-- htmlmin:ignore --&gt;$ \mu $&lt;!-- htmlmin:ignore --&gt; and &lt;!-- htmlmin:ignore --&gt;$ \beta $&lt;!-- htmlmin:ignore --&gt;)&lt;/li&gt;&lt;li&gt;levy distirbution with 2 arguments ( &lt;!-- htmlmin:ignore --&gt;$ \mu $&lt;!-- htmlmin:ignore --&gt; and &lt;!-- htmlmin:ignore --&gt;$ c $&lt;!-- htmlmin:ignore --&gt;)&lt;/li&gt;&lt;li&gt;logistic distirbution with 2 arguments ( &lt;!-- htmlmin:ignore --&gt;$ \mu $&lt;!-- htmlmin:ignore --&gt; and &lt;!-- htmlmin:ignore --&gt;$ s $&lt;!-- htmlmin:ignore --&gt;)&lt;/li&gt;&lt;li&gt;lognormal distirbution with 2 arguments (scale and shape)&lt;/li&gt;&lt;li&gt;nakagami distribution with 2 arguments ( &lt;!-- htmlmin:ignore --&gt;$ \mu $&lt;!-- htmlmin:ignore --&gt; and &lt;!-- htmlmin:ignore --&gt;$ \omega $&lt;!-- htmlmin:ignore --&gt;)&lt;/li&gt;&lt;li&gt;normal distribution with 2 arguments (expected value, variance)&lt;/li&gt;&lt;li&gt;pareto distribution with 2 arguments (scale and shape)&lt;/li&gt;&lt;li&gt;t distribution with 1 argument (degrees of freedom)&lt;/li&gt;&lt;li&gt;triangular distribution with 3 arguments (a, b, c)&lt;/li&gt;&lt;li&gt;uniform distribution with 2 arguments (lower and upper)&lt;/li&gt;&lt;li&gt;weibull distribution with 2 arguments ( &lt;!-- htmlmin:ignore --&gt;$ \alpha $&lt;!-- htmlmin:ignore --&gt; and &lt;!-- htmlmin:ignore --&gt;$ \beta $&lt;!-- htmlmin:ignore --&gt;)&lt;/li&gt;&lt;/ul&gt;The following pseudo-random number generators are supported:&lt;ul&gt;&lt;li&gt;mersennetwister (default)&lt;/li&gt;&lt;li&gt;synchronizedmersennetwister&lt;/li&gt;&lt;li&gt;isaac&lt;/li&gt;&lt;li&gt;synchronizedisaac&lt;/li&gt;&lt;li&gt;internal&lt;/li&gt;&lt;li&gt;synchronizedinternal&lt;/li&gt;&lt;li&gt;well512a&lt;/li&gt;&lt;li&gt;synchronizedwell512a&lt;/li&gt;&lt;li&gt;well1024a&lt;/li&gt;&lt;li&gt;synchronizedwell1024a&lt;/li&gt;&lt;li&gt;well19937a&lt;/li&gt;&lt;li&gt;synchronizedwell19937a&lt;/li&gt;&lt;li&gt;well19937c&lt;/li&gt;&lt;li&gt;synchronizedwell19937c&lt;/li&gt;&lt;li&gt;well4449a&lt;/li&gt;&lt;li&gt;synchronizedwell4449a&lt;/li&gt;&lt;li&gt;well44497b&lt;/li&gt;&lt;li&gt;synchronizedwell44497b&lt;/li&gt;&lt;/ul&gt; &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[D1|D2]=math/statistic/createdistribution(&#34;normal&#34;,20,10,[&#34;beta&#34;,&#34;isaac&#34;,[8,12]]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Beta_distribution&#34; /&gt;https://en.wikipedia.org/wiki/Beta_distribution&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Cauchy_distribution&#34; /&gt;https://en.wikipedia.org/wiki/Cauchy_distribution&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Chi-squared_distribution&#34; /&gt;https://en.wikipedia.org/wiki/Chi-squared_distribution&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Exponential_distribution&#34; /&gt;https://en.wikipedia.org/wiki/Exponential_distribution&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/F-distribution&#34; /&gt;https://en.wikipedia.org/wiki/F-distribution&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Gamma_distribution&#34; /&gt;https://en.wikipedia.org/wiki/Gamma_distribution&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Gumbel_distribution&#34; /&gt;https://en.wikipedia.org/wiki/Gumbel_distribution&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/L%C3%A9vy_distribution&#34; /&gt;https://en.wikipedia.org/wiki/L%C3%A9vy_distribution&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Logistic_distribution&#34; /&gt;https://en.wikipedia.org/wiki/Logistic_distribution&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Log-normal_distribution&#34; /&gt;https://en.wikipedia.org/wiki/Log-normal_distribution&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Nakagami_distribution&#34; /&gt;https://en.wikipedia.org/wiki/Nakagami_distribution&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Normal_distribution&#34; /&gt;https://en.wikipedia.org/wiki/Normal_distribution&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Pareto_distribution&#34; /&gt;https://en.wikipedia.org/wiki/Pareto_distribution&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Student%27s_t-distribution&#34; /&gt;https://en.wikipedia.org/wiki/Student%27s_t-distribution&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Triangular_distribution&#34; /&gt;https://en.wikipedia.org/wiki/Triangular_distribution&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Uniform_distribution_%28continuous%29&#34; /&gt;https://en.wikipedia.org/wiki/Uniform_distribution_(continuous)&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Weibull_distribution&#34; /&gt;https://en.wikipedia.org/wiki/Weibull_distribution&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d0/d8f/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1statistic_1_1CCreateDistribution.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/statistic/createstatistic&#34;&gt;&lt;a href=&#34;#math/statistic/createstatistic&#34;&gt;math/statistic/createstatistic&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to create a statistic. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action creates statistic objects to collect data, each argument must be a string with &#34;summary&#34; or &#34;descriptive&#34; for a summary or descriptive statistic object, on no arguments a summary statistic object is created, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[S1|S2]=math/statistic/createstaistic(&#34;summary&#34;,[&#34;descriptive&#34;]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;http://commons.apache.org/proper/commons-math/userguide/stat.html&#34; /&gt;http://commons.apache.org/proper/commons-math/userguide/stat.html&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/de/d2f/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1statistic_1_1CCreateStatistic.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/statistic/exponentialselection&#34;&gt;&lt;a href=&#34;#math/statistic/exponentialselection&#34;&gt;math/statistic/exponentialselection&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to define a fitness-proportinate-selection mechanism. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action defines a fitness-proportinate-selection based on an exponential distribution, the first and second argument must be a list, the first list contains elements, the second list contains numeric values for defining the weights, the third argument is the demand / rational factor &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;S=math/statistic/exponentialselection([&#34;a&#34;,&#34;b&#34;,&#34;c&#34;,&#34;d&#34;],[0.5,0.7,0.9,3],RationalFactor);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Boltzmann_distribution&#34; /&gt;https://en.wikipedia.org/wiki/Boltzmann_distribution&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Log-linear_model&#34; /&gt;https://en.wikipedia.org/wiki/Log-linear_model&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d2/dec/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1statistic_1_1CExponentialSelection.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/statistic/linearselection&#34;&gt;&lt;a href=&#34;#math/statistic/linearselection&#34;&gt;math/statistic/linearselection&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to define a exponential fitness-proportinate-selection mechanism. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action defines a fitness-proportinate-selection based on a linear distribution, the first and second argument must be a list, the first list contains elements, the second list contains numeric values for defining the weights &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;S=math/statistic/linearselection(RationalFactor,[&#34;a&#34;,&#34;b&#34;,&#34;c&#34;,&#34;d&#34;],[0.5,0.7,0.9,3]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Fitness_proportionate_selection&#34; /&gt;https://en.wikipedia.org/wiki/Fitness_proportionate_selection&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/df/db2/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1statistic_1_1CLinearSelection.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/statistic/multiplestatisticvalue&#34;&gt;&lt;a href=&#34;#math/statistic/multiplestatisticvalue&#34;&gt;math/statistic/multiplestatisticvalue&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;gets multiple statistic values of a single statistic object. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action returns different statistic values from a single statistic object, the first argument is the statistic object, all other values are string with statistic value names: geometricmean, max, min, count, populationvariance, quadraticmean, secondmoment, standarddeviation, sum, sumlog, sumsquare, variance, mean, kurtiosis &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[SStd|SVar|SMean]=math/statistic/multiplestatisticvalue(Statistic,&#34;standarddeviation&#34;,&#34;variance&#34;,&#34;mean&#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/df/dea/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1statistic_1_1CMultipleStatisticValue.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/statistic/randomsample&#34;&gt;&lt;a href=&#34;#math/statistic/randomsample&#34;&gt;math/statistic/randomsample&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;create a (set) of random values. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action creates a set or single random value based on a distirbution, the first argument is the distirbution and all other arguments defines the size of the samples &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[R1|R2]=math/statistic/randomsample(Distribution,1,5);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d2/d98/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1statistic_1_1CRandomSample.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/statistic/randomsimple&#34;&gt;&lt;a href=&#34;#math/statistic/randomsimple&#34;&gt;math/statistic/randomsimple&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;create a (set) of simple random values. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Returns single or a list of random (uniform distributed) values, all arguments are the number of returning values, if the argument number is 1 a single random value is returned, is the number greater than 1 a list of values is returned &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[V1|L1|V2|L2]=math/statistic/randomsimple(1,5,1,10);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d5/d37/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1statistic_1_1CRandomSimple.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;math/statistic/singlestatisticvalue&#34;&gt;&lt;a href=&#34;#math/statistic/singlestatisticvalue&#34;&gt;math/statistic/singlestatisticvalue&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;gets a single statistic value of multiple statistic objects. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action returns for each statistic object the statistic value, the first argument is a string with the statitic value name (geometricmean, max, min, count, populationvariance, quadraticmean, secondmoment, standarddeviation, sum, sumlog, sumsquare, variance, mean, kurtiosis) all other arguments are statistic objects &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[V1|V2|V3]=math/statistic/getstatisticvalue(&#34;mean|min|max|...&#34;,Statistic1,[Statistic2,Statistic3]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d1/dd6/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1statistic_1_1CSingleStatisticValue.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;/dl&gt;&lt;h2 id=&#34;rest&#34;&gt;rest&lt;/h2&gt;&lt;dl&gt;&lt;dt id=&#34;rest/jsonlist&#34;&gt;&lt;a href=&#34;#rest/jsonlist&#34;&gt;rest/jsonlist&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for calling a restful webservice with a JSON object list. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Creates a literal based on an JSON webservice data, the first argument is the URL of the webservice, all other arguments are the literal elements of the returning literal, the webservice must return a JSON list and the last argument will used to encapsulate the list elements &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;W=rest/jsonlist(&#34;https://api.github.com/repos/LightJason/AgentSpeak/commits&#34;,&#34;github&#34;,&#34;elements&#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Representational_state_transfer&#34; /&gt;https://en.wikipedia.org/wiki/Representational_state_transfer&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Web_service&#34; /&gt;https://en.wikipedia.org/wiki/Web_service&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/JSON&#34; /&gt;https://en.wikipedia.org/wiki/JSON&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/db/d28/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1rest_1_1CJsonList.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;rest/jsonobject&#34;&gt;&lt;a href=&#34;#rest/jsonobject&#34;&gt;rest/jsonobject&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for calling a restful webservice with a JSON object. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Creates a literal based on an JSON webservice data, the first argument is the URL of the webservice, all other arguments are the literal elements of the returning literal, the webservice must return a JSON object &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;W=rest/jsonobject(&#34;https://maps.googleapis.com/maps/api/geocode/json?address=Clausthal-Zellerfeld&#34;,&#34;google&#34;,&#34;location&#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Representational_state_transfer&#34; /&gt;https://en.wikipedia.org/wiki/Representational_state_transfer&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Web_service&#34; /&gt;https://en.wikipedia.org/wiki/Web_service&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/JSON&#34; /&gt;https://en.wikipedia.org/wiki/JSON&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d6/d4e/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1rest_1_1CJsonObject.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;rest/xmlobject&#34;&gt;&lt;a href=&#34;#rest/xmlobject&#34;&gt;rest/xmlobject&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to call a restful webservice with XML data. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Creates a literal from an XML REST-webservice, first argument is the URL of the webservice and second argument the functor of the literal &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;W=rest/xmlobject(&#34;https://en.wikipedia.org/wiki/Special:Export/AgentSpeak&#34;,&#34;wikipedia&#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Representational_state_transfer&#34; /&gt;https://en.wikipedia.org/wiki/Representational_state_transfer&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Web_service&#34; /&gt;https://en.wikipedia.org/wiki/Web_service&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/XML&#34; /&gt;https://en.wikipedia.org/wiki/XML&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d3/d0e/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1rest_1_1CXMLObject.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;/dl&gt;&lt;h2 id=&#34;storage&#34;&gt;storage&lt;/h2&gt;&lt;dl&gt;&lt;dt id=&#34;storage/add&#34;&gt;&lt;a href=&#34;#storage/add&#34;&gt;storage/add&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;adds or overwrites an element in the agent-storage. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action adds all tuples into the storage, the arguments are tuples of a name and any value, if the key is forbidden or the arguments number is odd, the action fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;storage/add(&#34;foo&#34;,X,&#34;bar&#34;,Y);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d3/d5b/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1storage_1_1CAdd.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;storage/clear&#34;&gt;&lt;a href=&#34;#storage/clear&#34;&gt;storage/clear&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;removes all elements of the storage. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action removes all elements from the storage except the elements wich are forbidden, the action, never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;storage/clear();
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/df/d3d/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1storage_1_1CClear.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;storage/exists&#34;&gt;&lt;a href=&#34;#storage/exists&#34;&gt;storage/exists&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;check if an element exists within the agent-storage. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action checks if an element is within the action and returns the boolean flag, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B]=storage/exist(&#34;foo&#34;,&#34;bar&#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/de/db1/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1storage_1_1CExists.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;storage/remove&#34;&gt;&lt;a href=&#34;#storage/remove&#34;&gt;storage/remove&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;removes an element by name from the storage. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The actions removes any value from the storage which is referenced by the key and returns the value, the action fails on forbidden key or non exisiting elements &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B]=storage/remove(&#34;foo&#34;,&#34;bar&#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/dd/dd6/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1storage_1_1CRemove.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;/dl&gt;&lt;h2 id=&#34;string&#34;&gt;string&lt;/h2&gt;&lt;dl&gt;&lt;dt id=&#34;string/base64decode&#34;&gt;&lt;a href=&#34;#string/base64decode&#34;&gt;string/base64decode&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to decodes a string with Base64. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Creates from each string argument, which is based64 encoded the decoded string version, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B]=generic/string/base64decode(&#34;aGVsbG8=&#34;,&#34;QWdlbnRTcGVhayhMKysp&#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;Note&lt;/dt&gt;&lt;dd&gt;return null on encoding errors &lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Base64&#34; /&gt;https://en.wikipedia.org/wiki/Base64&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d8/d0f/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1string_1_1CBase64Decode.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;string/base64encode&#34;&gt;&lt;a href=&#34;#string/base64encode&#34;&gt;string/base64encode&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to encodes a string with Base64. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Creates from each string argument the base64 encoded version, the action fails on encoding errors &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B]=generic/string/base64encode(&#34;Hello&#34;,&#34;AgentSpeak(L++)&#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Base64&#34; /&gt;https://en.wikipedia.org/wiki/Base64&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d3/dec/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1string_1_1CBase64Encode.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;string/concat&#34;&gt;&lt;a href=&#34;#string/concat&#34;&gt;string/concat&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to concat / join all strings. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;All string arguments will be join to a single result, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;S=generic/string/concat(&#34;A&#34;,&#34;B&#34;,&#34;C&#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d7/d3b/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1string_1_1CConcat.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;string/contains&#34;&gt;&lt;a href=&#34;#string/contains&#34;&gt;string/contains&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to check string for containing another string. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action checks the first string argument if it contains all other arguments, but it returns the boolean result for each argument, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[L1|L2]=generic/string/contains(&#34;thisisalongstring&#34;,&#34;long&#34;,&#34;string&#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d9/de1/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1string_1_1CContains.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;string/endswith&#34;&gt;&lt;a href=&#34;#string/endswith&#34;&gt;string/endswith&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to check string for ends-with. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The acion checks the string, that is the first argument, with each other arguments for the operation ends-with, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[L1|L2]=generic/string/endswith(&#34;thisisalongstring&#34;,&#34;longstring&#34;,&#34;string&#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/de/d65/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1string_1_1CEndsWith.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;string/levenshtein&#34;&gt;&lt;a href=&#34;#string/levenshtein&#34;&gt;string/levenshtein&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;calculates the levenshtein distance. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action returns the levenshtein distance between string inputs, for the first string argument the distance will be calculated to the rest, if there are numerical arguments the first will be used for the inserting weight, second replace weight and third for the delete weight, the action fails on wrong input &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B]=string/levenshtein(1,1.5,3,&#34;start&#34;,&#34;end&#34;,&#34;starting&#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Levenshtein_distance&#34; /&gt;https://en.wikipedia.org/wiki/Levenshtein_distance&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d2/d91/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1string_1_1CLevenshtein.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;string/lower&#34;&gt;&lt;a href=&#34;#string/lower&#34;&gt;string/lower&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to create a lower-case string. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;All arguments of the action will change to a lower-case string and the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B|C|D]=generic/string/lower(&#34;AbC&#34;,&#34;Ef&#34;,[&#34;de&#34;,&#34;XyZ&#34;]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d2/d64/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1string_1_1CLower.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;string/ncd&#34;&gt;&lt;a href=&#34;#string/ncd&#34;&gt;string/ncd&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;calculates the normalized-compression-distance. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action calculates the normalized-compression-distance between string, if the first argument matches a compression algorithm ( BZIP | GZIP | DEFLATE | PACK200 | XZ ), it will be used for defining the compression, the next string argument will be the input string and the distances will be calculated between the first and all other arguments, the action fails on wrong input &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B]=string/ncd(&#34;BZIP|GZIP|DEFLATE|PACK200|XZ&#34;,&#34;foobar&#34;,&#34;testfoo&#34;,&#34;barfoo&#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Normalized_compression_distance&#34; /&gt;https://en.wikipedia.org/wiki/Normalized_compression_distance&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d4/db3/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1string_1_1CNCD.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;string/random&#34;&gt;&lt;a href=&#34;#string/random&#34;&gt;string/random&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to create random strings, with a definied length. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The first argument are the characters, that will be used to create the string, all other arguments are numbers to present the length of the returning string and the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B|C]=generic/string/random(&#34;abdefgXYZUI&#34;,5,3,6);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d6/d0e/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1string_1_1CRandom.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;string/replace&#34;&gt;&lt;a href=&#34;#string/replace&#34;&gt;string/replace&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to replace all occurence within a string. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action replaces the first argument with the second argument on each string beginning at the third argument and returns all replaced strings, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B]=string/replace(&#34;search&#34;,&#34;replacewith&#34;,&#34;thisisasearchstring&#34;,&#34;thisisanotherstring&#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;Note&lt;/dt&gt;&lt;dd&gt;the first argument of the action be defined as a regular expression &lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Regular_expression&#34; /&gt;https://en.wikipedia.org/wiki/Regular_expression&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d6/daa/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1string_1_1CReplace.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;string/reverse&#34;&gt;&lt;a href=&#34;#string/reverse&#34;&gt;string/reverse&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to reverse a string. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action reverse each argument string and returns the reversed string, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B|C]=generic/string/reverse(&#34;FooBar&#34;,[&#34;ABBA&#34;,&#34;Eevee&#34;]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d2/d07/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1string_1_1CReverse.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;string/size&#34;&gt;&lt;a href=&#34;#string/size&#34;&gt;string/size&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to get the string length. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;For each argument the string length will be returned and the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B|C]=generic/string/size(&#34;A&#34;,[&#34;CC&#34;,&#34;XYZ&#34;]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d4/dbe/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1string_1_1CSize.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;string/startswith&#34;&gt;&lt;a href=&#34;#string/startswith&#34;&gt;string/startswith&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to check string for starts-with. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The acion checks the string, that is the first argument, with each other arguments for the operation starts-with, the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[L1|L2]=generic/string/startswith(&#34;thisisalongstring&#34;,&#34;longstring&#34;,&#34;string&#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/dc/d05/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1string_1_1CStartsWith.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;&lt;dt id=&#34;string/upper&#34;&gt;&lt;a href=&#34;#string/upper&#34;&gt;string/upper&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to create an upper-case string. &lt;dl class=&#34;tooltipcontent&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;All arguments of the action will change to a upper-case string and the action never fails &lt;!-- htmlmin:ignore --&gt;&lt;pre&gt;&lt;code&gt;[A|B|C|D]=generic/string/upper(&#34;AbC&#34;,&#34;Ef&#34;,[&#34;de&#34;,&#34;XYZ&#34;]);
&lt;/code&gt;&lt;/pre&gt;&lt;!-- htmlmin:ignore --&gt;&lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/db/d88/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1string_1_1CUpper.html&#34;&gt;Source Code&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;
</description>
    </item>
    
    <item>
      <title>Basic Knowledge: Finite-State-Machine</title>
      <link>https://lightjason.github.io/knowledgebase/finitestatemachine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lightjason.github.io/knowledgebase/finitestatemachine/</guid>
      <description>

&lt;h2 id=&#34;state-machine&#34;&gt;State Machine&lt;/h2&gt;

&lt;p&gt;A &lt;a href=&#34;https://en.wikipedia.org/wiki/Finite-state_machine&#34;&gt;Finite-State-Machine&lt;/a&gt; is a system with explicit defined states and transitions between the states with the following syntax:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a &lt;strong&gt;state&lt;/strong&gt; is presented by a circle and defines a &lt;em&gt;stable execution point&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;a &lt;strong&gt;final state&lt;/strong&gt; is defined by a circle with a &lt;em&gt;double outline&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;the state-machine defines a single &lt;strong&gt;initial state&lt;/strong&gt; with a triangle&lt;/li&gt;
&lt;li&gt;a &lt;strong&gt;transition&lt;/strong&gt; is presented by an arrow which starts in a state and ends in a state. A transition symbols a an active execution call like a function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mostly within a state the state-name is documented, also the arrow of a transition can be used for documentation.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This example show a similar state-machine with three states, that runs from the &lt;em&gt;initial state&lt;/em&gt; to a &lt;em&gt;final state&lt;/em&gt; (left to right). This example shows the &lt;em&gt;static structure&lt;/em&gt; of the state machine, so there is no runtime information with in the illustration
&lt;img src=&#34;https://lightjason.github.io/images/fsm1.svg#centering&#34; alt=&#34;finite-state-machine&#34; style=&#34;width: 30%; &#34;/&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;usage-and-example&#34;&gt;Usage and Example&lt;/h3&gt;

&lt;p&gt;State-Machine are an useful tool to describe &lt;a href=&#34;https://en.wikipedia.org/wiki/Regular_expression&#34;&gt;regular expressions&lt;/a&gt; and we would like to motivate this concept for explaining the functional principle:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The main goal is to create a system, which can check strings that matchs the following criteria:
The strings starts with an arbitrary  sequence of the letter &lt;code&gt;a&lt;/code&gt; or &lt;code&gt;b&lt;/code&gt; (the sequence can be empty).
After the initial sequence follows a positiv number which depends on any digit.
The end of the digit sequence is a sequence of the letter &lt;code&gt;x&lt;/code&gt; with two letters at minimum. All letters within this string can be lower- or upper-case. Some valid example sequences: &lt;code&gt;ab1x&lt;/code&gt;, &lt;code&gt;aaaaabbb169XXX&lt;/code&gt;, &lt;code&gt;AaAabbBB972xXxXXXX&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Most programming languages defines such regular expression in a &lt;a href=&#34;https://en.wikipedia.org/wiki/Regular_expression#Perl&#34;&gt;perl notation&lt;/a&gt; or &lt;a href=&#34;https://en.wikipedia.org/wiki/Regular_expression#POSIX_basic_and_extended&#34;&gt;posix notation&lt;/a&gt;. We use for the example the posix notation which is defined as:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;(a|A|b|B)*  [0-9]+  (x|X){2,}&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The first block &lt;code&gt;(a|A|b|B)*&lt;/code&gt; defines the different letters and the &lt;code&gt;|&lt;/code&gt; defines the &lt;em&gt;or&lt;/em&gt;-Operator. At the end the &lt;code&gt;*&lt;/code&gt;-operator defines $\geq 0$ elements.&lt;/li&gt;
&lt;li&gt;The second block &lt;code&gt;[0-9]+&lt;/code&gt; defines &lt;em&gt;all elements between 0 and 9&lt;/em&gt; and the &lt;code&gt;+&lt;/code&gt;-operator sets the number of elements $\geq 1$&lt;/li&gt;
&lt;li&gt;The third block &lt;code&gt;(x|X){2,}&lt;/code&gt; defines similar to the first both letter cases and the &lt;code&gt;{2,}&lt;/code&gt; defines the number of elements with $\geq 2$&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Based on this definition it is possible to define a state machine, which can check if  the string matchs the given structure. On the runtime the string is read character by character and based on the state machine a transition will be found, which matchs the character.&lt;/p&gt;

&lt;h2 id=&#34;petri-net&#34;&gt;Petri Net&lt;/h2&gt;

&lt;p&gt;Based on the static information of the state machine it can be extend to a &lt;a href=&#34;https://en.wikipedia.org/wiki/Petri_net&#34;&gt;petri net&lt;/a&gt;, which allows to a runtime behaviour. The concept of such a petri net is used to describe an agent during runtime.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Basic Knowledge: From Finite-State-Machine and Logical Programming to an Agent</title>
      <link>https://lightjason.github.io/knowledgebase/agent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lightjason.github.io/knowledgebase/agent/</guid>
      <description>

&lt;script src=&#34;https://lightjason.github.io/js/agentfsm.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;The main definition of our &lt;a href=&#34;https://en.wikipedia.org/wiki/Belief%E2%80%93desire%E2%80%93intention_software_model&#34;&gt;BDI (Belief-Desire-Intention) framework&lt;/a&gt; follows &lt;a href=&#34;http://aima.cs.berkeley.edu/&#34;&gt;Russell &amp;amp; Norvig - Artificial Intelligence: A Modern Approach&lt;/a&gt; with the structure of &lt;em&gt;goal-based agents&lt;/em&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An agent is anything that can be viewed as perceiving its environment through sensors and acting upon that environment through effectors &lt;em&gt;(Chapter 2.1, page 31)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We are defining furthermore along the book of &lt;a href=&#34;http://www.cs.ox.ac.uk/people/michael.wooldridge/pubs/imas/IMAS2e.html&#34;&gt;Michael Wooldrige - An Introduction to MultiAgent Systems&lt;/a&gt; &lt;em&gt;(chapter 2.1, page 26)&lt;/em&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Reactivity:&lt;/em&gt; Intelligent agents are able to perceive their environment, and respond in a timely fashion to changes that occur in it in order to satisfy their design objectives&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Proactiveness:&lt;/em&gt; Intelligent agents are able to exhibit goal-directed behaviour by talking the initiative in order to satisfy their design objectives&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Social ability:&lt;/em&gt; Intelligent agents are capable of interacting with other agents (and possible humans) in order to satisfy their design objectives&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;The technical execution structure of the agent uses the concepts of &lt;a href=&#34;https://en.wikipedia.org/wiki/Procedural_reasoning_system&#34;&gt;PRS (Procedural Reasoning System)&lt;/a&gt; and architecture of &lt;a href=&#34;https://en.wikipedia.org/wiki/Distributed_multi-agent_reasoning_system&#34;&gt;dMARS (Distributed Multi-Agent Reasoning System)&lt;/a&gt;, so we are definiting the agent as a &lt;a href=&#34;finitestatemachine&#34;&gt;Finite-State-Machine&lt;/a&gt; in a &lt;a href=&#34;logicalprogramming&#34;&gt;Logical Programming language&lt;/a&gt; with the following definition:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the &lt;strong&gt;initial state&lt;/strong&gt; is optionally defined with the &lt;em&gt;initial goal&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;a &lt;strong&gt;state&lt;/strong&gt; is a set of beliefs if a cycle is not running&lt;/li&gt;
&lt;li&gt;a &lt;strong&gt;transition&lt;/strong&gt; is the execution of a plan (with instantiation of a goal) and is limited by the &lt;em&gt;plan condition&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But in general, in parallel execution of plans there can be many active transition in one cycle.
We also focus on the definition of &lt;em&gt;M. Wooldrige&lt;/em&gt;, stating that&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;a multi-agent system is inherently multithreaded, in that each agent is assumed to have at least on thread of control &lt;em&gt;(chapter 2.2, page 30)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;basic-behaviour&#34;&gt;Basic Behaviour&lt;/h2&gt;

&lt;p&gt;This basic example shows the main functionality of the structure. We define the structure of three plans without a condition and an &lt;em&gt;initial goal&lt;/em&gt;. The &lt;em&gt;initial goal (&lt;code&gt;main&lt;/code&gt;)&lt;/em&gt; calls two other plans &lt;code&gt;first&lt;/code&gt; and &lt;code&gt;second&lt;/code&gt; within the next cycle. The &lt;code&gt;first&lt;/code&gt; plan will call itself within the following cycles (loop structure) and the &lt;code&gt;second&lt;/code&gt; plan calls the &lt;em&gt;initial goal&lt;/em&gt; plan.  The &lt;code&gt;first&lt;/code&gt; plan will be called once in each cycle, because the trigger &lt;code&gt;!first&lt;/code&gt; and the plan &lt;code&gt;+!first&lt;/code&gt; match. Note: The plans &lt;code&gt;first&lt;/code&gt; and &lt;code&gt;main&lt;/code&gt; or &lt;code&gt;second&lt;/code&gt; run in parallel.&lt;/p&gt;

&lt;!-- htmlmin:ignore --&gt;

&lt;p&gt;&lt;pre data-language=&#34;AgentSpeak(L++)&#34;&gt;&lt;code class=&#34;language-agentspeak&#34;&gt;!main.
+!main &amp;lt;- !first; !second.
+!first &amp;lt;- !first.
+!second &amp;lt;- !main.
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- htmlmin:ignore --&gt;&lt;/p&gt;

&lt;p&gt;The state-machine of this agent which executes empty plans is shown in the following picture.&lt;/p&gt;

&lt;p&gt;&lt;svg id=&#34;agentfsm&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;71 51 490 248&#34;&gt;&lt;defs&gt;&lt;style&gt;@keyframes colorchange { 0%{ fill: white; } 50%{ fill: blue; } 100%{ fill: white; } } tspan { font-family: sans-serif; fill: black; }&lt;/style&gt;&lt;marker orient=&#34;auto&#34; overflow=&#34;visible&#34; id=&#34;a&#34; viewBox=&#34;-1 -4 10 8&#34; markerWidth=&#34;10&#34; markerHeight=&#34;8&#34; color=&#34;#000&#34;&gt;&lt;path d=&#34;M8 0L0-3v6z&#34; fill=&#34;currentColor&#34; stroke=&#34;currentColor&#34;/&gt;&lt;/marker&gt;&lt;marker orient=&#34;auto&#34; overflow=&#34;visible&#34; id=&#34;b&#34; viewBox=&#34;-9 -4 10 8&#34; markerWidth=&#34;10&#34; markerHeight=&#34;8&#34; color=&#34;#000&#34;&gt;&lt;path d=&#34;M-8 0l8 3v-6z&#34; fill=&#34;currentColor&#34; stroke=&#34;currentColor&#34;/&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;g fill=&#34;none&#34;&gt;&lt;circle class=&#34;state&#34; cx=&#34;130.5&#34; cy=&#34;121.5&#34; r=&#34;22.5&#34;/&gt;&lt;circle id=&#34;init&#34; cx=&#34;130.5&#34; cy=&#34;121.5&#34; r=&#34;22.5&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;path d=&#34;M82.5 109.5l25.5 12.75L82.5 135z&#34; fill=&#34;#fff&#34;/&gt;&lt;path d=&#34;M82.5 109.5l25.5 12.75L82.5 135z&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;circle class=&#34;state&#34; cx=&#34;292.5&#34; cy=&#34;121.5&#34; r=&#34;22.5&#34;/&gt;&lt;circle id=&#34;main&#34; cx=&#34;292.5&#34; cy=&#34;121.5&#34; r=&#34;22.5&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;circle class=&#34;state&#34; cx=&#34;434.376&#34; cy=&#34;121.5&#34; r=&#34;22.5&#34;/&gt;&lt;circle id=&#34;first&#34; cx=&#34;434.376&#34; cy=&#34;121.5&#34; r=&#34;22.5&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;circle class=&#34;state&#34; cx=&#34;355.5&#34; cy=&#34;265.5&#34; r=&#34;22.5&#34;/&gt;&lt;circle id=&#34;second&#34; cx=&#34;355.5&#34; cy=&#34;265.5&#34; r=&#34;22.5&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;path marker-end=&#34;url(#a)&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M153 121.5h107.1m54.9 0h86.976m-89.208 9.784c15.854 9.18 36.886 25.068 47.232 48.716 8.308 18.99 7.907 38.826 5.104 54.606&#34;/&gt;&lt;path d=&#34;M282.896 152.394c-2.803 15.78-3.204 35.617 5.104 54.606 10.346 23.648 31.378 39.537 47.232 48.716&#34; marker-start=&#34;url(#b)&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;path d=&#34;M448.939 104.346C464.217 87.377 488.17 63.813 504 63c24.824-1.275 37.725 37.427 18 54-10.586 8.895-35.047 9.538-55.441 8.225&#34; marker-end=&#34;url(#a)&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;path fill=&#34;#fff&#34; d=&#34;M177.515 106.5h49v30h-49z&#34;/&gt;&lt;text transform=&#34;translate(182.515 112.276)&#34;&gt;&lt;tspan x=&#34;.084&#34; y=&#34;15&#34; textLength=&#34;38.832&#34;&gt;!main&lt;/tspan&gt;&lt;/text&gt;&lt;path fill=&#34;#fff&#34; d=&#34;M338.2 106.5h41v30h-41z&#34;/&gt;&lt;text transform=&#34;translate(343.2 112.276)&#34;&gt;&lt;tspan x=&#34;.1&#34; y=&#34;15&#34; textLength=&#34;30.8&#34;&gt;!first&lt;/tspan&gt;&lt;/text&gt;&lt;path fill=&#34;#fff&#34; d=&#34;M510.291 72.278h41v30h-41z&#34;/&gt;&lt;text transform=&#34;translate(515.291 78.054)&#34;&gt;&lt;tspan x=&#34;.1&#34; y=&#34;15&#34; textLength=&#34;30.8&#34;&gt;!first&lt;/tspan&gt;&lt;/text&gt;&lt;path fill=&#34;#fff&#34; d=&#34;M317.016 148.745h67v30h-67z&#34;/&gt;&lt;text transform=&#34;translate(322.016 154.521)&#34;&gt;&lt;tspan x=&#34;.052&#34; y=&#34;15&#34; textLength=&#34;56.896&#34;&gt;!second&lt;/tspan&gt;&lt;/text&gt;&lt;path fill=&#34;#fff&#34; d=&#34;M266.617 198.336h49v30h-49z&#34;/&gt;&lt;text transform=&#34;translate(271.617 204.112)&#34;&gt;&lt;tspan x=&#34;.084&#34; y=&#34;15&#34; textLength=&#34;38.832&#34;&gt;!main&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/p&gt;

&lt;p&gt;The picture shows the &lt;em&gt;static model&lt;/em&gt; of the agent and the states represent a &lt;em&gt;set of beliefs&lt;/em&gt; which are created during runtime and the the transitions are the instantiation of the goal and the execution of the plans. The initial state is defined by the initial goal.
&lt;br/&gt;
Based on this static model the &lt;em&gt;runtime model&lt;/em&gt; shows the execution structure of the state-machine. The animation shows the continuous execution_ of the agent on each cycle. In this case the agent runs infinitely, but it switches between the &lt;code&gt;main&lt;/code&gt;-state and the &lt;code&gt;first&lt;/code&gt; and &lt;code&gt;second&lt;/code&gt;-state, but these two states run in parallel (&lt;a href=&#34;#agentfsm&#34; id=&#34;animate-agentfsm&#34;&gt;animate finite-state-machine&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&#34;action-behaviour&#34;&gt;Action Behaviour&lt;/h2&gt;

&lt;p&gt;Actions are one of the helpful structures within agent-programming. A definition of an action is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The action is a function with $f : \mathbb{X}^n \rightarrow \mathbb{B}$ and $\mathbb{X}$ is any input data type and $\mathbb{B}$ is a binary set with {true, false}, which is executed independend and directly within the current agent / plan context. An action can change the environment immediately or the internal structure of the agent.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On a technical point of view the action is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Method_(computer_programming)&#34;&gt;method&lt;/a&gt;, which is called inside the current plan. The method is defined by the &lt;a href=&#34;http://lightjason.github.io/AgentSpeak/sources/d0/dfe/interfaceorg_1_1lightjason_1_1agentspeak_1_1action_1_1IAction__coll__graph.svg&#34; data-lightbox=&#34;iaction-interface&#34; data-title=&#34;IAction interface&#34;&gt;IAction interface&lt;/a&gt;. All actions&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:iaction&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:iaction&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; implement this interface which uses the &lt;em&gt;IExecution&lt;/em&gt; interface for all executable structures.
&lt;br/&gt;
Based on the first illustrated finite-state-machine we will show the action structure. In short: Actions executed on the &lt;em&gt;transition&lt;/em&gt;. On the first state-machine the transition contains only the &lt;em&gt;achievement goals&lt;/em&gt;. An achievement goal is also an action which executes a plan.&lt;/p&gt;

&lt;!-- htmlmin:ignore --&gt;

&lt;p&gt;&lt;pre data-language=&#34;AgentSpeak(L++)&#34;&gt;&lt;code class=&#34;language-agentspeak line-numbers&#34;&gt;!main.&lt;/p&gt;

&lt;p&gt;+!main &amp;lt;-
    generic/print(&amp;ldquo;execute main-goal&amp;rdquo;);
    !first;
    generic/print(&amp;ldquo;achievement-goal in main: first&amp;rdquo;);
    !second;
    generic/print(&amp;ldquo;achievement-goal in main: second&amp;rdquo;)
.&lt;/p&gt;

&lt;p&gt;+!first &amp;lt;-
    generic/print(&amp;ldquo;execute first-goal&amp;rdquo;);
    !first;
    generic/print(&amp;ldquo;achievement-goal in first: first&amp;rdquo;)
.&lt;/p&gt;

&lt;p&gt;+!second &amp;lt;-
    generic/print(&amp;ldquo;execute second-goal&amp;rdquo;);
    !main;
    generic/print(&amp;ldquo;achievement-goal in second: main&amp;rdquo;)
.&lt;/p&gt;

&lt;p&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;!-- htmlmin:ignore --&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:iaction&#34;&gt;see the &lt;a href=&#34;http://lightjason.github.io/AgentSpeak/sources/dc/d53/interfaceorg_1_1lightjason_1_1agentspeak_1_1action_1_1IAction.html&#34;&gt;IAction interface&lt;/a&gt; for a detailed description
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:iaction&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Basic Knowledge: Logical Programming</title>
      <link>https://lightjason.github.io/knowledgebase/logicalprogramming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lightjason.github.io/knowledgebase/logicalprogramming/</guid>
      <description>

&lt;p&gt;This tutorial gives a short introduction in &lt;a href=&#34;https://en.wikipedia.org/wiki/Logic_programming&#34;&gt;logical programming concepts&lt;/a&gt;, which are needed to write the source code of an agent.
For a general understanding of logical programming it can be helpful to learn first Prolog, in detail we recommend &lt;a href=&#34;http://www.swi-prolog.org/&#34;&gt;SWI-Prolog&lt;/a&gt;, because there are a lot of applications and good tutorials to understand the main mechanism of logical programming.&lt;/p&gt;

&lt;div id=&#34;toccontainer&#34;&gt;Contents [&lt;a href=&#34;#&#34; id=&#34;tochideshow&#34;&gt;Hide&lt;/a&gt;]&lt;div id=&#34;toc&#34;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&#34;design-time&#34;&gt;Design Time&lt;/h2&gt;

&lt;p&gt;On logical programs we are talking about a &lt;em&gt;symbolic definition&lt;/em&gt;. We are writing source code in &lt;em&gt;symbols&lt;/em&gt;, &lt;em&gt;facts&lt;/em&gt; and &lt;em&gt;rules&lt;/em&gt;.
The difference between &lt;a href=&#34;https://en.wikipedia.org/wiki/Imperative_programming&#34;&gt;imperative programming&lt;/a&gt; and a logical program is, that latter does not define &lt;em&gt;how the problem should be solved&lt;/em&gt;. It only defines the facts and rules which are needed to calculate the solution. In a more general way it defines the &lt;em&gt;constraints&lt;/em&gt; which are needed to solve the problem. On this definition the runtime creates an internal structure to solve the problem.&lt;/p&gt;

&lt;p&gt;In LightJason&amp;rsquo;s agent developing process, you have to write an &lt;em&gt;agent script&lt;/em&gt; in our AgentSpeak(L++) programming language, which describes the behaviour of the agent. The script describes &lt;em&gt;what and when the agent should do&lt;/em&gt;. This process is named &lt;em&gt;design time&lt;/em&gt;, because you design the behaviour without knowledge about the real execution process. During &lt;em&gt;design time&lt;/em&gt; there are some concepts to understand related to the structure of our logical programming language, which are shown in the following.&lt;/p&gt;

&lt;h3 id=&#34;terms&#34;&gt;Terms&lt;/h3&gt;

&lt;p&gt;In short: &lt;em&gt;Everything is a term.&lt;/em&gt;
All elements within the source code are terms, so the super (generic) data structure is a term. In our framework we distinguish two different types of terms:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;raw terms&lt;/em&gt; are terms with a native Java datatype. In such a term any Java data structure can be stored, but it cannot be used by the normal behaviour mechanisms of the logical programming language.
Unifying and assignments are nonetheless possible on these raw data structures&lt;/li&gt;
&lt;li&gt;&lt;em&gt;other terms&lt;/em&gt; like literals are structured objects which are here described&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In our language implementation we created an inheritance model to build the software architecture for these structured elements.
The root element is the &lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d9/d34/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ITerm.html&#34;&gt;ITerm interface&lt;/a&gt; and the &lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d4/dc1/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ITerm__inherit__graph_org.svg&#34; data-lightbox=&#34;iterm-inheritance-diagram&#34; data-title=&#34;ITerm inheritance diagram&#34;&gt;ITerm inheritance diagram&lt;/a&gt; shows the structure of the relations.&lt;/p&gt;

&lt;h3 id=&#34;a-name-atomliterals-atom-literals-a&#34;&gt;&lt;a name=&#34;atomliterals&#34;&gt;Atom &amp;amp; Literals&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The simplest structure elements of a logical programming language are &lt;em&gt;atoms&lt;/em&gt; and part of the structure called  &lt;em&gt;literals&lt;/em&gt;.
In the Prolog definition and so in AgentSpeak(L) all literals / atoms are beginning with a lower-case letter. In contrast, by our definition the atom can also contain slashes &lt;code&gt;/&lt;/code&gt; and minus &lt;code&gt;-&lt;/code&gt; characters. For clarification see the following example:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We would like to define that the sun is shining
&lt;pre&gt;&lt;code class=&#34;language-prolog &#34;&gt;sun( shining() )&lt;/pre&gt;&lt;/code&gt;
The word &lt;code&gt;sun&lt;/code&gt; and the word &lt;code&gt;shining&lt;/code&gt; are &lt;em&gt;atoms&lt;/em&gt;, the whole structure &lt;code&gt;sun(shining())&lt;/code&gt; is named &lt;em&gt;literal&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&#34;time&#34;&gt;&lt;/a&gt;Another example is a time definition:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We would like to say it is currently 2 a clock post meridian (pm)
&lt;pre&gt;&lt;code class=&#34;language-prolog&#34;&gt;time( current( hour(2), minute(0), pm() ) )&lt;/pre&gt;&lt;/code&gt;
You can see, that a literal can store a list of other literals or values inside the brackets.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Based on the first example a negation is also possible:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We would to say it is currently not raining
&lt;pre data-language=&#34;AgentSpeak(L++)&#34;&gt;&lt;code class=&#34;language-agentspeak&#34;&gt;~raining()&lt;/pre&gt;&lt;/code&gt;
The tilde &lt;code&gt;~&lt;/code&gt; in front of a atom defines the &lt;a href=&#34;https://en.wikipedia.org/wiki/Stable_model_semantics#Strong_negation&#34;&gt;strong negation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;variables&#34;&gt;Variables&lt;/h3&gt;

&lt;p&gt;Variables can be used to define literals with a &lt;em&gt;placeholder&lt;/em&gt; and (in contrast to atoms or literals) begins with an upper-case letter.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Based on the &lt;a href=&#34;#time&#34;&gt;time example&lt;/a&gt; we added some variables to extract the hour and minute part of the literal
&lt;pre&gt;&lt;code class=&#34;language-prolog&#34;&gt;time( current( hour( Hour ), minute( Minute ), pm() ) )&lt;/code&gt;&lt;/pre&gt;
The upper-case variables &lt;code&gt;Hour&lt;/code&gt; and &lt;code&gt;Minute&lt;/code&gt; are parts of the literal and the system can set the values into. This structure is named &lt;a href=&#34;#unification&#34;&gt;unification&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Within a logical programming language exists a specialised variable which is &lt;em&gt;only&lt;/em&gt; the underscore &lt;code&gt;_&lt;/code&gt;. This variable can be sloppy named as &lt;em&gt;trash can&lt;/em&gt;. You can use this special variable for defining a variable which value should be ignored.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In contradistinction to the time example above, we would like to ignore the &lt;code&gt;pm()&lt;/code&gt; part, so we say, that we would like to get the current time and ignoring the 12-hour clock part
&lt;pre&gt;&lt;code class=&#34;language-prolog&#34;&gt;time( current( hour( Hour ), minute( Minute ), _ ) )&lt;/code&gt;&lt;/pre&gt;
With this definition we can get a very flexible structure for extracting some information from the literals.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;facts-beliefs&#34;&gt;Facts &amp;amp; Beliefs&lt;/h3&gt;

&lt;p&gt;Based on the definition of &lt;a href=&#34;#variables&#34;&gt;variables&lt;/a&gt; and &lt;a href=&#34;#atomliterals&#34;&gt;literals&lt;/a&gt; we are defining a &lt;em&gt;fact&lt;/em&gt; as a &lt;em&gt;literal without variables&lt;/em&gt;. A fact is a literal which define a state or an information (independend whether the information is correct or wrong). In relation to a multi-agent system a &lt;em&gt;belief&lt;/em&gt; is a &lt;em&gt;fact about the knowledge or the environment&lt;/em&gt;. So the fact defines a state or a point of view of an object without any information about the correctness.&lt;/p&gt;

&lt;h3 id=&#34;rules&#34;&gt;Rules&lt;/h3&gt;

&lt;p&gt;Rules, in contrast to &lt;a href=&#34;#a-name-atomliterals-atom-literals-a&#34;&gt;literals&lt;/a&gt;, &lt;a href=&#34;#variables&#34;&gt;variables&lt;/a&gt; and &lt;a href=&#34;#facts-beliefs&#34;&gt;facts&lt;/a&gt;, are an &lt;em&gt;executable structure&lt;/em&gt;. Rules can be seen as a &lt;em&gt;static function&lt;/em&gt; in a logical programming language with some additional structure.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;One of the most famous examples for rules in logical programs is the &lt;a href=&#34;https://en.wikipedia.org/wiki/Fibonacci_number&#34;&gt;Fibonacci sequence&lt;/a&gt;. Mathematically this sequences is defined as
$$F_n = F_{n-1} + F_{n-2}$$
$$F_0 = F_1 = F_2 = 1$$
For the value $n=5$ the sequence is calculated as
$$F_5 = F_4 + F_3 = (F_3 + 1) + (1+1) = ((1+1)+1) + (1+1) = 5$$
Based on this calculation you can see that each function element $F_n$ which is not defined as $1$ gets resolved in
a recursive way. A Prolog rule, which calculates the Fibonacci number of any input can be written as follows:
&lt;pre&gt;&lt;code class=&#34;language-prolog&#34;&gt;fibonacci(0,0).
fibonacci(1,1).
fibonacci(2,1).
fibonacci(N,R) :-
    N &amp;gt; 1,
    N1 is N-1,
    N2 is N-2,
    fibonacci(N1,R1),
    fibonacci(N2,R2),
    R is R1 + R2
.&lt;/code&gt;&lt;/pre&gt;
One of the most important aspect of a Prolog program is, that the exit conditions are written first. The last item
in the rule is the calculation to be made, iff no other condition can be matched. The last rule can be read in the
following way (the comma is pronounced as a logical &lt;em&gt;and&lt;/em&gt;):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If (&lt;code&gt;N&lt;/code&gt; is greater than &lt;code&gt;1&lt;/code&gt;) &lt;em&gt;and&lt;/em&gt; (&lt;code&gt;N1&lt;/code&gt; can be set to &lt;code&gt;N-1&lt;/code&gt;) &lt;em&gt;and&lt;/em&gt; (&lt;code&gt;N2&lt;/code&gt; can be calculate to &lt;code&gt;N-2&lt;/code&gt;) &lt;em&gt;and&lt;/em&gt;
(the rule &lt;code&gt;fibonacci(N1,R1)&lt;/code&gt; can be successfully executed) &lt;em&gt;and&lt;/em&gt; (the rule &lt;code&gt;fibonacci(N2,R2)&lt;/code&gt; can be successfully executed) &lt;em&gt;and&lt;/em&gt;
(&lt;code&gt;R&lt;/code&gt; can be calculated to &lt;code&gt;R1 + R2&lt;/code&gt;) &lt;em&gt;then&lt;/em&gt; the rule will be finished successful&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The order of the rule is very important, because Prolog tries to find a rule, which can be matched successfully,
the first rule, that matches will be used. Variables will be set during runtime and the values will be passed
back as a reference, which is named &lt;a href=&#34;https://en.wikipedia.org/wiki/Side_effect_(computer_science)&#34;&gt;side effect&lt;/a&gt;. In imperative programming languages these side effects are undesired, but
can be very helpful in logical programming languages.&lt;/p&gt;

&lt;p&gt;But an advice in writing such rules: The logical programming runtime will have to check in the worst-case all possibilities to calculate a solution. The system tries to find a successful solution with a &lt;a href=&#34;https://en.wikipedia.org/wiki/Backtracking&#34;&gt;backtracking algorithm&lt;/a&gt;. This can be a &lt;a href=&#34;https://en.wikipedia.org/wiki/NP-completeness&#34;&gt;NP-complete problem&lt;/a&gt; and so a solution cannot be calculated efficiently.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;runtime&#34;&gt;Runtime&lt;/h2&gt;

&lt;p&gt;In the section &lt;a href=&#34;#designtime&#34;&gt;design time&lt;/a&gt; we are talked about a symbolic representation of data. We can define such data in the agent script and during the execution of the agent we would like to modify the data. On an abstract point of view we are talking about &lt;a href=&#34;https://en.wikipedia.org/wiki/Deductive_reasoning&#34;&gt;deductive reasoning&lt;/a&gt;, that means in slopping sentence: &lt;em&gt;We are generating new knowledge, based on the current knowledge of the agent&lt;/em&gt;.&lt;/p&gt;

&lt;img src=&#34;https://lightjason.github.io/images/deduction.svg#centering&#34; alt=&#34;deduction&#34; style=&#34;width: 30%; &#34;/&gt;

&lt;p&gt;The description of the figure is that we are modelling the $\Delta$ during &lt;a href=&#34;#designtime&#34;&gt;design time&lt;/a&gt; with any kind of &lt;a href=&#34;#facts-beliefs&#34;&gt;facts&lt;/a&gt;. During runtime the agent can modify the knowledge and generate implicit knowledge about the environment which is based on the previous knowledge $\Delta$. The implicit knowledge is named $belief(\Delta, \rho)$&lt;/p&gt;

&lt;h3 id=&#34;unification&#34;&gt;Unification&lt;/h3&gt;

&lt;p&gt;In general the &lt;a href=&#34;https://en.wikipedia.org/wiki/Unification_(computer_science)&#34;&gt;unification&lt;/a&gt; is the process for &lt;em&gt;setting values from one literal into the variables of another literal&lt;/em&gt;. Based on the &lt;a href=&#34;#time&#34;&gt;time example&lt;/a&gt; the procedure can look as follows:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We have two literals, one literal with values and another literal with variables
&lt;pre&gt;&lt;code class=&#34;language-prolog&#34;&gt;time( current( hour( 2    ), minute( 0      ), pm() ) )
time( current( hour( Hour ), minute( Second ), _    ) )
&lt;/pre&gt;&lt;/code&gt;
Based on this structure the systems tries to transfer the values from the first literal into the variables
of the second literal, such that both literals are equal. If it is not possible the unification
process will fail. On a successful execution the variable &lt;code&gt;Hour&lt;/code&gt; stores the value $2$ and the variable
&lt;code&gt;Second&lt;/code&gt; the value $0$.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The runtime of the logical programming language tries to find an executable structure, so that all unification components and &lt;a href=&#34;#rules&#34;&gt;rules&lt;/a&gt; can be finished successfully. The unification process can be used to generate new literals based on existing literals. In combination with &lt;a href=&#34;#rules&#34;&gt;rules&lt;/a&gt; the system can solve complex reasoning structures. If the system cannot find any possibility to solve the problem, the logical program will be stopped with a failure. The goal of the runtime is to find a successful solution.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Difference to Jason</title>
      <link>https://lightjason.github.io/knowledgebase/differencetojason/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lightjason.github.io/knowledgebase/differencetojason/</guid>
      <description>

&lt;p&gt;We describe the difference between LightJason and &lt;a href=&#34;http://jason.sourceforge.net/&#34;&gt;Jason&lt;/a&gt;, because in general the LightJason framework is inspired by Jason, but it is &lt;strong&gt;not&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a copy of Jason&lt;/li&gt;
&lt;li&gt;a extension to Jason&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;LightJason does not use &lt;strong&gt;any code fragments&lt;/strong&gt; of Jason, so there is no connection between the two frameworks. LightJason is &lt;strong&gt;only inspired&lt;/strong&gt; by the concept of Jason on a theoretical level. We build a fully new framework from scratch. The imags allows you to highlight elements by a &lt;em&gt;mouse over effect&lt;/em&gt; for better understanding.&lt;/p&gt;

&lt;p&gt;&lt;div id=&#34;toccontainer&#34;&gt;Contents [&lt;a href=&#34;#&#34; id=&#34;tochideshow&#34;&gt;Hide&lt;/a&gt;]&lt;div id=&#34;toc&#34;&gt;&lt;/div&gt;&lt;/div&gt;
&lt;script src=&#34;https://lightjason.github.io/js/agentcycle.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;jason-agent-cycle&#34;&gt;Jason Agent Cycle&lt;/h2&gt;

&lt;p&gt;The Jason agent cycle defines the &lt;em&gt;execution mechanism&lt;/em&gt; of an agent and is found on &lt;a href=&#34;http://jason.sourceforge.net/jBook/jBook/Home.html&#34;&gt;Jason Book&lt;/a&gt; figure 4.1 (page 68). The cycle execution depends on the ordering of the source code within the ASL file.&lt;/p&gt;

&lt;p&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; id=&#34;jasonagentcycle&#34; viewBox=&#34;87 70 1598 877&#34;&gt;&lt;defs id=&#34;defs6&#34;&gt;&lt;marker markerHeight=&#34;8&#34; viewBox=&#34;-1 -4 10 8&#34; overflow=&#34;visible&#34; markerWidth=&#34;10&#34; orient=&#34;auto&#34; color=&#34;#000&#34; id=&#34;FilledArrow_Marker&#34;&gt;&lt;path id=&#34;path9&#34; fill=&#34;currentColor&#34; d=&#34;M8 0L0-3v6z&#34; stroke=&#34;currentColor&#34;/&gt;&lt;/marker&gt;&lt;marker markerHeight=&#34;8&#34; viewBox=&#34;-9 -4 10 8&#34; overflow=&#34;visible&#34; markerWidth=&#34;10&#34; orient=&#34;auto&#34; color=&#34;#000&#34; id=&#34;a&#34;&gt;&lt;path id=&#34;path12&#34; fill=&#34;currentColor&#34; d=&#34;M-8 0l8 3v-6z&#34; stroke=&#34;currentColor&#34;/&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;g id=&#34;g14&#34; fill=&#34;none&#34;&gt;&lt;g id=&#34;g18&#34;&gt;&lt;path id=&#34;rect22&#34; stroke-width=&#34;2&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; stroke-linejoin=&#34;round&#34; d=&#34;M189 81h1386v855H189z&#34;/&gt;&lt;text id=&#34;text24&#34; fill=&#34;#000&#34; transform=&#34;translate(199 96)&#34;&gt;&lt;tspan id=&#34;tspan26&#34; x=&#34;1309.7&#34; y=&#34;20&#34; textLength=&#34;56.3&#34; font-weight=&#34;bold&#34; font-weight=&#34;700&#34; font-size=&#34;20&#34;&gt;Agent&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;path28&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; d=&#34;M657 243h36v100.46h85.39&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;path id=&#34;path30&#34; fill=&#34;#dfd&#34; class=&#34;svg-agentcycle-trigger&#34; d=&#34;M234 198h81a9 9 0 0 1 9 9v72a9 9 0 0 1-9 9h-81a9 9 0 0 1-9-9v-72a9 9 0 0 1 9-9z&#34;/&gt;&lt;path id=&#34;path32&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; d=&#34;M234 198h81a9 9 0 0 1 9 9v72a9 9 0 0 1-9 9h-81a9 9 0 0 1-9-9v-72a9 9 0 0 1 9-9z&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;text id=&#34;text34&#34; fill=&#34;#000&#34; font-style=&#34;italic&#34; font-weight=&#34;500&#34; transform=&#34;translate(230 234.8)&#34; font-size=&#34;14&#34;&gt;&lt;tspan id=&#34;tspan36&#34; x=&#34;18.187&#34; y=&#34;13&#34; textLength=&#34;20.482&#34;&gt;per&lt;/tspan&gt; &lt;tspan id=&#34;tspan38&#34; x=&#34;38.417&#34; y=&#34;13&#34; textLength=&#34;32.396&#34;&gt;ceive&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;rect40&#34; fill=&#34;#ccc&#34; class=&#34;svg-agentcycle-events&#34; d=&#34;M783 306h72v99h-72z&#34;/&gt;&lt;path id=&#34;rect42&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; stroke-linejoin=&#34;round&#34; d=&#34;M783 306h72v99h-72z&#34;/&gt;&lt;text id=&#34;text44&#34; fill=&#34;#000&#34; transform=&#34;translate(788 311)&#34;&gt;&lt;tspan id=&#34;tspan46&#34; x=&#34;0&#34; y=&#34;14&#34; textLength=&#34;45.136&#34; font-weight=&#34;bold&#34; font-size=&#34;14&#34;&gt;Events&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;rect48&#34; fill=&#34;#dfd&#34; class=&#34;svg-agentcycle-beliefbase&#34; d=&#34;M783 105h72v102h-72z&#34;/&gt;&lt;path id=&#34;rect50&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; stroke-linejoin=&#34;round&#34; d=&#34;M783 105h72v102h-72z&#34;/&gt;&lt;text id=&#34;text52&#34; fill=&#34;#000&#34; font-weight=&#34;bold&#34; transform=&#34;translate(788 110)&#34; font-size=&#34;14&#34;&gt;&lt;tspan id=&#34;tspan54&#34; x=&#34;0&#34; y=&#34;14&#34; textLength=&#34;37.814&#34;&gt;Belief&lt;/tspan&gt; &lt;tspan id=&#34;tspan56&#34; x=&#34;0&#34; y=&#34;31.406&#34; textLength=&#34;33.446&#34;&gt;Base&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;rect58&#34; fill=&#34;#dfd&#34; class=&#34;svg-agentcycle-plans&#34; d=&#34;M1413 213h81v174h-81z&#34;/&gt;&lt;path id=&#34;rect60&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; stroke-linejoin=&#34;round&#34; d=&#34;M1413 213h81v174h-81z&#34;/&gt;&lt;text id=&#34;text62&#34; fill=&#34;#000&#34; font-weight=&#34;bold&#34; transform=&#34;translate(1418 218)&#34; font-size=&#34;14&#34;&gt;&lt;tspan id=&#34;tspan64&#34; x=&#34;0&#34; y=&#34;14&#34; textLength=&#34;29.288&#34;&gt;Plan&lt;/tspan&gt; &lt;tspan id=&#34;tspan66&#34; x=&#34;0&#34; y=&#34;31.406&#34; textLength=&#34;46.662&#34;&gt;Library&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;path68&#34; fill=&#34;#dfd&#34; class=&#34;svg-agentcycle-action&#34; d=&#34;M1476 507h72c5 0 9 4.03 9 9v66c0 4.97-4 9-9 9h-72c-5 0-9-4.03-9-9v-66c0-4.97 4-9 9-9z&#34;/&gt;&lt;path id=&#34;path70&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; d=&#34;M1476 507h72c5 0 9 4.03 9 9v66c0 4.97-4 9-9 9h-72c-5 0-9-4.03-9-9v-66c0-4.97 4-9 9-9z&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;text id=&#34;text72&#34; fill=&#34;#000&#34; transform=&#34;translate(1472 540.8)&#34;&gt;&lt;tspan id=&#34;tspan74&#34; font-style=&#34;italic&#34; font-weight=&#34;500&#34; x=&#34;30.403&#34; y=&#34;13&#34; textLength=&#34;19.194&#34; font-size=&#34;14&#34;&gt;act&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;path76&#34; fill=&#34;#dfd&#34; class=&#34;svg-agentcycle-action&#34; d=&#34;M1476 654h72c5 0 9 4.03 9 9v66c0 4.97-4 9-9 9h-72c-5 0-9-4.03-9-9v-66c0-4.97 4-9 9-9z&#34;/&gt;&lt;path id=&#34;path78&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; d=&#34;M1476 654h72c5 0 9 4.03 9 9v66c0 4.97-4 9-9 9h-72c-5 0-9-4.03-9-9v-66c0-4.97 4-9 9-9z&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;text id=&#34;text80&#34; fill=&#34;#000&#34; transform=&#34;translate(1472 687.8)&#34;&gt;&lt;tspan id=&#34;tspan82&#34; font-style=&#34;italic&#34; font-weight=&#34;500&#34; x=&#34;11.356&#34; y=&#34;13&#34; textLength=&#34;57.288&#34; font-size=&#34;14&#34;&gt;sendMsg&lt;/tspan&gt;&lt;/text&gt;&lt;ellipse id=&#34;ellipse84&#34; class=&#34;svg-agentcycle-unify&#34; fill=&#34;#dfd&#34; cx=&#34;1119&#34; cy=&#34;417&#34; ry=&#34;46.5&#34; rx=&#34;48&#34;/&gt;&lt;ellipse id=&#34;ellipse86&#34; cx=&#34;1119&#34; cy=&#34;417&#34; stroke=&#34;#000&#34; ry=&#34;46.5&#34; rx=&#34;48&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;text id=&#34;text88&#34; fill=&#34;#000&#34; font-style=&#34;italic&#34; font-weight=&#34;500&#34; transform=&#34;translate(1085.6 400.61)&#34; font-size=&#34;14&#34;&gt;&lt;tspan id=&#34;tspan90&#34; x=&#34;17.461&#34; y=&#34;13&#34; textLength=&#34;31.878&#34;&gt;Unify&lt;/tspan&gt; &lt;tspan id=&#34;tspan92&#34; x=&#34;15.9&#34; y=&#34;29.392&#34; textLength=&#34;35&#34;&gt;Event&lt;/tspan&gt;&lt;/text&gt;&lt;ellipse id=&#34;ellipse94&#34; fill=&#34;#dfd&#34; class=&#34;svg-agentcycle-checkcontext&#34; cx=&#34;957&#34; cy=&#34;417&#34; ry=&#34;46.5&#34; rx=&#34;48&#34;/&gt;&lt;ellipse id=&#34;ellipse96&#34; cx=&#34;957&#34; cy=&#34;417&#34; stroke=&#34;#000&#34; ry=&#34;46.5&#34; rx=&#34;48&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;text id=&#34;text98&#34; fill=&#34;#000&#34; font-style=&#34;italic&#34; font-weight=&#34;500&#34; transform=&#34;translate(923.6 400.61)&#34; font-size=&#34;14&#34;&gt;&lt;tspan id=&#34;tspan100&#34; x=&#34;13.569&#34; y=&#34;13&#34; textLength=&#34;39.662&#34;&gt;Check&lt;/tspan&gt; &lt;tspan id=&#34;tspan102&#34; x=&#34;8.9&#34; y=&#34;29.392&#34; textLength=&#34;49&#34;&gt;Context&lt;/tspan&gt;&lt;/text&gt;&lt;ellipse id=&#34;ellipse104&#34; fill=&#34;#dfd&#34; class=&#34;svg-agentcycle-execution&#34; cx=&#34;1338&#34; cy=&#34;549&#34; ry=&#34;46.5&#34; rx=&#34;48&#34;/&gt;&lt;ellipse id=&#34;ellipse106&#34; cx=&#34;1338&#34; cy=&#34;549&#34; stroke=&#34;#000&#34; ry=&#34;46.5&#34; rx=&#34;48&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;text id=&#34;text108&#34; fill=&#34;#000&#34; font-style=&#34;italic&#34; font-weight=&#34;500&#34; transform=&#34;translate(1304.6 532.61)&#34; font-size=&#34;14&#34;&gt;&lt;tspan id=&#34;tspan110&#34; x=&#34;2.677&#34; y=&#34;13&#34; textLength=&#34;61.446&#34;&gt;Execution&lt;/tspan&gt; &lt;tspan id=&#34;tspan112&#34; x=&#34;6.17&#34; y=&#34;29.392&#34; textLength=&#34;54.46&#34;&gt;Intention&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;path114&#34; fill=&#34;#fff&#34; d=&#34;M567 198h81a9 9 0 0 1 9 9v72a9 9 0 0 1-9 9h-81a9 9 0 0 1-9-9v-72a9 9 0 0 1 9-9z&#34;/&gt;&lt;path id=&#34;path116&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; d=&#34;M567 198h81a9 9 0 0 1 9 9v72a9 9 0 0 1-9 9h-81a9 9 0 0 1-9-9v-72a9 9 0 0 1 9-9z&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;text id=&#34;text118&#34; fill=&#34;#000&#34; transform=&#34;translate(563 234.8)&#34;&gt;&lt;tspan id=&#34;tspan120&#34; font-style=&#34;italic&#34; font-weight=&#34;500&#34; x=&#34;30.892&#34; y=&#34;13&#34; textLength=&#34;27.216&#34; font-size=&#34;14&#34;&gt;BRF&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;path122&#34; fill=&#34;#fff&#34; d=&#34;M415.5 198h81a9 9 0 0 1 9 9v72a9 9 0 0 1-9 9h-81a9 9 0 0 1-9-9v-72a9 9 0 0 1 9-9z&#34;/&gt;&lt;path id=&#34;path124&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; d=&#34;M415.5 198h81a9 9 0 0 1 9 9v72a9 9 0 0 1-9 9h-81a9 9 0 0 1-9-9v-72a9 9 0 0 1 9-9z&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;text id=&#34;text126&#34; fill=&#34;#000&#34; transform=&#34;translate(411.5 234.8)&#34;&gt;&lt;tspan id=&#34;tspan128&#34; font-style=&#34;italic&#34; font-weight=&#34;500&#34; x=&#34;30.633&#34; y=&#34;13&#34; textLength=&#34;27.734&#34; font-size=&#34;14&#34;&gt;BUF&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;path130&#34; fill=&#34;#dfd&#34; class=&#34;svg-agentcycle-trigger&#34; d=&#34;M234 522h81a9 9 0 0 1 9 9v72a9 9 0 0 1-9 9h-81a9 9 0 0 1-9-9v-72a9 9 0 0 1 9-9z&#34;/&gt;&lt;path id=&#34;path132&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; d=&#34;M234 522h81a9 9 0 0 1 9 9v72a9 9 0 0 1-9 9h-81a9 9 0 0 1-9-9v-72a9 9 0 0 1 9-9z&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;text id=&#34;text134&#34; fill=&#34;#000&#34; transform=&#34;translate(230 558.8)&#34;&gt;&lt;tspan id=&#34;tspan136&#34; font-style=&#34;italic&#34; font-weight=&#34;500&#34; x=&#34;13.133&#34; y=&#34;13&#34; textLength=&#34;62.734&#34; font-size=&#34;14&#34;&gt;checkMail&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;path138&#34; fill=&#34;#fff&#34; d=&#34;M456 516l51 51-51 51-51-51z&#34;/&gt;&lt;path id=&#34;path140&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; d=&#34;M456 516l51 51-51 51-51-51z&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;path id=&#34;path142&#34; fill=&#34;#fff&#34; d=&#34;M456 366l51 51-51 51-51-51z&#34;/&gt;&lt;path id=&#34;path144&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; d=&#34;M456 366l51 51-51 51-51-51z&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;text id=&#34;text146&#34; fill=&#34;#000&#34; transform=&#34;translate(423.77 407.78)&#34;&gt;&lt;tspan id=&#34;tspan148&#34; font-style=&#34;italic&#34; font-weight=&#34;500&#34; x=&#34;8.75&#34; y=&#34;13&#34; textLength=&#34;49&#34; font-size=&#34;14&#34;&gt;SocAcc&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;path150&#34; fill=&#34;#ffe400&#34; class=&#34;svg-agentcycle-planselect&#34; d=&#34;M957 534l51 51-51 51-51-51z&#34;/&gt;&lt;path id=&#34;path152&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; d=&#34;M957 534l51 51-51 51-51-51z&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;text id=&#34;text154&#34; fill=&#34;#000&#34; transform=&#34;translate(958.04 583.15)&#34;&gt;&lt;tspan id=&#34;tspan156&#34; x=&#34;.2&#34; y=&#34;10&#34; textLength=&#34;7.6&#34; font-weight=&#34;500&#34; font-size=&#34;10&#34;&gt;O&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text158&#34; fill=&#34;#000&#34; transform=&#34;translate(948.81 574.22)&#34;&gt;&lt;tspan id=&#34;tspan160&#34; font-style=&#34;italic&#34; font-weight=&#34;500&#34; x=&#34;.464&#34; y=&#34;13&#34; textLength=&#34;9.072&#34; font-size=&#34;14&#34;&gt;S&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;path162&#34; fill=&#34;#fff&#34; d=&#34;M1119 177l51 51-51 51-51-51z&#34;/&gt;&lt;path id=&#34;path164&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; d=&#34;M1119 177l51 51-51 51-51-51z&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;g id=&#34;g166&#34; fill=&#34;#000&#34;&gt;&lt;text id=&#34;text168&#34; transform=&#34;translate(1120 226.15)&#34;&gt;&lt;tspan id=&#34;tspan170&#34; x=&#34;.445&#34; y=&#34;10&#34; textLength=&#34;6.11&#34; font-weight=&#34;500&#34; font-size=&#34;10&#34;&gt;E&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text172&#34; transform=&#34;translate(1110.8 217.22)&#34;&gt;&lt;tspan id=&#34;tspan174&#34; font-style=&#34;italic&#34; font-weight=&#34;500&#34; x=&#34;.464&#34; y=&#34;13&#34; textLength=&#34;9.072&#34; font-size=&#34;14&#34;&gt;S&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text176&#34; transform=&#34;translate(1115.5 182.33)&#34;&gt;&lt;tspan id=&#34;tspan178&#34; x=&#34;.164&#34; y=&#34;12&#34; textLength=&#34;6.672&#34; font-weight=&#34;bold&#34; font-size=&#34;12&#34;&gt;5&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;path id=&#34;path180&#34; fill=&#34;#ffe400&#34; class=&#34;svg-agentcycle-planselect&#34; d=&#34;M1176 498l51 51-51 51-51-51z&#34;/&gt;&lt;path id=&#34;path182&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; d=&#34;M1176 498l51 51-51 51-51-51z&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;g id=&#34;g184&#34; fill=&#34;#000&#34;&gt;&lt;text id=&#34;text186&#34; transform=&#34;translate(1177 547.15)&#34;&gt;&lt;tspan id=&#34;tspan188&#34; x=&#34;1.78&#34; y=&#34;10&#34; textLength=&#34;2.59&#34; font-weight=&#34;500&#34; font-size=&#34;10&#34;&gt;I&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text190&#34; transform=&#34;translate(1167.8 538.22)&#34;&gt;&lt;tspan id=&#34;tspan192&#34; font-style=&#34;italic&#34; font-weight=&#34;500&#34; x=&#34;.464&#34; y=&#34;13&#34; textLength=&#34;9.072&#34; font-size=&#34;14&#34;&gt;S&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text194&#34; transform=&#34;translate(1172.5 503.33)&#34;&gt;&lt;tspan id=&#34;tspan196&#34; x=&#34;.164&#34; y=&#34;12&#34; textLength=&#34;6.672&#34; font-weight=&#34;bold&#34; font-size=&#34;12&#34;&gt;9&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text198&#34; transform=&#34;translate(1344 455.3)&#34;&gt;&lt;tspan id=&#34;tspan200&#34; x=&#34;0&#34; y=&#34;13&#34; textLength=&#34;41.986&#34; font-weight=&#34;500&#34; font-size=&#34;14&#34;&gt;Beliefs&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text202&#34; transform=&#34;translate(1463 621.8)&#34;&gt;&lt;tspan id=&#34;tspan204&#34; x=&#34;.198&#34; y=&#34;13&#34; textLength=&#34;30.604&#34; font-weight=&#34;500&#34; font-size=&#34;14&#34;&gt;send&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text206&#34; transform=&#34;translate(1412 518.3)&#34;&gt;&lt;tspan id=&#34;tspan208&#34; x=&#34;.036&#34; y=&#34;13&#34; textLength=&#34;39.928&#34; font-weight=&#34;500&#34; font-size=&#34;14&#34;&gt;Action&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text210&#34; font-weight=&#34;500&#34; transform=&#34;translate(1227 502.11)&#34; font-size=&#34;14&#34;&gt;&lt;tspan id=&#34;tspan212&#34; x=&#34;.018&#34; y=&#34;13&#34; textLength=&#34;54.964&#34;&gt;Selected&lt;/tspan&gt; &lt;tspan id=&#34;tspan214&#34; x=&#34;.27&#34; y=&#34;29.392&#34; textLength=&#34;54.46&#34;&gt;Intention&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text216&#34; font-weight=&#34;500&#34; transform=&#34;translate(336.5 212.3)&#34; font-size=&#34;14&#34;&gt;&lt;tspan id=&#34;tspan218&#34; x=&#34;.126&#34; y=&#34;13&#34; textLength=&#34;21.252&#34;&gt;Per&lt;/tspan&gt; &lt;tspan id=&#34;tspan220&#34; x=&#34;21.126&#34; y=&#34;13&#34; textLength=&#34;34.748&#34;&gt;cepts&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text222&#34; transform=&#34;translate(341.5 536.3)&#34;&gt;&lt;tspan id=&#34;tspan224&#34; x=&#34;.108&#34; y=&#34;13&#34; textLength=&#34;63.784&#34; font-weight=&#34;500&#34; font-size=&#34;14&#34;&gt;Messages&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text226&#34; transform=&#34;translate(1095 379.83)&#34;&gt;&lt;tspan id=&#34;tspan228&#34; x=&#34;.164&#34; y=&#34;12&#34; textLength=&#34;6.672&#34; font-weight=&#34;bold&#34; font-size=&#34;12&#34;&gt;6&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text230&#34; transform=&#34;translate(930 379.83)&#34;&gt;&lt;tspan id=&#34;tspan232&#34; x=&#34;.164&#34; y=&#34;12&#34; textLength=&#34;6.672&#34; font-weight=&#34;bold&#34; font-size=&#34;12&#34;&gt;7&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text234&#34; transform=&#34;translate(1307.5 511.83)&#34;&gt;&lt;tspan id=&#34;tspan236&#34; x=&#34;.328&#34; y=&#34;12&#34; textLength=&#34;13.344&#34; font-weight=&#34;bold&#34; font-size=&#34;12&#34;&gt;10&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;path id=&#34;rect238&#34; fill=&#34;#dfd&#34; class=&#34;svg-agentcycle-intentions&#34; d=&#34;M333 672h225v147H333z&#34;/&gt;&lt;path id=&#34;rect240&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; stroke-linejoin=&#34;round&#34; d=&#34;M333 672h225v147H333z&#34;/&gt;&lt;text id=&#34;text242&#34; fill=&#34;#000&#34; transform=&#34;translate(338 677)&#34;&gt;&lt;tspan id=&#34;tspan244&#34; x=&#34;0&#34; y=&#34;14&#34; textLength=&#34;145.446&#34; font-weight=&#34;bold&#34; font-size=&#34;14&#34;&gt;Suspended Intentions&lt;/tspan&gt;&lt;/text&gt;&lt;path class=&#34;svg-agentcycle-triggeritem&#34; id=&#34;rect246&#34; class=&#34;svg-agentcycle-triggeritem&#34; fill=&#34;#ccc&#34; d=&#34;M360 711h54v99h-54z&#34;/&gt;&lt;path id=&#34;rect248&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; stroke-linejoin=&#34;round&#34; d=&#34;M360 711h54v99h-54z&#34;/&gt;&lt;path id=&#34;rect250&#34; class=&#34;svg-agentcycle-triggeritem&#34; fill=&#34;#ccc&#34; d=&#34;M441 720h63v90h-63z&#34;/&gt;&lt;path id=&#34;rect252&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; stroke-linejoin=&#34;round&#34; d=&#34;M441 720h63v90h-63z&#34;/&gt;&lt;g id=&#34;g254&#34; fill=&#34;#000&#34;&gt;&lt;text id=&#34;text256&#34; transform=&#34;translate(419 695.3)&#34;&gt;&lt;tspan id=&#34;tspan258&#34; x=&#34;.101&#34; y=&#34;13&#34; textLength=&#34;119.798&#34; font-weight=&#34;500&#34; font-size=&#34;14&#34;&gt;(Actions and Msgs)&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text260&#34; transform=&#34;translate(525 743.25)&#34;&gt;&lt;tspan id=&#34;tspan262&#34; x=&#34;0&#34; y=&#34;17&#34; textLength=&#34;18&#34; font-weight=&#34;500&#34; font-size=&#34;18&#34;&gt;…&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text264&#34; transform=&#34;translate(411.5 203.33)&#34;&gt;&lt;tspan id=&#34;tspan266&#34; x=&#34;.164&#34; y=&#34;12&#34; textLength=&#34;6.672&#34; font-weight=&#34;bold&#34; font-size=&#34;12&#34;&gt;2&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text268&#34; transform=&#34;translate(230 203.33)&#34;&gt;&lt;tspan id=&#34;tspan270&#34; x=&#34;.164&#34; y=&#34;12&#34; textLength=&#34;6.672&#34; font-weight=&#34;bold&#34; font-size=&#34;12&#34;&gt;1&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text272&#34; transform=&#34;translate(230 527.33)&#34;&gt;&lt;tspan id=&#34;tspan274&#34; x=&#34;.164&#34; y=&#34;12&#34; textLength=&#34;6.672&#34; font-weight=&#34;bold&#34; font-size=&#34;12&#34;&gt;3&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;path id=&#34;rect276&#34; fill=&#34;#dfd&#34; class=&#34;svg-agentcycle-intentions&#34; d=&#34;M684 672h585v147H684z&#34;/&gt;&lt;path id=&#34;rect278&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; stroke-linejoin=&#34;round&#34; d=&#34;M684 672h585v147H684z&#34;/&gt;&lt;text id=&#34;text280&#34; fill=&#34;#000&#34; transform=&#34;translate(689 677)&#34;&gt;&lt;tspan id=&#34;tspan282&#34; x=&#34;0&#34; y=&#34;14&#34; textLength=&#34;66.612&#34; font-weight=&#34;bold&#34; font-size=&#34;14&#34;&gt;Intentions&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;rect284&#34; class=&#34;svg-agentcycle-triggeritem&#34; fill=&#34;#ccc&#34; d=&#34;M702 702h72v108h-72z&#34;/&gt;&lt;path id=&#34;rect286&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; stroke-linejoin=&#34;round&#34; d=&#34;M702 702h72v108h-72z&#34;/&gt;&lt;path id=&#34;rect288&#34; class=&#34;svg-agentcycle-triggeritem&#34; fill=&#34;#ccc&#34; d=&#34;M792 720h63v90h-63z&#34;/&gt;&lt;path id=&#34;rect290&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; stroke-linejoin=&#34;round&#34; d=&#34;M792 720h63v90h-63z&#34;/&gt;&lt;text id=&#34;text292&#34; fill=&#34;#000&#34; transform=&#34;translate(1237 734.25)&#34;&gt;&lt;tspan id=&#34;tspan294&#34; x=&#34;0&#34; y=&#34;17&#34; textLength=&#34;18&#34; font-weight=&#34;500&#34; font-size=&#34;18&#34;&gt;…&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;rect296&#34; class=&#34;svg-agentcycle-triggeritem&#34; fill=&#34;#ccc&#34; d=&#34;M873 684h72v126h-72z&#34;/&gt;&lt;path id=&#34;rect298&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; stroke-linejoin=&#34;round&#34; d=&#34;M873 684h72v126h-72z&#34;/&gt;&lt;path id=&#34;rect300&#34; class=&#34;svg-agentcycle-triggeritem&#34; fill=&#34;#ccc&#34; d=&#34;M963 729h63v81h-63z&#34;/&gt;&lt;path id=&#34;rect302&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; stroke-linejoin=&#34;round&#34; d=&#34;M963 729h63v81h-63z&#34;/&gt;&lt;path id=&#34;rect304&#34; class=&#34;svg-agentcycle-triggeritem&#34; fill=&#34;#ccc&#34; d=&#34;M1152 711h72v99h-72z&#34;/&gt;&lt;path id=&#34;rect306&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; stroke-linejoin=&#34;round&#34; d=&#34;M1152 711h72v99h-72z&#34;/&gt;&lt;path id=&#34;path308&#34; stroke-dasharray=&#34;40 9 8 9&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; d=&#34;M1161 720h54v81h-54z&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;g id=&#34;g310&#34; fill=&#34;#000&#34;&gt;&lt;text id=&#34;text312&#34; transform=&#34;translate(1166 752.3)&#34;&gt;&lt;tspan id=&#34;tspan314&#34; x=&#34;7.881&#34; y=&#34;13&#34; textLength=&#34;28.238&#34; font-weight=&#34;500&#34; font-size=&#34;14&#34;&gt;New&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text316&#34; transform=&#34;translate(456.04 565.15)&#34;&gt;&lt;tspan id=&#34;tspan318&#34; x=&#34;.145&#34; y=&#34;10&#34; textLength=&#34;8.71&#34; font-weight=&#34;500&#34; font-size=&#34;10&#34;&gt;M&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text320&#34; transform=&#34;translate(447.81 556.22)&#34;&gt;&lt;tspan id=&#34;tspan322&#34; font-style=&#34;italic&#34; font-weight=&#34;500&#34; x=&#34;.464&#34; y=&#34;13&#34; textLength=&#34;9.072&#34; font-size=&#34;14&#34;&gt;S&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text324&#34; transform=&#34;translate(452.5 371.33)&#34;&gt;&lt;tspan id=&#34;tspan326&#34; x=&#34;.164&#34; y=&#34;12&#34; textLength=&#34;6.672&#34; font-weight=&#34;bold&#34; font-size=&#34;12&#34;&gt;4&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text328&#34; transform=&#34;translate(953.5 539.33)&#34;&gt;&lt;tspan id=&#34;tspan330&#34; x=&#34;.164&#34; y=&#34;12&#34; textLength=&#34;6.672&#34; font-weight=&#34;bold&#34; font-size=&#34;12&#34;&gt;8&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text332&#34; font-weight=&#34;500&#34; transform=&#34;translate(968 680.11)&#34; font-size=&#34;14&#34;&gt;&lt;tspan id=&#34;tspan334&#34; x=&#34;0&#34; y=&#34;13&#34; textLength=&#34;31.64&#34;&gt;Push&lt;/tspan&gt; &lt;tspan id=&#34;tspan336&#34; x=&#34;0&#34; y=&#34;29.392&#34; textLength=&#34;59.612&#34;&gt;New Plan&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text338&#34; font-weight=&#34;500&#34; transform=&#34;translate(1187.5 673.11)&#34; font-size=&#34;14&#34;&gt;&lt;tspan id=&#34;tspan340&#34; x=&#34;0&#34; y=&#34;13&#34; textLength=&#34;28.238&#34;&gt;New&lt;/tspan&gt; &lt;tspan id=&#34;tspan342&#34; x=&#34;0&#34; y=&#34;29.392&#34; textLength=&#34;54.46&#34;&gt;Intention&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;path id=&#34;rect344&#34; fill=&#34;#ccc&#34; class=&#34;svg-agentcycle-triggeritem&#34; d=&#34;M1062 720h63v90h-63z&#34;/&gt;&lt;path id=&#34;rect346&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; stroke-linejoin=&#34;round&#34; d=&#34;M1062 720h63v90h-63z&#34;/&gt;&lt;path id=&#34;path348&#34; stroke-dasharray=&#34;16 9 16 9 1 9&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; d=&#34;M1069.9 728.18h47.2V756h-47.2z&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;text id=&#34;text350&#34; fill=&#34;#000&#34; transform=&#34;translate(1074.9 733.89)&#34;&gt;&lt;tspan id=&#34;tspan352&#34; x=&#34;4.506&#34; y=&#34;13&#34; textLength=&#34;28.238&#34; font-weight=&#34;500&#34; font-size=&#34;14&#34;&gt;New&lt;/tspan&gt;&lt;/text&gt;&lt;g id=&#34;g354&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;&gt;&lt;path id=&#34;line356&#34; d=&#34;M505.5 243h42.6&#34;/&gt;&lt;path id=&#34;path358&#34; marker-start=&#34;url(#a)&#34; d=&#34;M456 188.1V126h317.1&#34;/&gt;&lt;path id=&#34;path360&#34; marker-start=&#34;url(#a)&#34; d=&#34;M607.5 188.1v-32.43H621l152.1.27&#34;/&gt;&lt;path id=&#34;path362&#34; d=&#34;M1323 593.18V855H639V391.27h134.1&#34;/&gt;&lt;path id=&#34;path364&#34; d=&#34;M1341 595.41V882H607.5V297.9&#34;/&gt;&lt;/g&gt;&lt;g id=&#34;g366&#34; fill=&#34;#000&#34;&gt;&lt;text id=&#34;text368&#34; transform=&#34;translate(729 129.64)&#34;&gt;&lt;tspan id=&#34;tspan370&#34; x=&#34;.007&#34; y=&#34;13&#34; textLength=&#34;41.986&#34; font-weight=&#34;500&#34; font-size=&#34;14&#34;&gt;Beliefs&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text412&#34; transform=&#34;translate(1002 223.3)&#34;&gt;&lt;tspan id=&#34;tspan414&#34; x=&#34;.734&#34; y=&#34;13&#34; textLength=&#34;42.266&#34; font-weight=&#34;500&#34; font-size=&#34;14&#34;&gt;Events&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text416&#34; transform=&#34;translate(970 320.3)&#34;&gt;&lt;tspan id=&#34;tspan418&#34; x=&#34;0&#34; y=&#34;13&#34; textLength=&#34;41.986&#34; font-weight=&#34;500&#34; font-size=&#34;14&#34;&gt;Beliefs&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text420&#34; font-weight=&#34;500&#34; transform=&#34;translate(1139 295.11)&#34; font-size=&#34;14&#34;&gt;&lt;tspan id=&#34;tspan422&#34; x=&#34;0&#34; y=&#34;13&#34; textLength=&#34;54.964&#34;&gt;Selected&lt;/tspan&gt; &lt;tspan id=&#34;tspan424&#34; x=&#34;0&#34; y=&#34;29.392&#34; textLength=&#34;35.266&#34;&gt;Event&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text426&#34; transform=&#34;translate(1191 412.3)&#34;&gt;&lt;tspan id=&#34;tspan428&#34; x=&#34;0&#34; y=&#34;13&#34; textLength=&#34;34.482&#34; font-weight=&#34;500&#34; font-size=&#34;14&#34;&gt;Plans&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text430&#34; font-weight=&#34;500&#34; transform=&#34;translate(1013 371.11)&#34; font-size=&#34;14&#34;&gt;&lt;tspan id=&#34;tspan432&#34; x=&#34;.277&#34; y=&#34;13&#34; textLength=&#34;54.446&#34;&gt;Relevant&lt;/tspan&gt; &lt;tspan id=&#34;tspan434&#34; x=&#34;10.259&#34; y=&#34;29.392&#34; textLength=&#34;34.482&#34;&gt;Plans&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text436&#34; font-weight=&#34;500&#34; transform=&#34;translate(968 478.61)&#34; font-size=&#34;14&#34;&gt;&lt;tspan id=&#34;tspan438&#34; x=&#34;0&#34; y=&#34;13&#34; textLength=&#34;65.856&#34;&gt;Applicable&lt;/tspan&gt; &lt;tspan id=&#34;tspan440&#34; x=&#34;0&#34; y=&#34;29.392&#34; textLength=&#34;34.482&#34;&gt;Plans&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text442&#34; transform=&#34;translate(1189 628.3)&#34;&gt;&lt;tspan id=&#34;tspan444&#34; x=&#34;0&#34; y=&#34;13&#34; textLength=&#34;61.46&#34; font-weight=&#34;500&#34; font-size=&#34;14&#34;&gt;Intentions&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text446&#34; font-weight=&#34;500&#34; transform=&#34;translate(1013 588.38)&#34; font-size=&#34;14&#34;&gt;&lt;tspan id=&#34;tspan448&#34; x=&#34;.756&#34; y=&#34;13&#34; textLength=&#34;55.244&#34;&gt;Intended&lt;/tspan&gt; &lt;tspan id=&#34;tspan450&#34; x=&#34;13.986&#34; y=&#34;29.392&#34; textLength=&#34;42.014&#34;&gt;Means&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;path id=&#34;path452&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; d=&#34;M1359 590.83v157.91h-80.1&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;text id=&#34;text454&#34; fill=&#34;#000&#34; font-weight=&#34;500&#34; transform=&#34;translate(1372 707.11)&#34; font-size=&#34;14&#34;&gt;&lt;tspan id=&#34;tspan456&#34; x=&#34;0&#34; y=&#34;13&#34; textLength=&#34;54.46&#34;&gt;Updated&lt;/tspan&gt; &lt;tspan id=&#34;tspan458&#34; x=&#34;0&#34; y=&#34;29.392&#34; textLength=&#34;54.46&#34;&gt;Intention&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;line460&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34; stroke-linejoin=&#34;round&#34; d=&#34;M99 243h116.1&#34;/&gt;&lt;text id=&#34;text462&#34; fill=&#34;#000&#34; font-weight=&#34;bold&#34; transform=&#34;translate(103.5 216.77)&#34; font-size=&#34;16&#34;&gt;&lt;tspan id=&#34;tspan464&#34; x=&#34;.42&#34; y=&#34;16&#34; textLength=&#34;26.08&#34;&gt;Per&lt;/tspan&gt; &lt;tspan id=&#34;tspan466&#34; x=&#34;26.212&#34; y=&#34;16&#34; textLength=&#34;42.368&#34;&gt;cepts&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;line468&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34; stroke-linejoin=&#34;round&#34; d=&#34;M98.5 567h116.6&#34;/&gt;&lt;text id=&#34;text470&#34; fill=&#34;#000&#34; transform=&#34;translate(101.5 536.27)&#34;&gt;&lt;tspan id=&#34;tspan472&#34; x=&#34;.192&#34; y=&#34;16&#34; textLength=&#34;77.616&#34; font-weight=&#34;bold&#34; font-size=&#34;16&#34;&gt;Messages&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;line474&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34; stroke-linejoin=&#34;round&#34; d=&#34;M1557 549h105.1&#34;/&gt;&lt;text id=&#34;text476&#34; fill=&#34;#000&#34; transform=&#34;translate(1609 527.27)&#34;&gt;&lt;tspan id=&#34;tspan478&#34; x=&#34;.12&#34; y=&#34;16&#34; textLength=&#34;57.76&#34; font-weight=&#34;bold&#34; font-size=&#34;16&#34;&gt;Actions&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;line480&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34; stroke-linejoin=&#34;round&#34; d=&#34;M1557 695.17l107.1-1.99&#34;/&gt;&lt;text id=&#34;text482&#34; fill=&#34;#000&#34; transform=&#34;translate(1589 668.27)&#34;&gt;&lt;tspan id=&#34;tspan484&#34; x=&#34;.192&#34; y=&#34;16&#34; textLength=&#34;77.616&#34; font-weight=&#34;bold&#34; font-size=&#34;16&#34;&gt;Messages&lt;/tspan&gt;&lt;/text&gt;&lt;g id=&#34;g486&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;&gt;&lt;path id=&#34;line488&#34; d=&#34;M456 516v-38.1&#34;/&gt;&lt;path id=&#34;line490&#34; d=&#34;M1119 279v81.6&#34;/&gt;&lt;path id=&#34;line492&#34; d=&#34;M324 243h72.6&#34;/&gt;&lt;path id=&#34;line494&#34; d=&#34;M456 366v-68.1&#34;/&gt;&lt;path id=&#34;line496&#34; d=&#34;M1071 417h-56.1&#34;/&gt;&lt;path id=&#34;line498&#34; stroke-dasharray=&#34;4 4&#34; d=&#34;M985.98 607.02l158.12 120.14&#34;/&gt;&lt;path id=&#34;line500&#34; stroke-dasharray=&#34;4 4&#34; d=&#34;M979 614l77 101.57&#34;/&gt;&lt;path id=&#34;line502&#34; d=&#34;M1176.6 672l-.3-62.36&#34;/&gt;&lt;path id=&#34;line504&#34; d=&#34;M1227 549h53.1&#34;/&gt;&lt;path id=&#34;path506&#34; d=&#34;M855 126h483v366.6&#34;/&gt;&lt;path id=&#34;line508&#34; d=&#34;M1386 549h71.1&#34;/&gt;&lt;path id=&#34;line510&#34; d=&#34;M1374.2 579.56l86.3 72.89&#34;/&gt;&lt;path id=&#34;line512&#34; d=&#34;M957 463.5v60.6&#34;/&gt;&lt;path id=&#34;path514&#34; d=&#34;M855 156h102v204.6&#34;/&gt;&lt;path id=&#34;line516&#34; d=&#34;M855 318.78l216.7-74.51&#34;/&gt;&lt;path id=&#34;line518&#34; d=&#34;M1413 314.17l-239.5 83.77&#34;/&gt;&lt;path id=&#34;line520&#34; d=&#34;M324 567h71.1&#34;/&gt;&lt;path id=&#34;path522&#34; d=&#34;M456 366v-23h3l312.34.46h1.76&#34;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/p&gt;

&lt;h2 id=&#34;lightjason-agent-cycle&#34;&gt;LightJason Agent Cycle&lt;/h2&gt;

&lt;p&gt;On a general point of view we reduce the Jason agent cycle to the neccessary elements. This allows us to build a very efficient execution structure based on a &lt;em&gt;parallel data-streaming architecture&lt;/em&gt;. On the other hand we generalize the cycle structure, so we can build a more flexible architecture. But &lt;em&gt;keep in mind&lt;/em&gt; the LightJason agent cycle is run in parallel with optional on-demand / lazy-binding data elements.&lt;/p&gt;

&lt;p&gt;&lt;svg id=&#34;lightjasonagentcycle&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; id=&#34;svg2&#34; viewBox=&#34;75 12 1188 610&#34;&gt;&lt;defs id=&#34;defs6&#34;&gt;&lt;font-face id=&#34;font-face8&#34; font-weight=&#34;bold&#34; descent=&#34;-229.98&#34; ascent=&#34;770.02&#34; cap-height=&#34;719.727&#34; x-height=&#34;532.227&#34; underline-thickness=&#34;49.316&#34; underline-position=&#34;-75.684&#34; font-size=&#34;12&#34;&gt;&lt;font-face-src&gt;&lt;font-face-name name=&#34;Helvetica-Bold&#34;/&gt;&lt;/font-face-src&gt;&lt;/font-face&gt;&lt;font-face id=&#34;font-face10&#34; font-weight=&#34;bold&#34; descent=&#34;-216.995&#34; ascent=&#34;975.006&#34; cap-height=&#34;714&#34; x-height=&#34;517&#34; underline-thickness=&#34;50&#34; underline-position=&#34;-100&#34; panose-1=&#34;2 0 8 3 0 0 0 9 0 4&#34; font-size=&#34;20&#34;&gt;&lt;font-face-src&gt;&lt;font-face-name name=&#34;HelveticaNeue-Bold&#34;/&gt;&lt;/font-face-src&gt;&lt;/font-face&gt;&lt;font-face id=&#34;font-face12&#34; font-weight=&#34;500&#34; descent=&#34;-229.98&#34; ascent=&#34;770.02&#34; cap-height=&#34;717.285&#34; x-height=&#34;522.949&#34; underline-thickness=&#34;49.316&#34; underline-position=&#34;-75.684&#34; font-size=&#34;12&#34;&gt;&lt;font-face-src&gt;&lt;font-face-name name=&#34;Helvetica&#34;/&gt;&lt;/font-face-src&gt;&lt;/font-face&gt;&lt;font-face id=&#34;font-face14&#34; font-weight=&#34;500&#34; descent=&#34;-212.997&#34; ascent=&#34;951.996&#34; cap-height=&#34;714&#34; x-height=&#34;517&#34; underline-thickness=&#34;50&#34; underline-position=&#34;-100&#34; panose-1=&#34;2 0 5 3 0 0 0 2 0 4&#34; font-size=&#34;16&#34;&gt;&lt;font-face-src&gt;&lt;font-face-name name=&#34;HelveticaNeue&#34;/&gt;&lt;/font-face-src&gt;&lt;/font-face&gt;&lt;font-face id=&#34;font-face16&#34; font-weight=&#34;bold&#34; descent=&#34;-216.995&#34; ascent=&#34;975.006&#34; cap-height=&#34;714&#34; x-height=&#34;517&#34; underline-thickness=&#34;50&#34; underline-position=&#34;-100&#34; panose-1=&#34;2 0 8 3 0 0 0 9 0 4&#34; font-size=&#34;16&#34;&gt;&lt;font-face-src&gt;&lt;font-face-name name=&#34;HelveticaNeue-Bold&#34;/&gt;&lt;/font-face-src&gt;&lt;/font-face&gt;&lt;marker markerHeight=&#34;8&#34; markerWidth=&#34;10&#34; viewBox=&#34;-1 -4 10 8&#34; id=&#34;FilledArrow_Marker&#34; overflow=&#34;visible&#34; orient=&#34;auto&#34; color=&#34;#000&#34;&gt;&lt;g id=&#34;g19&#34;&gt;&lt;path id=&#34;path21&#34; d=&#34;M8 0L0-3v6z&#34; fill=&#34;currentColor&#34; stroke=&#34;currentColor&#34;/&gt;&lt;/g&gt;&lt;/marker&gt;&lt;marker markerHeight=&#34;6&#34; markerWidth=&#34;5&#34; viewBox=&#34;-1 -3 5 6&#34; id=&#34;Ball_Marker&#34; overflow=&#34;visible&#34; orient=&#34;auto&#34; color=&#34;#000&#34;&gt;&lt;g id=&#34;g24&#34;&gt;&lt;circle id=&#34;circle26&#34; r=&#34;1.4&#34; cx=&#34;1.4&#34; fill=&#34;none&#34; stroke=&#34;currentColor&#34;/&gt;&lt;/g&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;path id=&#34;rect36&#34; fill=&#34;#dfd&#34; class=&#34;svg-agentcycle-trigger&#34; d=&#34;M360 135h171v72H360z&#34;/&gt;&lt;path id=&#34;rect38&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M360 135h171v72H360z&#34;/&gt;&lt;text y=&#34;140&#34; x=&#34;365&#34; id=&#34;text40&#34;&gt;&lt;tspan id=&#34;tspan42&#34; textLength=&#34;7.33&#34; y=&#34;151&#34; x=&#34;405.483&#34; font-weight=&#34;700&#34; font-size=&#34;12&#34;&gt;T&lt;/tspan&gt; &lt;tspan id=&#34;tspan44&#34; textLength=&#34;73.359&#34; y=&#34;151&#34; x=&#34;412.157&#34; font-weight=&#34;700&#34; font-size=&#34;12&#34;&gt;rigger Cache&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;rect46&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-width=&#34;2&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M198 99h981v432H198z&#34;/&gt;&lt;text y=&#34;109&#34; x=&#34;213&#34; id=&#34;text48&#34;&gt;&lt;tspan id=&#34;tspan50&#34; textLength=&#34;56.3&#34; y=&#34;129&#34; x=&#34;1107.7&#34; font-weight=&#34;700&#34; font-size=&#34;20&#34;&gt;Agent&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;rect52&#34; fill=&#34;#ffe400&#34; class=&#34;svg-agentcycle-planselect&#34; d=&#34;M846 108h81v45h-81z&#34;/&gt;&lt;path id=&#34;rect54&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M846 108h81v45h-81z&#34;/&gt;&lt;text y=&#34;116.5&#34; x=&#34;851&#34; id=&#34;text56&#34;&gt;&lt;tspan id=&#34;tspan58&#34; textLength=&#34;24.674&#34; y=&#34;127.5&#34; x=&#34;874.163&#34; font-weight=&#34;500&#34; font-size=&#34;12&#34;&gt;Cost&lt;/tspan&gt; &lt;tspan id=&#34;tspan60&#34; textLength=&#34;64.717&#34; y=&#34;141.5&#34; x=&#34;854.142&#34; font-weight=&#34;500&#34; font-size=&#34;12&#34;&gt;Aggregation&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;path62&#34; d=&#34;M944.546 441l63 40.5-63 40.5-63-40.5z&#34; fill=&#34;#fff&#34;/&gt;&lt;path id=&#34;path64&#34; d=&#34;M944.546 441l63 40.5-63 40.5-63-40.5z&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;text y=&#34;473.69&#34; x=&#34;903.556&#34; id=&#34;text66&#34;&gt;&lt;tspan id=&#34;tspan68&#34; textLength=&#34;78.035&#34; y=&#34;484.69&#34; x=&#34;906.788&#34; font-weight=&#34;500&#34; font-size=&#34;12&#34;&gt;Defuzzification&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;rect72&#34; fill=&#34;#dfd&#34; class=&#34;svg-agentcycle-intentions&#34; d=&#34;M720 279h99v162h-99z&#34;/&gt;&lt;path id=&#34;rect74&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M720 279h99v162h-99z&#34;/&gt;&lt;text y=&#34;284&#34; x=&#34;725&#34; id=&#34;text76&#34;&gt;&lt;tspan id=&#34;tspan78&#34; textLength=&#34;46.031&#34; y=&#34;295&#34; x=&#34;748.151&#34; font-weight=&#34;700&#34; font-size=&#34;12&#34;&gt;Parallel&lt;/tspan&gt; &lt;tspan id=&#34;tspan80&#34; textLength=&#34;57.328&#34; y=&#34;309&#34; x=&#34;740.836&#34; font-weight=&#34;700&#34; font-size=&#34;12&#34;&gt;Intentions&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;rect82&#34; fill=&#34;#ccc&#34; class=&#34;svg-agentcycle-events&#34; d=&#34;M387 160.412h9v40.235h-9z&#34;/&gt;&lt;path id=&#34;rect84&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M387 160.412h9v40.235h-9z&#34;/&gt;&lt;path id=&#34;rect86&#34; fill=&#34;#ccc&#34; class=&#34;svg-agentcycle-events&#34; d=&#34;M414 160.412h9v40.235h-9z&#34;/&gt;&lt;path id=&#34;rect88&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M414 160.412h9v40.235h-9z&#34;/&gt;&lt;path id=&#34;rect90&#34; fill=&#34;#ccc&#34; class=&#34;svg-agentcycle-events&#34; d=&#34;M441 160.412h9v40.235h-9z&#34;/&gt;&lt;path id=&#34;rect92&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M441 160.412h9v40.235h-9z&#34;/&gt;&lt;path id=&#34;rect94&#34; fill=&#34;#ccc&#34; class=&#34;svg-agentcycle-events&#34; d=&#34;M468 160.412h9v40.235h-9z&#34;/&gt;&lt;path id=&#34;rect96&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M468 160.412h9v40.235h-9z&#34;/&gt;&lt;path id=&#34;rect98&#34; fill=&#34;#ccc&#34; class=&#34;svg-agentcycle-events&#34; d=&#34;M495 160.412h9v40.235h-9z&#34;/&gt;&lt;path id=&#34;rect100&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M495 160.412h9v40.235h-9z&#34;/&gt;&lt;text y=&#34;173.776&#34; x=&#34;509&#34; id=&#34;text102&#34;&gt;&lt;tspan id=&#34;tspan104&#34; textLength=&#34;16&#34; y=&#34;188.776&#34; x=&#34;509&#34; font-weight=&#34;500&#34; font-size=&#34;16&#34;&gt;…&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;rect106&#34; fill=&#34;#fff&#34; d=&#34;M225 135h63v72h-63z&#34;/&gt;&lt;path id=&#34;path108&#34; d=&#34;M225 135h63v72h-63z&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; stroke-dasharray=&#34;4 4&#34;/&gt;&lt;text y=&#34;157&#34; x=&#34;230&#34; id=&#34;text110&#34;&gt;&lt;tspan id=&#34;tspan112&#34; textLength=&#34;47.373&#34; y=&#34;168&#34; x=&#34;232.813&#34; font-weight=&#34;500&#34; font-size=&#34;12&#34;&gt;Suspend&lt;/tspan&gt; &lt;tspan id=&#34;tspan114&#34; textLength=&#34;26.666&#34; y=&#34;182&#34; x=&#34;243.167&#34; font-weight=&#34;500&#34; font-size=&#34;12&#34;&gt;Filter&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;rect116&#34; fill=&#34;#ccc&#34; class=&#34;svg-agentcycle-triggeritem&#34; d=&#34;M748.5 327h42v9h-42z&#34;/&gt;&lt;path id=&#34;rect118&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M748.5 327h42v9h-42z&#34;/&gt;&lt;path id=&#34;rect120&#34; fill=&#34;#ccc&#34; class=&#34;svg-agentcycle-triggeritem&#34; d=&#34;M748.5 345h42v9h-42z&#34;/&gt;&lt;path id=&#34;rect122&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M748.5 345h42v9h-42z&#34;/&gt;&lt;path id=&#34;rect124&#34; fill=&#34;#ccc&#34; class=&#34;svg-agentcycle-triggeritem&#34; d=&#34;M748.5 363h42v9h-42z&#34;/&gt;&lt;path id=&#34;rect126&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M748.5 363h42v9h-42z&#34;/&gt;&lt;path id=&#34;rect128&#34; fill=&#34;#ccc&#34; class=&#34;svg-agentcycle-triggeritem&#34; d=&#34;M748.5 381h42v9h-42z&#34;/&gt;&lt;path id=&#34;rect130&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M748.5 381h42v9h-42z&#34;/&gt;&lt;path id=&#34;rect132&#34; fill=&#34;#ccc&#34; class=&#34;svg-agentcycle-triggeritem&#34; d=&#34;M748.5 399h42v9h-42z&#34;/&gt;&lt;path id=&#34;rect134&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M748.5 399h42v9h-42z&#34;/&gt;&lt;text y=&#34;416.776&#34; x=&#34;762.157&#34; id=&#34;text136&#34;&gt;&lt;tspan id=&#34;tspan138&#34; textLength=&#34;16&#34; y=&#34;431.776&#34; x=&#34;762.157&#34; font-weight=&#34;500&#34; font-size=&#34;16&#34;&gt;…&lt;/tspan&gt;&lt;/text&gt;&lt;text y=&#34;452.776&#34; x=&#34;1085&#34; id=&#34;text140&#34;&gt;&lt;tspan id=&#34;tspan142&#34; textLength=&#34;16&#34; y=&#34;467.776&#34; x=&#34;1085&#34; font-weight=&#34;500&#34; font-size=&#34;16&#34;&gt;…&lt;/tspan&gt;&lt;/text&gt;&lt;text y=&#34;-1248.732&#34; x=&#34;338&#34; id=&#34;text144&#34; transform=&#34;rotate(90)&#34;&gt;&lt;tspan id=&#34;tspan146&#34; textLength=&#34;57.76&#34; y=&#34;-1232.732&#34; x=&#34;358.12&#34; font-weight=&#34;700&#34; font-size=&#34;16&#34;&gt;Actions&lt;/tspan&gt;&lt;/text&gt;&lt;text y=&#34;-108.795&#34; x=&#34;140&#34; id=&#34;text148&#34; transform=&#34;rotate(90)&#34;&gt;&lt;tspan id=&#34;tspan150&#34; textLength=&#34;9.776&#34; y=&#34;-92.795&#34; x=&#34;148.692&#34; font-weight=&#34;700&#34; font-size=&#34;16&#34;&gt;T&lt;/tspan&gt; &lt;tspan id=&#34;tspan152&#34; textLength=&#34;45.312&#34; y=&#34;-92.795&#34; x=&#34;156.996&#34; font-weight=&#34;700&#34; font-size=&#34;16&#34;&gt;rigger&lt;/tspan&gt;&lt;/text&gt;&lt;text y=&#34;26.036&#34; x=&#34;573&#34; id=&#34;text154&#34;&gt;&lt;tspan id=&#34;tspan156&#34; textLength=&#34;87.68&#34; y=&#34;42.036&#34; x=&#34;573.16&#34; font-weight=&#34;700&#34; font-size=&#34;16&#34;&gt;on-demand&lt;/tspan&gt; &lt;tspan id=&#34;tspan158&#34; textLength=&#34;53.92&#34; y=&#34;61.5&#34; x=&#34;590.04&#34; font-weight=&#34;700&#34; font-size=&#34;16&#34;&gt;access&lt;/tspan&gt;&lt;/text&gt;&lt;text y=&#34;26.036&#34; x=&#34;850&#34; id=&#34;text160&#34;&gt;&lt;tspan id=&#34;tspan162&#34; textLength=&#34;33.184&#34; y=&#34;42.036&#34; x=&#34;869.408&#34; font-weight=&#34;700&#34; font-size=&#34;16&#34;&gt;cost&lt;/tspan&gt; &lt;tspan id=&#34;tspan164&#34; textLength=&#34;71.376&#34; y=&#34;61.5&#34; x=&#34;850.312&#34; font-weight=&#34;700&#34; font-size=&#34;16&#34;&gt;definition&lt;/tspan&gt;&lt;/text&gt;&lt;text y=&#34;568.549&#34; x=&#34;900.546&#34; id=&#34;text168&#34;&gt;&lt;tspan id=&#34;tspan170&#34; textLength=&#34;87.68&#34; y=&#34;584.549&#34; x=&#34;900.706&#34; font-weight=&#34;700&#34; font-size=&#34;16&#34;&gt;on-demand&lt;/tspan&gt; &lt;tspan id=&#34;tspan172&#34; textLength=&#34;53.04&#34; y=&#34;604.013&#34; x=&#34;918.026&#34; font-weight=&#34;700&#34; font-size=&#34;16&#34;&gt;update&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;line174&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34; d=&#34;M117 135l98.414 25.397&#34;/&gt;&lt;path id=&#34;line176&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34; d=&#34;M117 153l98.181 12.669&#34;/&gt;&lt;path id=&#34;line178&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34; d=&#34;M117 171h98.1&#34;/&gt;&lt;path id=&#34;line180&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34; d=&#34;M117 189l98.181-12.669&#34;/&gt;&lt;path id=&#34;line182&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34; d=&#34;M117 207l98.414-25.397&#34;/&gt;&lt;path id=&#34;path184&#34; d=&#34;M288 156.394c9.313-2.006 21.13-3.394 36-3.394 8.464 0 17.288.45 26.147 1.207&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path186&#34; d=&#34;M288 163.697c9.313-1.003 21.13-1.697 36-1.697 8.453 0 17.265.224 26.112.602&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path188&#34; d=&#34;M288 171h62.1&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path190&#34; d=&#34;M288 179.035c7.236.593 16.114.965 27 .965 11.007 0 23.003-.38 35.117-.985&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path192&#34; d=&#34;M288 185.606c9.313 2.006 21.13 3.394 36 3.394 8.464 0 17.288-.45 26.147-1.207&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path194&#34; d=&#34;M801 495.063L242.937 495V216.9&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path196&#34; d=&#34;M270 207v234h347v-17.1&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; stroke-dasharray=&#34;4 4&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;rect198&#34; fill=&#34;#fff&#34; d=&#34;M449.092 426h73v30h-73z&#34;/&gt;&lt;text y=&#34;431.776&#34; x=&#34;454.092&#34; id=&#34;text200&#34;&gt;&lt;tspan id=&#34;tspan202&#34; textLength=&#34;62.224&#34; y=&#34;446.776&#34; x=&#34;454.48&#34; font-weight=&#34;500&#34; font-size=&#34;16&#34;&gt;wake-up&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;path204&#34; d=&#34;M499.406 200.647L499 288v70h64.458&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path206&#34; d=&#34;M472.425 200.647L472 315v54h90.1&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path208&#34; d=&#34;M445.398 200.647L445 279v99h118.004&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path210&#34; d=&#34;M418.451 200.647L418 387h147.844&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path212&#34; d=&#34;M391.546 200.647L392 398h180.687&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;line214&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34; d=&#34;M581 171h-40.1&#34;/&gt;&lt;path id=&#34;line216&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34; d=&#34;M742.038 206.655l-91.535 118.846&#34;/&gt;&lt;path id=&#34;path218&#34; d=&#34;M606.47 207c-1.993 11.854-3.47 26.782-3.47 45 0 21.498 2.056 43.702 4.593 62.914&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path220&#34; d=&#34;M628.354 325.449C633.734 301.196 639 270.445 639 243c0-9.985-.697-18.697-1.843-26.272&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path222&#34; d=&#34;M805.979 197.36C839.283 222.279 887.79 260.83 918 295c6.772 7.66 12.189 14.607 16.496 20.895&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path224&#34; d=&#34;M906.566 344.846C880.491 326.924 845.874 300.398 819 270c-15.125-17.109-25.629-32.99-32.923-46.802&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path226&#34; d=&#34;M653 185.698c8.822 1.956 19.185 3.302 31 3.302 11.211 0 22.361-1.212 32.727-3.007&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path228&#34; d=&#34;M727.365 155.169C719.835 153.845 711.36 153 702 153c-13.68 0-27.22 1.805-39.336 4.271&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;line230&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34; d=&#34;M972 171H824.4&#34;/&gt;&lt;path id=&#34;line232&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34; d=&#34;M846 144.519l-24.611 8.519&#34;/&gt;&lt;path id=&#34;line234&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-width=&#34;3&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#Ball_Marker)&#34; d=&#34;M617 135V79.9&#34;/&gt;&lt;path id=&#34;line236&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-width=&#34;3&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#Ball_Marker)&#34; d=&#34;M886.368 108l-.166-28.1&#34;/&gt;&lt;path id=&#34;path238&#34; d=&#34;M659.01 352.84c13.016-4.484 27.917-9.134 42.99-12.84 14.38-3.536 26.665-5.66 36.657-6.92&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path240&#34; d=&#34;M662 369.181a3916.612 3916.612 0 0 0 76.6-.893&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path242&#34; d=&#34;M660.237 381.502A306.626 306.626 0 0 0 684 385c19.697 2.131 39.206 2.423 54.604 2.11&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path244&#34; d=&#34;M656.467 390.642A197.251 197.251 0 0 0 684 399c19.697 4.456 39.206 5.784 54.604 5.91&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path246&#34; d=&#34;M661.344 361.324c15.483-2.518 33.125-5.21 49.656-7.324 10.928-1.397 20.07-2.376 27.632-3.058&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path248&#34; d=&#34;M790.5 332.906c10.66 1.278 25.827 3.665 46.5 8.094 18.188 3.896 37.5 8.701 54.667 13.224&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path250&#34; d=&#34;M790.5 351.302c12.893 1.19 31.552 3.03 55.5 5.698a4673.655 4673.655 0 0 1 44.074 5.14&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path252&#34; d=&#34;M790.5 368.85c10.896.49 26.428.97 47.5 1.15 17.229.148 35.346.072 51.656-.09&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path254&#34; d=&#34;M790.5 387.176c10.66.184 25.827-.227 46.5-2.176 17.753-1.673 36.577-4.2 53.431-6.752&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path256&#34; d=&#34;M790.5 406.004c8.688-.352 20.783-1.71 37.5-5.004 20.365-4.014 43.658-10.127 64.04-15.94&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;line258&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M910.739 398.702l-109.614 96.306&#34;/&gt;&lt;path id=&#34;line260&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-width=&#34;3&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#Ball_Marker)&#34; d=&#34;M944.546 522v31.613&#34;/&gt;&lt;path id=&#34;path262&#34; d=&#34;M930.692 411.825C928.532 421.438 927 431.58 927 441c0 .312.002.62.005.928&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path264&#34; d=&#34;M969.336 456.936C970.98 452.417 972 447.14 972 441c0-7.3-1.44-15.032-3.66-22.616&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path266&#34; d=&#34;M982.517 344.834c4.9-1.734 10.375-3.373 16.483-4.834 8.493-2.032 17.412-3.532 26.252-4.632&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path268&#34; d=&#34;M989.19 363.346c5.713-.48 11.982-.938 18.81-1.346a979.805 979.805 0 0 1 17.135-.868&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path270&#34; d=&#34;M987.19 383.398A262.34 262.34 0 0 0 998.546 385c8.583 1.027 17.621 1.721 26.582 2.176&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path272&#34; d=&#34;M978.126 398.958c5.838 2.946 12.603 5.704 20.42 8.042 8.598 2.572 17.651 4.39 26.627 5.656&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path274&#34; d=&#34;M967.806 407.534c7.737 8.217 17.798 16.273 30.74 22.466 8.63 4.13 17.718 7.038 26.727 9.05&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path276&#34; d=&#34;M978.913 339.946a104.175 104.175 0 0 0 4.633-6.946c7.767-12.714 12.626-26.688 15.601-38&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;path id=&#34;line278&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34; d=&#34;M1154.999 333.155l59.101.153&#34;/&gt;&lt;path id=&#34;line280&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34; d=&#34;M1154.999 360.155l59.101.153&#34;/&gt;&lt;path id=&#34;line282&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34; d=&#34;M1154.988 387.465l59.112.458&#34;/&gt;&lt;path id=&#34;line284&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34; d=&#34;M1155 414h59.1&#34;/&gt;&lt;path id=&#34;line286&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34; d=&#34;M1155 441h59.1&#34;/&gt;&lt;circle id=&#34;circle288&#34; r=&#34;45&#34; cy=&#34;369&#34; cx=&#34;617&#34; fill=&#34;#dfd&#34; class=&#34;svg-agentcycle-checkcontext&#34; /&gt;&lt;circle id=&#34;circle290&#34; r=&#34;45&#34; cy=&#34;369&#34; cx=&#34;617&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;text y=&#34;355&#34; x=&#34;586&#34; id=&#34;text292&#34;&gt;&lt;tspan id=&#34;tspan294&#34; textLength=&#34;34.014&#34; y=&#34;366&#34; x=&#34;599.993&#34; font-weight=&#34;500&#34; font-size=&#34;12&#34;&gt;Check&lt;/tspan&gt; &lt;tspan id=&#34;tspan296&#34; textLength=&#34;41.355&#34; y=&#34;380&#34; x=&#34;596.322&#34; font-weight=&#34;500&#34; font-size=&#34;12&#34;&gt;Context&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;rect298&#34; fill=&#34;#dfd&#34; class=&#34;svg-agentcycle-beliefbase&#34; d=&#34;M581 135h72v72h-72z&#34;/&gt;&lt;path id=&#34;rect300&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M581 135h72v72h-72z&#34;/&gt;&lt;text y=&#34;140&#34; x=&#34;586&#34; id=&#34;text302&#34;&gt;&lt;tspan id=&#34;tspan304&#34; textLength=&#34;60.029&#34; y=&#34;151&#34; x=&#34;586.985&#34; font-weight=&#34;700&#34; font-size=&#34;12&#34;&gt;Beliefbase&lt;/tspan&gt;&lt;/text&gt;&lt;circle id=&#34;circle306&#34; r=&#34;45&#34; cy=&#34;171&#34; cx=&#34;769.5&#34; class=&#34;svg-agentcycle-unify&#34; fill=&#34;#dfd&#34;/&gt;&lt;circle id=&#34;circle308&#34; r=&#34;45&#34; cy=&#34;171&#34; cx=&#34;769.5&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;text y=&#34;164&#34; x=&#34;738.5&#34; id=&#34;text310&#34;&gt;&lt;tspan id=&#34;tspan312&#34; textLength=&#34;56.027&#34; y=&#34;175&#34; x=&#34;741.486&#34; font-weight=&#34;500&#34; font-size=&#34;12&#34;&gt;Unification&lt;/tspan&gt;&lt;/text&gt;&lt;circle id=&#34;circle316&#34; r=&#34;45&#34; cy=&#34;369&#34; cx=&#34;944.546&#34; class=&#34;svg-agentcycle-execution&#34; fill=&#34;#dfd&#34;/&gt;&lt;circle id=&#34;circle318&#34; r=&#34;45&#34; cy=&#34;369&#34; cx=&#34;944.546&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;text y=&#34;362&#34; x=&#34;913.546&#34; id=&#34;text320&#34;&gt;&lt;tspan id=&#34;tspan322&#34; textLength=&#34;52.699&#34; y=&#34;373&#34; x=&#34;918.196&#34; font-weight=&#34;500&#34; font-size=&#34;12&#34;&gt;Execution&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;rect324&#34; fill=&#34;#fff&#34; d=&#34;M972 250h63v45h-63z&#34;/&gt;&lt;path id=&#34;rect326&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M972 250h63v45h-63z&#34;/&gt;&lt;text y=&#34;258.5&#34; x=&#34;977&#34; id=&#34;text328&#34;&gt;&lt;tspan id=&#34;tspan330&#34; textLength=&#34;56.033&#34; y=&#34;269.5&#34; x=&#34;977.15&#34; font-weight=&#34;500&#34; font-size=&#34;12&#34;&gt;Execution&lt;/tspan&gt; &lt;tspan id=&#34;tspan332&#34; textLength=&#34;42.012&#34; y=&#34;283.5&#34; x=&#34;982.494&#34; font-weight=&#34;500&#34; font-size=&#34;12&#34;&gt;Statistic&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;rect334&#34; fill=&#34;#dfd&#34; class=&#34;svg-agentcycle-plans&#34; d=&#34;M972 120h63v102h-63z&#34;/&gt;&lt;path id=&#34;rect336&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M972 120h63v102h-63z&#34;/&gt;&lt;text y=&#34;125&#34; x=&#34;977&#34; id=&#34;text338&#34;&gt;&lt;tspan id=&#34;tspan340&#34; textLength=&#34;28.676&#34; y=&#34;136&#34; x=&#34;990.829&#34; font-weight=&#34;700&#34; font-size=&#34;12&#34;&gt;Plan&lt;/tspan&gt; &lt;tspan id=&#34;tspan342&#34; textLength=&#34;40.682&#34; y=&#34;150&#34; x=&#34;983.159&#34; font-weight=&#34;700&#34; font-size=&#34;12&#34;&gt;Library&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;path344&#34; d=&#34;M1044 324h102a9 9 0 1 1 0 18h-102a9 9 0 1 1 0-18z&#34; fill=&#34;#dfd&#34; class=&#34;svg-agentcycle-action&#34; /&gt;&lt;path id=&#34;path346&#34; d=&#34;M1044 324h102a9 9 0 1 1 0 18h-102a9 9 0 1 1 0-18z&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;text y=&#34;326&#34; x=&#34;1040&#34; id=&#34;text348&#34;&gt;&lt;tspan id=&#34;tspan350&#34; textLength=&#34;16.008&#34; y=&#34;337&#34; x=&#34;1086.996&#34; font-weight=&#34;500&#34; font-size=&#34;12&#34;&gt;act&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;path352&#34; d=&#34;M1044 351h102a9 9 0 1 1 0 18h-102a9 9 0 1 1 0-18z&#34; fill=&#34;#dfd&#34; class=&#34;svg-agentcycle-action&#34; /&gt;&lt;path id=&#34;path354&#34; d=&#34;M1044 351h102a9 9 0 1 1 0 18h-102a9 9 0 1 1 0-18z&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;text y=&#34;353&#34; x=&#34;1040&#34; id=&#34;text356&#34;&gt;&lt;tspan id=&#34;tspan358&#34; textLength=&#34;16.008&#34; y=&#34;364&#34; x=&#34;1086.996&#34; font-weight=&#34;500&#34; font-size=&#34;12&#34;&gt;act&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;path360&#34; d=&#34;M1044 378h102a9 9 0 1 1 0 18h-102a9 9 0 1 1 0-18z&#34; fill=&#34;#dfd&#34; class=&#34;svg-agentcycle-action&#34; /&gt;&lt;path id=&#34;path362&#34; d=&#34;M1044 378h102a9 9 0 1 1 0 18h-102a9 9 0 1 1 0-18z&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;text y=&#34;380&#34; x=&#34;1040&#34; id=&#34;text364&#34;&gt;&lt;tspan id=&#34;tspan366&#34; textLength=&#34;16.008&#34; y=&#34;391&#34; x=&#34;1086.996&#34; font-weight=&#34;500&#34; font-size=&#34;12&#34;&gt;act&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;path368&#34; d=&#34;M1044 405h102a9 9 0 1 1 0 18h-102a9 9 0 1 1 0-18z&#34; fill=&#34;#dfd&#34; class=&#34;svg-agentcycle-action&#34; /&gt;&lt;path id=&#34;path370&#34; d=&#34;M1044 405h102a9 9 0 1 1 0 18h-102a9 9 0 1 1 0-18z&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;text y=&#34;407&#34; x=&#34;1040&#34; id=&#34;text372&#34;&gt;&lt;tspan id=&#34;tspan374&#34; textLength=&#34;16.008&#34; y=&#34;418&#34; x=&#34;1086.996&#34; font-weight=&#34;500&#34; font-size=&#34;12&#34;&gt;act&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;path376&#34; d=&#34;M1044 432h102a9 9 0 1 1 0 18h-102a9 9 0 1 1 0-18z&#34; fill=&#34;#dfd&#34; class=&#34;svg-agentcycle-action&#34; /&gt;&lt;path id=&#34;path378&#34; d=&#34;M1044 432h102a9 9 0 1 1 0 18h-102a9 9 0 1 1 0-18z&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;text y=&#34;434&#34; x=&#34;1040&#34; id=&#34;text380&#34;&gt;&lt;tspan id=&#34;tspan382&#34; textLength=&#34;16.008&#34; y=&#34;445&#34; x=&#34;1086.996&#34; font-weight=&#34;500&#34; font-size=&#34;12&#34;&gt;act&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;line384&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34; d=&#34;M1003.5 250v-18.1&#34;/&gt;&lt;path id=&#34;line386&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34; d=&#34;M972 160.096l-35.645-12.338&#34;/&gt;&lt;/svg&gt;&lt;/p&gt;

&lt;h3 id=&#34;perceiving-messaging&#34;&gt;Perceiving &amp;amp; Messaging&lt;/h3&gt;

&lt;p&gt;The LightJason AgentSpeak(L++) structure does not distinguish between &lt;em&gt;messages&lt;/em&gt; and &lt;em&gt;perceiving&lt;/em&gt;, we reduce this concept to two elements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;triggers&lt;/strong&gt; which are &lt;em&gt;pushed data&lt;/em&gt; for the agent&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;on-demand access&lt;/strong&gt; which is a component of the beliefbase to read knowledge on-demand during runtime&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All triggers will be cached, instantiate and execute in parallel during the cycle. During execution new incoming triggers will be stored inside the cache.
The execution can get access via unification to the beliefbase, so the beliefs can be unified during execution.
A statistic will count fails and successful runs of the plans. The &lt;em&gt;cost aggregation&lt;/em&gt; component allows to define for each action a cost value, named &lt;em&gt;score&lt;/em&gt;, which can be used by for an optimized execution.&lt;/p&gt;

&lt;h3 id=&#34;terms-and-literals&#34;&gt;Terms and Literals&lt;/h3&gt;

&lt;p&gt;The LightJason architecture does not implement all elements of a &lt;em&gt;logical programming language&lt;/em&gt;. We reduce the concept also, so that we can optimize the execution performance. We define two elements only:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;literals&lt;/strong&gt; which defines the logical literal with &lt;a href=&#34;#literal&#34; id=&#34;animate-literal-negation&#34;&gt;negation&lt;/a&gt;, &lt;a href=&#34;#literal&#34; id=&#34;animate-literal-functor&#34;&gt;functor&lt;/a&gt;, &lt;a href=&#34;#literal&#34; id=&#34;animate-literal-values&#34;&gt;values&lt;/a&gt; and &lt;a href=&#34;#literal&#34; id=&#34;animate-literal-annotation&#34;&gt;annotation&lt;/a&gt; list&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;raw terms&lt;/strong&gt; which defines a &lt;em&gt;wrapper&lt;/em&gt; around any &lt;a href=&#34;#literal&#34; id=&#34;animate-literal-raw&#34;&gt;native Java object&lt;/a&gt; type&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;svg id=&#34;literal&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;207 192 743 111&#34;&gt;&lt;g fill=&#34;none&#34;&gt;&lt;text transform=&#34;translate(274.48 206.72)&#34; fill=&#34;#000&#34;&gt;&lt;tspan class=&#34;svg-literal-negation svg-literal-storage&#34; font-size=&#34;20&#34; font-weight=&#34;500&#34; x=&#34;0&#34; y=&#34;19&#34; textLength=&#34;12&#34;&gt;~&lt;/tspan&gt;&lt;/text&gt;&lt;text transform=&#34;translate(545.063 206.72)&#34; fill=&#34;#000&#34;&gt;&lt;tspan class=&#34;svg-literal-values svg-literal-storage&#34; font-size=&#34;20&#34; font-weight=&#34;500&#34; x=&#34;.01&#34; y=&#34;19&#34; textLength=&#34;205.98&#34;&gt;(value(&lt;tspan class=&#34;svg-literal-raw&#34;&gt;5&lt;/tspan&gt;), time(&lt;tspan class=&#34;svg-literal-raw&#34;&gt;“12:00“&lt;/tspan&gt;))&lt;/tspan&gt;&lt;/text&gt;&lt;text transform=&#34;translate(760.698 206.72)&#34; fill=&#34;#000&#34;&gt;&lt;tspan class=&#34;svg-literal-annotation svg-literal-storage&#34; font-size=&#34;20&#34; font-weight=&#34;500&#34; x=&#34;.09&#34; y=&#34;19&#34; textLength=&#34;175.44&#34;&gt;[source(&lt;tspan class=&#34;svg-literal-raw&#34;&gt;“sensor 1“&lt;/tspan&gt;)]&lt;/tspan&gt;&lt;/text&gt;&lt;text transform=&#34;translate(293.563 206.72)&#34; fill=&#34;#000&#34;&gt;&lt;tspan class=&#34;svg-literal-functor&#34; font-size=&#34;20&#34; font-weight=&#34;500&#34; x=&#34;.46&#34; y=&#34;19&#34; textLength=&#34;240.8&#34;&gt;&lt;tspan class=&#34;svg-literal-view&#34;&gt;group&lt;/tspan&gt;/&lt;tspan class=&#34;svg-literal-view&#34;&gt;subgroup&lt;/tspan&gt;/&lt;tspan class=&#34;svg-literal-storage&#34;&gt;any-name&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;&lt;path stroke=&#34;#a5a5a5&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M765 235.125l171 .93m-390.667-.93h215.5m-468.5 0h243m-247.302.002l-19.406-.002M848.198 264v-28&#34;/&gt;&lt;text transform=&#34;translate(221.063 269.776)&#34; fill=&#34;#a5a5a5&#34;&gt;&lt;tspan class=&#34;svg-literal-negation&#34; font-size=&#34;16&#34; font-weight=&#34;500&#34; x=&#34;.032&#34; y=&#34;15&#34; textLength=&#34;61.936&#34;&gt;negation&lt;/tspan&gt;&lt;/text&gt;&lt;text transform=&#34;translate(388.563 269.776)&#34; fill=&#34;#a5a5a5&#34;&gt;&lt;tspan class=&#34;svg-literal-functor&#34; font-size=&#34;16&#34; font-weight=&#34;500&#34; x=&#34;.164&#34; y=&#34;15&#34; textLength=&#34;50.672&#34;&gt;functor&lt;/tspan&gt;&lt;/text&gt;&lt;text transform=&#34;translate(625.063 269.776)&#34; fill=&#34;#a5a5a5&#34;&gt;&lt;tspan class=&#34;svg-literal-values&#34; font-size=&#34;16&#34; font-weight=&#34;500&#34; x=&#34;.184&#34; y=&#34;15&#34; textLength=&#34;45.632&#34;&gt;values&lt;/tspan&gt;&lt;/text&gt;&lt;text transform=&#34;translate(810.198 269.776)&#34; fill=&#34;#a5a5a5&#34;&gt;&lt;tspan class=&#34;svg-literal-annotation&#34; font-size=&#34;16&#34; font-weight=&#34;500&#34; x=&#34;.064&#34; y=&#34;15&#34; textLength=&#34;75.872&#34;&gt;annotation&lt;/tspan&gt;&lt;/text&gt;&lt;path class=&#34;svg-literal-annotation&#34;stroke=&#34;#a5a5a5&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M414.063 264v-28m234 28v-28m-370.518-.874L270.084 264&#34;/&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/p&gt;

&lt;h3 id=&#34;beliefbase&#34;&gt;Beliefbase&lt;/h3&gt;

&lt;p&gt;The beliefbase is not a single element to store all facts of the agent. The beliefbase is a &lt;em&gt;tree structure&lt;/em&gt; to organize the agent knowledge. Nodes of this &lt;em&gt;knowledge tree&lt;/em&gt; can be shared over many agents or can be used by &lt;em&gt;on-demand unfification&lt;/em&gt;, so that the agent can perceive the environment in realtime. We split-up the beliefbase into three parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;storage&lt;/strong&gt; a pysical or on-demand data structure to store / generate literals, which are defined by the &lt;a href=&#34;#literal&#34; id=&#34;animate-literal-storage&#34;&gt;last element of the functor with negation, values and annotations&lt;/a&gt; only&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;view&lt;/strong&gt; a flyweight pattern to define a &lt;a href=&#34;#literal&#34; id=&#34;animate-literal-view&#34;&gt;path structure&lt;/a&gt; for organization of literals / knowledge, the different path elements are separated by a &lt;code&gt;/&lt;/code&gt;. The path structure can be defined for each agent individually, so equal literal objects can be addressed by different paths&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;beliefbases&lt;/strong&gt; are a component to connect the &lt;em&gt;storage&lt;/em&gt; and the &lt;em&gt;view&lt;/em&gt; and generate trigger for the execution mechanism&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Knowledge Base</title>
      <link>https://lightjason.github.io/knowledgebase/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lightjason.github.io/knowledgebase/</guid>
      <description>&lt;p&gt;In this Section we provide basic knowledge helpful for understanding the theoretical concepts (and also the &lt;a href=&#34;https://lightjason.github.io/tutorials&#34;&gt;practical tutorials&lt;/a&gt;) of our framework.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;logicalprogramming&#34;&gt;Logical Programming&lt;/a&gt; for understanding the difference to imperative programming. Explanation of the basic concepts for using this paradigm to describe the agent behaviour&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;finitestatemachine&#34;&gt;Finite-State-Machine&lt;/a&gt; for understanding the runtime model of the agent behaviour&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;agent&#34;&gt;Finite-State-Machine &amp;amp; Logical Programming to an Agent&lt;/a&gt; to understand how we combine the parts into our agent definition&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;differencetojason&#34;&gt;Difference to Jason&lt;/a&gt; shows the main differences between &lt;a href=&#34;http://jason.sourceforge.net&#34;&gt;Jason&lt;/a&gt; and our framework&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;actions&#34;&gt;Actions&lt;/a&gt; explanation of all built-in actions&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>